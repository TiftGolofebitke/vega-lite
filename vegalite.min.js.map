{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","src/Encoding.js","src/axis.js","src/compile.js","src/consts.js","src/data.js","src/globals.js","src/legends.js","src/marks.js","src/scale.js","src/schema.js","src/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","merge","schema","Encoding","axis","compile","data","legends","marks","scale","./Encoding","./axis","./compile","./consts","./data","./globals","./legends","./marks","./scale","./schema","./util",2,"marktype","enc","config","this","_marktype","_enc","_cfg","Object","create","DEFAULTS","proto","prototype","is","m","has","x","undefined","field","nodata","nofn","aggr","bin","name","fn","fieldName","fieldTitle","legend","any","all","keys","reduce","init","k","forEach","type","isType","xt","toSpec","excludeConfig","spec","duplicate","dataTypeNames","cfg","toShorthand","map","v","join","parseShorthand","shorthand","split","shift","enctype","dataTypes","indexOf","substr","timefns","fromSpec","extraCfg",3,"axis_def","encoding","opt","isCol","COL","isRow","ROW","ticks","grid","layer","title","axis_title","properties","opacity","value","majorTicks","offset","xAxisMargin","orient","O","labels","angle","align","baseline","Y","titleOffset","names","props","X","defs","push",4,"getCardinality","encType","stats","bins","getbins","stop","start","step","cardinality","setSize","hasRow","hasCol","hasX","hasY","colCardinality","rowCardinality","cellWidth","cellHeight","cellPadding","bandPadding","width","height","xCardinality","yCardinality","facet","group","mdef","stack","enter","facetKeys","cellAxes","fill","from","transform","error","y","unshift","axesGrp","groupdef","axes","apply","scales","concat","update","trans","subfacet","details","g","COLOR","by","getTimeFn","console","timeTransform","func","expr","binning","vv","d","preaggregatedData","output","maxbins","MAX_BINS","aggregates","dims","meas","detail","facets","op","vals","groupby","fields","TEXT","aggregated","stacking","dim","val","idx","Q","T","stacked","STACKED","source","TABLE","point","y1","y0","markdef","mark","p","prop","_name","template","size","format","dataUrl","getUrl","url","parse","padding","hasAgg","hasAggregate","lineType","line","aggResult","hasDetails",5,"encodingTypes","SIZE","SHAPE","ALPHA","viewport","_minWidth","_minHeight","useVegaServer","vegaServerUrl","vegaServerTable","dataFormatType","cellBackgroundColor","yAxisMargin","textCellWidth","bandSize","pointSize","pointShape","strokeWidth","color","textColor","textAlign","textBaseline","textMargin","font","fontSize","fontWeight","fontStyle","_thickOpacity","_thinOpacity","_xZero","_xReverse","_yZero","_yReverse","timeScaleNice",6,"obj","binSize","query","table","JSON","stringify","getSchema","datum","isNaN","Date","getStats","stat","minmax","uniq","count",7,"INDEX",8,"shape",9,"bar_props","x2","xc","y2","yc","point_props","stroke","line_props","area_props","filled_point_props","text_props","text","dx","bar","requiredEncoding","supportedEncoding","row","col","alpha","area","circle","square",10,"scale_type","scale_domain","domain","range","reverse","scale_range","bandWidth","zero","round","nice","outerPadding","points","sort",11,"enum","supportedEnums","supportedTypes","default","required","clone","typicalField","description","onlyOrdinalField","axisMixin","legendMixin","textMixin","weight","minimum","$schema","instantiate","./schemautil",12,"isEmpty","instance","child","difference","defaults","changes","c","hasOwnProperty","constructor","Array",13,"arguments","Infinity","j","find","list","pattern","filter","min","max","arr","dest","src","vg","msg"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var globals = require(\"./globals\"),\n    util = require(\"./util\"),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.schema = require('./schema');\nvl.Encoding = require('./Encoding');\nvl.axis = require('./axis');\nvl.compile = require('./compile');\nvl.data = require('./data');\nvl.legends = require('./legends');\nvl.marks = require('./marks')\nvl.scale = require('./scale');\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n    util = require(\"./util\"),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.schema = require('./schema');\nvl.Encoding = require('./Encoding');\nvl.axis = require('./axis');\nvl.compile = require('./compile');\nvl.data = require('./data');\nvl.legends = require('./legends');\nvl.marks = require('./marks')\nvl.scale = require('./scale');\n\nmodule.exports = vl;\n\n},{\"./Encoding\":2,\"./axis\":3,\"./compile\":4,\"./consts\":5,\"./data\":6,\"./globals\":7,\"./legends\":8,\"./marks\":9,\"./scale\":10,\"./schema\":11,\"./util\":13}],2:[function(require,module,exports){\n\"use strict\";\n\nvar global = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  schema = require('./schema');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config) {\n    this._marktype = marktype;\n    this._enc = enc; // {encType1:field1, ...}\n    this._cfg = util.merge(Object.create(consts.DEFAULTS), config);\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(x) {\n    return this._enc[x] !== undefined;\n  };\n\n  proto.enc = function(x){\n    return this._enc[x];\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? \"\" : \"data.\");\n\n    if (this._enc[x].aggr === \"count\") {\n      return f + \"count\";\n    } else if (!nofn && this._enc[x].bin) {\n      return f + \"bin_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + \"_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn){\n      return f + this._enc[x].fn + \"_\" + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x){\n    return this._enc[x].name;\n  }\n\n  proto.fieldTitle = function(x){\n    if (this._enc[x].aggr) {\n      return this._enc[x].aggr + \"(\" + this._enc[x].name + \")\";\n    } else {\n      return this._enc[x].name;\n    }\n  }\n\n  proto.scale = function(x){\n    return this._enc[x].scale || {};\n  }\n\n  proto.axis = function(x){\n    return this._enc[x].axis || {};\n  }\n\n  proto.aggr = function(x){\n    return this._enc[x].aggr;\n  }\n\n  proto.bin = function(x){\n    return this._enc[x].bin;\n  }\n\n  proto.legend = function(x){\n    return this._enc[x].legend;\n  }\n\n  proto.fn = function(x){\n    return this._enc[x].fn;\n  }\n\n  proto.any = function(f){\n    return util.any(this._enc, f);\n  }\n\n  proto.all = function(f){\n    return util.all(this._enc, f);\n  }\n\n  proto.length = function(){\n    return util.keys(this._enc).length;\n  }\n\n  proto.reduce = function(f, init){\n    var r = init, i=0;\n    for (k in this._enc){\n      r = f(r, this._enc[k], k, this._enc);\n    }\n    return r;\n  }\n\n  proto.forEach = function(f) {\n    var i=0, k;\n    for (k in this._enc) {\n      f(k, this._enc[k], i++);\n    }\n  };\n\n  proto.type = function(x) {\n    return this.has(x) ? this._enc[x].type : null;\n  };\n\n  proto.isType = function(x, t) {\n    var xt = this.type(x);\n    if (xt == null) return false;\n    return (xt & t) > 0;\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig){\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for(var e in enc){\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc\n    }\n\n    if(!excludeConfig){\n      spec.cfg = util.duplicate(this._cfg)\n    }\n\n    return spec;\n  };\n\n  proto.toShorthand = function(){\n    var enc = this._enc;\n    return this._marktype + \".\" + util.keys(enc).map(function(e){\n      var v = enc[e];\n        return e + \"-\" +\n          (v.aggr ? v.aggr+\"_\" : \"\") +\n          (v.fn ? v.fn+\"_\" : \"\") +\n          (v.bin ? \"bin_\" : \"\") +\n          (v.name || \"\") + \"-\" +\n          consts.dataTypeNames[v.type];\n      }\n    ).join(\".\");\n  }\n\n  Encoding.parseShorthand = function(shorthand, cfg){\n    var enc = shorthand.split(\".\"),\n      marktype = enc.shift();\n\n    enc = enc.reduce(function(m, e){\n      var split = e.split(\"-\"),\n        enctype = split[0],\n        o = {name: split[1], type: consts.dataTypes[split[2]]};\n\n      // check aggregate type\n      for(var i in schema.aggr.enum){\n        var a = schema.aggr.enum[i];\n        if(o.name.indexOf(a+\"_\") == 0){\n          o.name = o.name.substr(a.length+1);\n          if (a==\"count\" && o.name.length === 0) o.name = \"*\";\n          o.aggr = a;\n          break;\n        }\n      }\n      // check time fn\n      for(var i in schema.timefns){\n        var f = schema.timefns[i];\n        if(o.name && o.name.indexOf(f+\"_\") == 0){\n          o.name = o.name.substr(o.length+1);\n          o.fn = f;\n          break;\n        }\n      }\n\n      // check bin\n      if(o.name && o.name.indexOf(\"bin_\") == 0){\n        o.name = o.name.substr(4);\n        o.bin = true;\n      }\n\n      m[enctype] = o;\n      return m;\n    }, {});\n\n    return new Encoding(marktype, enc, cfg);\n  }\n\n  Encoding.fromSpec = function(spec, extraCfg) {\n    var enc = util.duplicate(spec.enc);\n\n    //convert type from string to bitcode (e.g, O=1)\n    for(var e in enc){\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, util.merge(spec.cfg, extraCfg || {}));\n  }\n\n  return Encoding;\n\n})();\n\n},{\"./consts\":5,\"./globals\":7,\"./schema\":11,\"./util\":13}],3:[function(require,module,exports){\nvar globals = require('./globals'),\n  util = require('./util');\n\nvar axis = module.exports = {};\n\naxis.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s===X || s===Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n}\n\naxis.defs = function(names, encoding, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis_def(name, encoding, opt));\n    return a;\n  }, []);\n}\n\nfunction axis_def(name, encoding, opt){\n  var type = name, axis;\n  var isCol = name==COL, isRow = name==ROW;\n  if(isCol) type = \"x\";\n  if(isRow) type = \"y\";\n\n  var axis = {\n    type: type,\n    scale: name,\n    ticks: 3 //TODO(kanitw): better determine # of ticks\n  };\n\n  if (encoding.axis(name).grid) {\n    axis.grid = true;\n    axis.layer = \"back\";\n  }\n\n  if (encoding.axis(name).title) {\n    //show title by default\n\n    axis = axis_title(axis, name, encoding, opt);\n  }\n\n  if(isRow || isCol){\n    axis.properties = {\n      ticks: { opacity: {value: 0} },\n      majorTicks: { opacity: {value: 0} },\n      axis: { opacity: {value: 0} }\n    };\n  }\n  if(isCol){\n    axis.offset = [opt.xAxisMargin || 0, encoding.config(\"yAxisMargin\")];\n    axis.orient = \"top\";\n  }\n\n  if (name==\"x\" && (encoding.isType(name, O) || encoding.bin(name))) {\n    axis.properties = {\n      labels: {\n        angle: {value: 270},\n        align: {value: \"right\"},\n        baseline: {value: \"middle\"}\n      }\n    }\n  }\n\n  return axis;\n}\n\nfunction axis_title(axis, name, encoding, opt){\n  axis.title = encoding.fieldTitle(name);\n  if(name==Y){\n    axis.titleOffset = 60;\n    // TODO: set appropriate titleOffset\n    // maybe based on some string length from stats\n  }\n  return axis;\n}\n\n},{\"./globals\":7,\"./util\":13}],4:[function(require,module,exports){\nvar globals = require('./globals'),\n  util = require('./util'),\n  axis = require('./axis'),\n  legends = require('./legends'),\n  marks = require('./marks'),\n  scale = require('./scale');\n\nvar compile = module.exports = function(encoding, stats) {\n  var size = setSize(encoding, stats),\n    cellWidth = size.cellWidth,\n    cellHeight = size.cellHeight;\n\n  var hasAgg = encoding.any(function(v, k){\n    return v.aggr !== undefined;\n  });\n\n  var spec = template(encoding, size, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdef = markdef(mark, encoding, {\n      hasAggregate: hasAgg\n    });\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  group.marks.push(mdef);\n  // TODO: return value not used\n  binning(spec.data[0], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if(!preaggregatedData){\n    encoding.forEach(function(encType, field){\n      if(field.type === T && field.fn){\n        timeTransform(spec.data[0], encoding, encType, field);\n      }\n    });\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec.data[0], encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isType(X, Q | T) && encoding.isType(Y, O)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    mdef.from.transform = [{type: \"sort\", by: encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding);\n    group.legends = legends.defs(encoding);\n  }\n  return spec;\n};\n\nfunction getCardinality(encoding, encType, stats){\n  var field = encoding.fieldName(encType);\n  if (encoding.bin(encType)) {\n    var bins = util.getbins(stats[field]);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  return stats[field].cardinality;\n}\n\nfunction setSize(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y);\n\n  // HACK to set chart size\n  // NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  // One solution is to update Vega to support auto-sizing\n  // In the meantime, auto-padding (mostly) does the trick\n  //\n  var colCardinality = hasCol ? getCardinality(encoding, COL, stats) : 1,\n    rowCardinality = hasRow ? getCardinality(encoding, ROW, stats) : 1;\n\n  var cellWidth = hasX ?\n      +encoding.config(\"cellWidth\") || encoding.config(\"width\") * 1.0 / colCardinality :\n      encoding.marktype() === \"text\" ?\n        +encoding.config(\"textCellWidth\") :\n        +encoding.config(\"bandSize\"),\n    cellHeight = hasY ?\n      +encoding.config(\"cellHeight\") || encoding.config(\"height\") * 1.0 / rowCardinality :\n      +encoding.config(\"bandSize\"),\n    cellPadding = encoding.config(\"cellPadding\"),\n    bandPadding = encoding.config(\"bandPadding\"),\n    width = encoding.config(\"_minWidth\"),\n    height = encoding.config(\"_minHeight\");\n\n  if (hasX && (encoding.isType(X, O) || encoding.bin(X))) { //ordinal field will override parent\n    // bands within cell use rangePoints()\n    var xCardinality = getCardinality(encoding, X, stats);\n    cellWidth = (xCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  width = cellWidth * ((1 + cellPadding) * (colCardinality-1) + 1);\n\n  if (hasY && (encoding.isType(Y, O) || encoding.bin(Y))) {\n    // bands within cell use rangePoint()\n    var yCardinality = getCardinality(encoding, Y, stats);\n    cellHeight = (yCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  height = cellHeight * ((1 + cellPadding) * (rowCardinality-1) + 1);\n\n  return {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    width: width,\n    height:height\n  };\n}\n\nfunction facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats) {\n    var enter = group.properties.enter;\n    var facetKeys = [], cellAxes = [];\n\n    var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n    var xAxisMargin = encoding.has(Y) ? encoding.config(\"xAxisMargin\") : undefined;\n\n    enter.fill = {value: encoding.config(\"cellBackgroundColor\")};\n\n    //move \"from\" to cell level and add facet transform\n    group.from = {data: group.marks[0].from.data};\n\n    if (group.marks[0].from.transform) {\n      delete group.marks[0].from.data; //need to keep transform for subfacetting case\n    } else {\n      delete group.marks[0].from;\n    }\n    if (hasRow) {\n      if (!encoding.isType(ROW, O)) {\n        util.error(\"Row encoding should be ordinal.\");\n      }\n      enter.y = {scale: ROW, field: \"keys.\" + facetKeys.length};\n      enter.height = {\"value\": cellHeight}; // HACK\n\n      facetKeys.push(encoding.field(ROW));\n\n      var from;\n      if (hasCol) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(COL)]});\n      }\n\n      var axesGrp = groupdef(\"x-axes\", {\n          axes: encoding.has(X) ?  axis.defs([\"x\"], encoding) : undefined,\n          x: hasCol ? {scale: COL, field: \"keys.0\", offset: xAxisMargin} : {value: xAxisMargin},\n          width: hasCol && {\"value\": cellWidth}, //HACK?\n          from: from\n        });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || []);\n      spec.axes.push.apply(spec.axes, axis.defs([\"row\"], encoding));\n    } else { // doesn't have row\n      if(encoding.has(X)){\n        //keep x axis in the cell\n        cellAxes.push.apply(cellAxes, axis.defs([\"x\"], encoding));\n      }\n    }\n\n    if (hasCol) {\n      if (!encoding.isType(COL, O)) {\n        util.error(\"Col encoding should be ordinal.\");\n      }\n      enter.x = {scale: COL, field: \"keys.\" + facetKeys.length};\n      enter.width = {\"value\": cellWidth}; // HACK\n\n      facetKeys.push(encoding.field(COL));\n\n      var from;\n      if (hasRow) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(ROW)]});\n      }\n\n      var axesGrp = groupdef(\"y-axes\", {\n        axes: encoding.has(Y) ? axis.defs([\"y\"], encoding) : undefined,\n        y: hasRow && {scale: ROW, field: \"keys.0\"},\n        x: hasRow && {value: xAxisMargin},\n        height: hasRow && {\"value\": cellHeight}, //HACK?\n        from: from\n      });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || [])\n      spec.axes.push.apply(spec.axes, axis.defs([\"col\"], encoding, {\n        xAxisMargin: xAxisMargin\n      }));\n    } else { // doesn't have col\n      if(encoding.has(Y)){\n        cellAxes.push.apply(cellAxes, axis.defs([\"y\"], encoding));\n      }\n    }\n\n    if(hasRow){\n      if(enter.x) enter.x.offset= xAxisMargin;\n      else enter.x = {value: xAxisMargin};\n    }\n    if(hasCol){\n      //TODO fill here..\n    }\n\n    // assuming equal cellWidth here\n    // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n    spec.scales = (spec.scales ||[]).concat(scale.defs(\n      scale.names(enter).concat(scale.names(mdef.properties.update)),\n      encoding,\n      {cellWidth: cellWidth, cellHeight: cellHeight, stack: stack, facet:true, stats: stats}\n    )); // row/col scales + cell scales\n\n    if (cellAxes.length > 0) {\n      group.axes = cellAxes;\n    }\n\n    // add facet transform\n    var trans = (group.from.transform || (group.from.transform = []));\n    trans.unshift({type: \"facet\", keys: facetKeys});\n\n  return spec;\n  }\n\nfunction subfacet(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef(\"subfacet\", {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: \"facet\", keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: \"sort\", by: encoding.field(COLOR)});\n  }\n}\n\nfunction getTimeFn(fn){\n  switch(fn){\n    case \"second\": return \"getUTCSeconds\";\n    case \"minute\": return \"getUTCMinutes\";\n    case \"hour\": return \"getUTCHours\";\n    case \"day\": return \"getUTCDay\";\n    case \"date\": return \"getUTCDate\";\n    case \"month\": return \"getUTCMonth\";\n    case \"year\": return \"getUTCFullYear\";\n  }\n  console.error(\"no function specified for date\");\n}\n\nfunction timeTransform(spec, encoding, encType, field){\n  var func = getTimeFn(field.fn);\n\n  spec.transform = spec.transform || [];\n  spec.transform.push({\n    type: \"formula\",\n    field: encoding.field(encType),\n    expr: \"new Date(d.data.\"+field.name+\").\"+func+\"()\"\n  });\n  return spec;\n}\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n  encoding.forEach(function(vv, d) {\n    if (d.bin) bins[d.name] = d.name;\n  });\n  bins = util.keys(bins);\n\n  if (bins.length === 0 || opt.preaggregatedData) return false;\n\n  if (!spec.transform) spec.transform = [];\n  bins.forEach(function(d) {\n    spec.transform.push({\n      type: \"bin\",\n      field: \"data.\" + d,\n      output: \"data.bin_\" + d,\n      maxbins: MAX_BINS\n    });\n  });\n  return bins;\n}\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n  var dims = {}, meas = {}, detail = {}, facets={};\n  encoding.forEach(function(encType, field) {\n    if (field.aggr) {\n      if(field.aggr===\"count\"){\n        meas[\"count\"] = {op:\"count\", field:\"*\"};\n      }else{\n        meas[field.aggr+\"|\"+field.name] = {\n          op:field.aggr,\n          field:\"data.\"+field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType==ROW || encType == COL){\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!spec.transform) spec.transform = [];\n    spec.transform.push({\n      type: \"aggregate\",\n      groupby: dims,\n      fields: meas\n    });\n\n    if (encoding.marktype() === TEXT) {\n      meas.forEach( function (m) {\n        var fieldName = m.field.substr(5), //remove \"data.\"\n          field = \"data.\" + (m.op ? m.op + \"_\" : \"\") + fieldName;\n        spec.transform.push({\n          type: \"formula\",\n          field: field,\n          expr: \"d3.format('.2f')(d.\"+field+\")\"\n        });\n      });\n    }\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  }\n}\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n  if (!encoding.has(COLOR)) return false;\n\n  var dim = X, val = Y, idx = 1;\n  if (encoding.isType(X,Q|T) && !encoding.isType(Y,Q|T) && encoding.has(Y)) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: \"aggregate\",\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: \"sum\", field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if(facets && facets.length > 0){\n    stacked.transform.push({ //calculate max for each facet\n      type: \"aggregate\",\n      groupby: facets,\n      fields: [{op: \"max\", field: \"data.sum_\" + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: \"stack\",\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val+\"2\"}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val+\"2\"] = mdef.properties.enter[val+\"2\"] = {scale: val, field: val+\"2\"};\n\n  return val; //return stack encoding\n}\n\n\nfunction markdef(mark, encoding, opt) {\n  var p = mark.prop(encoding, opt)\n  return {\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  };\n}\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: \"group\",\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: \"width\"},\n        height: opt.height || {group: \"height\"}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\nfunction template(encoding, size, stats) { //hack use stats\n\n  var data = {name:TABLE, format: {type: encoding.config(\"dataFormatType\")}},\n    dataUrl = vl.data.getUrl(encoding, stats);\n  if(dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  encoding.forEach(function(encType, field){\n    if(field.type == T){\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = \"date\";\n    }else if(field.type == Q){\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === \"count\") {\n        var name = \"count\";\n      } else if(preaggregatedData && field.bin){\n        var name = \"bin_\" + field.name;\n      } else if(preaggregatedData && field.aggr){\n        var name = field.aggr + \"_\" + field.name;\n      } else{\n        var name = field.name;\n      }\n      data.format.parse[name] = \"number\";\n    }\n  });\n\n  return {\n    width: size.width,\n    height: size.height,\n    padding: \"auto\",\n    data: [data],\n    marks: [groupdef(\"cell\", {\n      width: size.cellWidth ? {value: size.cellWidth}: undefined,\n      height: size.cellHeight ? {value: size.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"./axis\":3,\"./globals\":7,\"./legends\":8,\"./marks\":9,\"./scale\":10,\"./util\":13}],5:[function(require,module,exports){\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT];\n\nconsts.dataTypes = {\"O\": O, \"Q\": Q, \"T\": T};\n\nconsts.dataTypeNames = [\"O\",\"Q\",\"T\"].reduce(function(r,x) {\n  r[consts.dataTypes[x]] = x; return r;\n},{});\n\nconsts.DEFAULTS = {\n  // template\n  width: undefined,\n  height: undefined,\n  viewport: undefined,\n  _minWidth: 20,\n  _minHeight: 20,\n\n  // data source\n  dataUrl: undefined, //for easier export\n  useVegaServer: false,\n  vegaServerUrl: \"http://localhost:3001\",\n  vegaServerTable: undefined,\n  dataFormatType: \"json\",\n\n  //small multiples\n  cellHeight: 200, // will be overwritten by bandWidth\n  cellWidth: 200, // will be overwritten by bandWidth\n  cellPadding: 0.1,\n  cellBackgroundColor: \"#fdfdfd\",\n  xAxisMargin: 80,\n  yAxisMargin: 0,\n  textCellWidth: 90,\n\n  // marks\n  bandSize: 21,\n  bandPadding: 1,\n  pointSize: 50,\n  pointShape: \"circle\",\n  strokeWidth: 2,\n  color: \"steelblue\",\n  textColor: \"black\",\n  textAlign: \"left\",\n  textBaseline: \"middle\",\n  textMargin: 4,\n  font: \"Helvetica Neue\",\n  fontSize: \"12\",\n  fontWeight: \"normal\",\n  fontStyle: \"normal\",\n  opacity: 1,\n  _thickOpacity: 0.5,\n  _thinOpacity: 0.2,\n\n  // scales\n  // TODO remove _xZero, ...\n  _xZero: true,\n  _xReverse: false,\n  _yZero: true,\n  _yReverse: false,\n  timeScaleNice: \"day\"\n};\n},{\"./globals\":7}],6:[function(require,module,exports){\n// TODO rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar data = module.exports = {};\n\ndata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config(\"useVegaServer\")) {\n    // don't use vega server\n    return encoding.config(\"dataUrl\");\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = []\n  encoding.forEach(function(encType, field){\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    }\n    if (field.aggr) {\n      obj.aggr = field.aggr\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name]).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config(\"vegaServerTable\"),\n    fields: fields\n  }\n\n  return encoding.config(\"vegaServerUrl\") + \"/query/?q=\" + JSON.stringify(query)\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\ndata.getSchema = function(data){\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k){\n    // find non-null data\n    var i=0, datum = data[i][k];\n    while(datum === \"\" || datum === null || datum === undefined){\n      datum = data[++i][k];\n    }\n\n    //TODO(kanitw): better type inference here\n    var type = (typeof datum === \"number\") ? \"number\" :\n      isNaN(Date.parse(datum)) ? \"text\" : \"time\";\n\n    schema.push({name: k, type: type});\n  });\n\n  return schema;\n};\n\ndata.getStats = function(data){ // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var stat = util.minmax(data, k);\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n    stats[k] = stat;\n  });\n  return stats;\n};\n\n},{\"./util\":13}],7:[function(require,module,exports){\n(function (global){\n// declare global constant\nvar g = global || window;\n\ng.TABLE = \"table\";\ng.STACKED = \"stacked\";\ng.INDEX = \"index\";\n\ng.X = \"x\";\ng.Y = \"y\";\ng.ROW = \"row\";\ng.COL = \"col\";\ng.SIZE = \"size\";\ng.SHAPE = \"shape\";\ng.COLOR = \"color\";\ng.ALPHA = \"alpha\";\ng.TEXT = \"text\";\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n//TODO refactor this to be config?\ng.MAX_BINS = 20;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],8:[function(require,module,exports){\nvar global = require('./globals');\n\nvar legends = module.exports = {};\n\nlegends.defs = function(encoding) {\n  var legends = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    legends.push({\n      fill: COLOR,\n      title: encoding.fieldTitle(COLOR),\n      orient: \"right\"\n    });\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    legends.push({\n      size: SIZE,\n      title: encoding.fieldTitle(SIZE),\n      orient: legends.length === 1 ? \"left\" : \"right\"\n    });\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (legends.length === 2) {\n      // TODO: fix this\n      console.error(\"Vegalite currently only supports two legends\");\n      return legends;\n    }\n    legends.push({\n      shape: SHAPE,\n      title: encoding.fieldTitle(SHAPE),\n      orient: legends.length === 1 ? \"left\" : \"right\"\n    });\n  }\n\n  return legends;\n}\n},{\"./globals\":7}],9:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar marks = module.exports = {};\n\nmarks.bar = {\n  type: \"rect\",\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.line = {\n  type: \"line\",\n  line: true,\n  prop: line_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, color:1, alpha:1}\n};\n\nmarks.area = {\n  type: \"area\",\n  stack: true,\n  line: true,\n  requiredEncoding: [\"x\", \"y\"],\n  prop: area_props,\n  supportedEncoding: marks.line.supportedEncoding\n};\n\nmarks.circle = {\n  type: \"symbol\",\n  prop: filled_point_props(\"circle\"),\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.square = {\n  type: \"symbol\",\n  prop: filled_point_props(\"square\"),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: \"symbol\",\n  prop: point_props,\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1, shape:1}\n};\n\nmarks.text = {\n  type: \"text\",\n  prop: text_props,\n  requiredEncoding: [\"text\"],\n  supportedEncoding: {row:1, col:1, size:1, color:1, alpha:1, text:1}\n};\n\nfunction bar_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T) && !e.bin(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.has(Y) && (!e.isType(Y,Q|T) || e.bin(Y))) {\n      p.x2 = {scale: X, value: 0};\n    }\n  } else if (e.has(X)) {\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T) && !e.bin(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    p.yc = {group: \"height\"};\n  }\n\n  // width\n  if (!e.isType(X,Q|T)) {\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.width = {scale: X, band: true, offset: -1};\n      p.width = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(Y,O) && !e.bin(Y)) {\n    p.width = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // height\n  if (!e.isType(Y,Q|T)) {\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.height = {scale: Y, band: true, offset: -1};\n      p.height = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(X,O) && !e.bin(X)) {\n    p.height = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, opt) {\n  var p = {};\n  opt = opt || {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.config(\"pointSize\")};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.config(\"pointShape\")};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }else{\n    p.opacity = {\n      value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n    };\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction line_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction area_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.isType(Y,Q|T) && e.has(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: \"horizontal\"};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, opt) {\n    var p = {};\n    opt = opt || {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.config(\"bandSize\")/2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.config(\"bandSize\")/2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.config(\"pointSize\")};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.config(\"color\")};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    }else {\n      p.opacity = {\n        value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n      };\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(X)) {\n    p.fontSize = {value: e.config(\"fontSize\")};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"textColor\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    p.text = {field: e.field(TEXT)};\n  } else {\n    p.text = {value: \"Abc\"};\n  }\n\n  p.font = {value: e.config(\"font\")};\n  p.fontWeight = {value: e.config(\"fontWeight\")};\n  p.fontStyle = {value: e.config(\"fontStyle\")};\n  p.baseline = {value: e.config(\"textBaseline\")};\n\n  // align\n  if (e.has(X)) {\n    if (e.isType(X,O)) {\n      p.align = {value: \"left\"};\n      p.dx = {value: e.config(\"textMargin\")};\n    } else {\n      p.align = {value: \"center\"}\n    }\n  } else if (e.has(Y)) {\n    p.align = {value: \"left\"};\n    p.dx = {value: e.config(\"textMargin\")};\n  } else {\n    p.align = {value: e.config(\"textAlign\")};\n  }\n\n  return p;\n}\n},{\"./globals\":7,\"./util\":13}],10:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar scale = module.exports = {};\n\nscale.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n}\n\nscale.defs = function (names, encoding, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale_type(name, encoding),\n      domain: scale_domain(name, encoding, opt)\n    };\n    if (s.type === \"ordinal\" && !encoding.bin(name)) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, opt);\n\n    return (a.push(s), a);\n  }, []);\n}\n\nfunction scale_type(name, encoding) {\n  switch (encoding.type(name)) {\n    case O: return \"ordinal\";\n    case T:\n      if (encoding.fn(name)) {\n        return \"linear\";\n      }\n      return \"time\";\n    case Q:\n      if (encoding.bin(name)) {\n        return \"ordinal\";\n      }\n      return encoding.scale(name).type || \"linear\";\n  }\n}\n\nfunction scale_domain(name, encoding, opt) {\n  if (encoding.type(name) === T){\n    switch(encoding.fn(name)){\n      case \"second\":\n      case \"minute\": return [0, 59];\n      case \"hour\": return [0, 23];\n      case \"day\": return [0, 6];\n      case \"date\": return [1, 31];\n      case \"month\": return [0, 11];\n    }\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)]);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name===Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: \"data.\" + (opt.facet ? \"max_\" :\"\") + \"sum_\" + encoding.field(name, true)\n    }:\n    {data: TABLE, field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name)) {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellWidth ? [0, opt.cellWidth] : \"width\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_xZero\");\n        s.reverse = spec.reverse || encoding.config(\"_xReverse\");\n      }\n      s.round = true;\n      if (encoding.isType(s.name, T)){\n        s.nice = encoding.aggr(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name)) {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellHeight ? [opt.cellHeight, 0] : \"height\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_yZero\");\n        s.reverse = spec.reverse || encoding.config(\"_yReverse\");\n      }\n\n      s.round = true;\n\n      if (encoding.isType(s.name, T)){\n        s.nice = encoding.aggr(s.name);\n      }else{\n        s.nice = true;\n      }\n      break;\n    case ROW:\n      s.bandWidth = opt.cellHeight || encoding.config(\"cellHeight\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL:\n      s.bandWidth = opt.cellWidth || encoding.config(\"cellWidth\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is(\"bar\")) {\n        s.range = [3, +encoding.config(\"bandSize\")];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else {\n        s.range = [10, 1000];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = \"shapes\";\n      break;\n    case COLOR:\n      if (encoding.isType(s.name, O)) {\n        s.range = \"category10\";\n      } else {\n        s.range = [\"#ddf\", \"steelblue\"];\n        s.zero = false;\n      }\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error(\"Unknown encoding name: \"+s.name);\n  }\n\n  switch(s.name){\n    case ROW:\n    case COL:\n      s.padding = encoding.config(\"cellPadding\");\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name) ) { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.config(\"bandPadding\");\n      }\n  }\n}\n},{\"./globals\":7,\"./util\":13}],11:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n//\nvar schema = module.exports = {},\n  util = require('./util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: \"string\",\n  enum: [\"point\", \"bar\", \"line\", \"area\", \"circle\", \"square\", \"text\"]\n};\n\nschema.aggr = {\n  type: \"string\",\n  enum: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n  supportedEnums: {\n    Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n    O: [\"count\"],\n    T: [\"avg\", \"min\", \"max\", \"count\"],\n    \"\": [\"count\"],\n  },\n  supportedTypes: {\"Q\": true, \"O\": true, \"T\": true, \"\": true}\n};\n\nschema.timefns = [\"month\", \"year\", \"day\", \"date\", \"hour\", \"minute\", \"second\"];\n\nschema.fn = {\n  type: \"string\",\n  enum: schema.timefns,\n  supportedTypes: {\"T\": true}\n}\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: \"string\",\n  enum: [\"linear\", \"log\",\"pow\", \"sqrt\", \"quantile\"],\n  default: \"linear\",\n  supportedTypes: {\"Q\": true}\n};\n\nschema.field = {\n  type: \"object\",\n  required: [\"name\", \"type\"],\n  properties: {\n    name: {\n      type: \"string\"\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nvar typicalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\", \"Q\", \"T\"]\n    },\n    bin: {\n      type: \"boolean\",\n      supportedTypes: {\"Q\": true, \"O\": true}\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    scale: {\n      type: \"object\",\n      properties: {\n        type: schema.scale_type,\n        reverse: { type: \"boolean\", default: false },\n        zero: {\n          type: \"boolean\",\n          description: \"Include zero\",\n          default: false,\n          supportedTypes: {\"Q\": true}\n        },\n        nice: {\n          type: \"string\",\n          enum: [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"],\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\"]\n    },\n    bin: {\n      type: \"boolean\",\n      supportedTypes: {\"O\": true}\n    },\n    aggr: {\n      type: \"string\",\n      enum: [\"count\"],\n      supportedTypes: {\"O\": true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: \"object\",\n  properties: {\n    axis: {\n      type: \"object\",\n      properties: {\n        grid: { type: \"boolean\", default: false },\n        title: { type: \"boolean\", default: true }\n      }\n    }\n  }\n}\n\nvar legendMixin = {\n  type: \"object\",\n  properties: {\n    legend: { type: \"boolean\", default: true }\n  }\n}\n\nvar textMixin = {\n  type: \"object\",\n  properties: {\n    text: {\n      type: \"object\",\n      properties: {\n        weight: {\n          type: \"string\",\n          enum: [\"normal\", \"bold\"],\n          default: \"normal\",\n          supportedTypes: {\"T\": true}\n        },\n        size: {\n          type: \"integer\",\n          default: 10,\n          minimum: 0,\n          supportedTypes: {\"T\": true}\n        },\n        font: {\n          type: \"string\",\n          default: \"Halvetica Neue\",\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n}\n\nvar x = merge(clone(typicalField), axisMixin);\nvar y = clone(x);\n\nvar row = clone(onlyOrdinalField);\nvar col = clone(row);\n\nvar size = merge(clone(typicalField), legendMixin);\nvar color = merge(clone(typicalField), legendMixin);\nvar alpha = clone(typicalField);\nvar shape = merge(clone(onlyOrdinalField), legendMixin);\n\nvar text = merge(clone(typicalField), textMixin);\n\nvar cfg = {\n  type: \"object\",\n  properties: {\n    dataFormatType: {\n      type: \"string\",\n      enum: [\"json\", \"csv\"]\n    },\n    useVegaServer: {\n      type: \"boolean\",\n      default: false\n    },\n    dataUrl: {\n      type: \"string\"\n    },\n    vegaServerTable: {\n      type: \"string\"\n    },\n    vegaServerUrl: {\n      type: \"string\",\n      default: \"http://localhost:3001\"\n    }\n  }\n}\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: \"http://json-schema.org/draft-04/schema#\",\n  type: \"object\",\n  required: [\"marktype\", \"enc\", \"cfg\"],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: \"object\",\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text\n      }\n    },\n    cfg: cfg\n  }\n};\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function(){\n  return schema.util.instantiate(schema.schema);\n}\n\n},{\"./schemautil\":12,\"./util\":13}],12:[function(require,module,exports){\nvar util = module.exports = {};\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0\n}\n\n// instantiate a schema\nutil.instantiate = function(schema, required) {\n  if (schema.type === 'object') {\n    schema.required = schema.required ? schema.required : [];\n    var instance = {};\n    for (var name in schema.properties) {\n      var child = schema.properties[name];\n      instance[name] = util.instantiate(child, schema.required.indexOf(name) != -1);\n    };\n    return instance;\n  } else if ('default' in schema) {\n    return schema.default;\n  } else if (schema.enum && required) {\n    return schema.enum[0];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nutil.difference = function(defaults, instance) {\n  var changes = {};\n  for (var prop in instance) {\n    if (!defaults || defaults[prop] !== instance[prop]) {\n      if (typeof instance[prop] == \"object\") {\n        var c = util.difference(defaults[prop], instance[prop]);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else {\n        changes[prop] = instance[prop];\n      }\n    }\n  }\n  return changes;\n};\n\n// recursively merges instance into defaults\nutil.merge = function (defaults, instance) {\n  if (typeof instance!=='object' || instance===null) {\n    return defaults;\n  }\n\n  for (var p in instance) {\n    if (!instance.hasOwnProperty(p))\n      continue;\n    if (instance[p]===undefined )\n      continue;\n    if (typeof instance[p] !== 'object' || instance[p] === null) {\n      defaults[p] = instance[p];\n    } else if (typeof defaults[p] !== 'object' || defaults[p] === null) {\n      defaults[p] = util.merge(instance[p].constructor === Array ? [] : {}, instance[p]);\n    } else {\n      util.merge(defaults[p], instance[p]);\n    }\n  }\n  return defaults;\n}\n\n},{}],13:[function(require,module,exports){\nvar util = module.exports = {};\n\nutil.keys = function (obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n}\n\nutil.vals = function (obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n}\n\nutil.range = function (start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error(\"infinite range\");\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n}\n\nutil.find = function (list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n}\n\nutil.uniq = function (data, field) {\n  var map = {}, count = 0, i, k;\n  for (i=0; i<data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n}\n\nutil.minmax = function (data, field) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (i=0; i<data.length; ++i) {\n    var v = data[i][field];\n    if (v > stats.max) stats.max = v;\n    if (v < stats.min) stats.min = v;\n  }\n  return stats;\n}\n\nutil.duplicate = function (obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.any = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(f(arr[k], k, i++)) return true;\n  }\n  return false;\n}\n\nutil.all = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(!f(arr[k], k, i++)) return false;\n  }\n  return true;\n}\n\nutil.merge = function(dest, src){\n  return util.keys(src).reduce(function(c, k){\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.getbins = function (stats) {\n  return vg.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: MAX_BINS\n  });\n}\n\n\nutil.error = function(msg){\n  console.error(\"[VL Error]\", msg);\n}\n\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvdmwiLCJzcmMvRW5jb2RpbmcuanMiLCJzcmMvYXhpcy5qcyIsInNyYy9jb21waWxlLmpzIiwic3JjL2NvbnN0cy5qcyIsInNyYy9kYXRhLmpzIiwic3JjL2dsb2JhbHMuanMiLCJzcmMvbGVnZW5kcy5qcyIsInNyYy9tYXJrcy5qcyIsInNyYy9zY2FsZS5qcyIsInNyYy9zY2hlbWEuanMiLCJzcmMvc2NoZW1hdXRpbC5qcyIsInNyYy91dGlsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3ZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDdEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3ZDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN4V0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDcktBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3TkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzlEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIGdsb2JhbHMgPSByZXF1aXJlKFwiLi9nbG9iYWxzXCIpLFxuICAgIHV0aWwgPSByZXF1aXJlKFwiLi91dGlsXCIpLFxuICAgIGNvbnN0cyA9IHJlcXVpcmUoJy4vY29uc3RzJyk7XG5cbnZhciB2bCA9IHV0aWwubWVyZ2UoY29uc3RzLCB1dGlsKTtcblxudmwuc2NoZW1hID0gcmVxdWlyZSgnLi9zY2hlbWEnKTtcbnZsLkVuY29kaW5nID0gcmVxdWlyZSgnLi9FbmNvZGluZycpO1xudmwuYXhpcyA9IHJlcXVpcmUoJy4vYXhpcycpO1xudmwuY29tcGlsZSA9IHJlcXVpcmUoJy4vY29tcGlsZScpO1xudmwuZGF0YSA9IHJlcXVpcmUoJy4vZGF0YScpO1xudmwubGVnZW5kcyA9IHJlcXVpcmUoJy4vbGVnZW5kcycpO1xudmwubWFya3MgPSByZXF1aXJlKCcuL21hcmtzJylcbnZsLnNjYWxlID0gcmVxdWlyZSgnLi9zY2FsZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHZsO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL2dsb2JhbHMnKSxcbiAgY29uc3RzID0gcmVxdWlyZSgnLi9jb25zdHMnKSxcbiAgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpLFxuICBzY2hlbWEgPSByZXF1aXJlKCcuL3NjaGVtYScpO1xuXG52YXIgRW5jb2RpbmcgPSBtb2R1bGUuZXhwb3J0cyA9IChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBFbmNvZGluZyhtYXJrdHlwZSwgZW5jLCBjb25maWcpIHtcbiAgICB0aGlzLl9tYXJrdHlwZSA9IG1hcmt0eXBlO1xuICAgIHRoaXMuX2VuYyA9IGVuYzsgLy8ge2VuY1R5cGUxOmZpZWxkMSwgLi4ufVxuICAgIHRoaXMuX2NmZyA9IHV0aWwubWVyZ2UoT2JqZWN0LmNyZWF0ZShjb25zdHMuREVGQVVMVFMpLCBjb25maWcpO1xuICB9XG5cbiAgdmFyIHByb3RvID0gRW5jb2RpbmcucHJvdG90eXBlO1xuXG4gIHByb3RvLm1hcmt0eXBlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX21hcmt0eXBlO1xuICB9O1xuXG4gIHByb3RvLmlzID0gZnVuY3Rpb24obSkge1xuICAgIHJldHVybiB0aGlzLl9tYXJrdHlwZSA9PT0gbTtcbiAgfTtcblxuICBwcm90by5oYXMgPSBmdW5jdGlvbih4KSB7XG4gICAgcmV0dXJuIHRoaXMuX2VuY1t4XSAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHByb3RvLmVuYyA9IGZ1bmN0aW9uKHgpe1xuICAgIHJldHVybiB0aGlzLl9lbmNbeF07XG4gIH07XG5cbiAgLy8gZ2V0IFwiZmllbGRcIiBwcm9wZXJ0eSBmb3IgdmVnYVxuICBwcm90by5maWVsZCA9IGZ1bmN0aW9uKHgsIG5vZGF0YSwgbm9mbikge1xuICAgIGlmICghdGhpcy5oYXMoeCkpIHJldHVybiBudWxsO1xuXG4gICAgdmFyIGYgPSAobm9kYXRhID8gXCJcIiA6IFwiZGF0YS5cIik7XG5cbiAgICBpZiAodGhpcy5fZW5jW3hdLmFnZ3IgPT09IFwiY291bnRcIikge1xuICAgICAgcmV0dXJuIGYgKyBcImNvdW50XCI7XG4gICAgfSBlbHNlIGlmICghbm9mbiAmJiB0aGlzLl9lbmNbeF0uYmluKSB7XG4gICAgICByZXR1cm4gZiArIFwiYmluX1wiICsgdGhpcy5fZW5jW3hdLm5hbWU7XG4gICAgfSBlbHNlIGlmICghbm9mbiAmJiB0aGlzLl9lbmNbeF0uYWdncikge1xuICAgICAgcmV0dXJuIGYgKyB0aGlzLl9lbmNbeF0uYWdnciArIFwiX1wiICsgdGhpcy5fZW5jW3hdLm5hbWU7XG4gICAgfSBlbHNlIGlmICghbm9mbiAmJiB0aGlzLl9lbmNbeF0uZm4pe1xuICAgICAgcmV0dXJuIGYgKyB0aGlzLl9lbmNbeF0uZm4gKyBcIl9cIiArIHRoaXMuX2VuY1t4XS5uYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZiArIHRoaXMuX2VuY1t4XS5uYW1lO1xuICAgIH1cbiAgfTtcblxuICBwcm90by5maWVsZE5hbWUgPSBmdW5jdGlvbih4KXtcbiAgICByZXR1cm4gdGhpcy5fZW5jW3hdLm5hbWU7XG4gIH1cblxuICBwcm90by5maWVsZFRpdGxlID0gZnVuY3Rpb24oeCl7XG4gICAgaWYgKHRoaXMuX2VuY1t4XS5hZ2dyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZW5jW3hdLmFnZ3IgKyBcIihcIiArIHRoaXMuX2VuY1t4XS5uYW1lICsgXCIpXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLl9lbmNbeF0ubmFtZTtcbiAgICB9XG4gIH1cblxuICBwcm90by5zY2FsZSA9IGZ1bmN0aW9uKHgpe1xuICAgIHJldHVybiB0aGlzLl9lbmNbeF0uc2NhbGUgfHwge307XG4gIH1cblxuICBwcm90by5heGlzID0gZnVuY3Rpb24oeCl7XG4gICAgcmV0dXJuIHRoaXMuX2VuY1t4XS5heGlzIHx8IHt9O1xuICB9XG5cbiAgcHJvdG8uYWdnciA9IGZ1bmN0aW9uKHgpe1xuICAgIHJldHVybiB0aGlzLl9lbmNbeF0uYWdncjtcbiAgfVxuXG4gIHByb3RvLmJpbiA9IGZ1bmN0aW9uKHgpe1xuICAgIHJldHVybiB0aGlzLl9lbmNbeF0uYmluO1xuICB9XG5cbiAgcHJvdG8ubGVnZW5kID0gZnVuY3Rpb24oeCl7XG4gICAgcmV0dXJuIHRoaXMuX2VuY1t4XS5sZWdlbmQ7XG4gIH1cblxuICBwcm90by5mbiA9IGZ1bmN0aW9uKHgpe1xuICAgIHJldHVybiB0aGlzLl9lbmNbeF0uZm47XG4gIH1cblxuICBwcm90by5hbnkgPSBmdW5jdGlvbihmKXtcbiAgICByZXR1cm4gdXRpbC5hbnkodGhpcy5fZW5jLCBmKTtcbiAgfVxuXG4gIHByb3RvLmFsbCA9IGZ1bmN0aW9uKGYpe1xuICAgIHJldHVybiB1dGlsLmFsbCh0aGlzLl9lbmMsIGYpO1xuICB9XG5cbiAgcHJvdG8ubGVuZ3RoID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdXRpbC5rZXlzKHRoaXMuX2VuYykubGVuZ3RoO1xuICB9XG5cbiAgcHJvdG8ucmVkdWNlID0gZnVuY3Rpb24oZiwgaW5pdCl7XG4gICAgdmFyIHIgPSBpbml0LCBpPTA7XG4gICAgZm9yIChrIGluIHRoaXMuX2VuYyl7XG4gICAgICByID0gZihyLCB0aGlzLl9lbmNba10sIGssIHRoaXMuX2VuYyk7XG4gICAgfVxuICAgIHJldHVybiByO1xuICB9XG5cbiAgcHJvdG8uZm9yRWFjaCA9IGZ1bmN0aW9uKGYpIHtcbiAgICB2YXIgaT0wLCBrO1xuICAgIGZvciAoayBpbiB0aGlzLl9lbmMpIHtcbiAgICAgIGYoaywgdGhpcy5fZW5jW2tdLCBpKyspO1xuICAgIH1cbiAgfTtcblxuICBwcm90by50eXBlID0gZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB0aGlzLmhhcyh4KSA/IHRoaXMuX2VuY1t4XS50eXBlIDogbnVsbDtcbiAgfTtcblxuICBwcm90by5pc1R5cGUgPSBmdW5jdGlvbih4LCB0KSB7XG4gICAgdmFyIHh0ID0gdGhpcy50eXBlKHgpO1xuICAgIGlmICh4dCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICh4dCAmIHQpID4gMDtcbiAgfTtcblxuICBwcm90by5jb25maWcgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NmZ1tuYW1lXTtcbiAgfTtcblxuICBwcm90by50b1NwZWMgPSBmdW5jdGlvbihleGNsdWRlQ29uZmlnKXtcbiAgICB2YXIgZW5jID0gdXRpbC5kdXBsaWNhdGUodGhpcy5fZW5jKSxcbiAgICAgIHNwZWM7XG5cbiAgICAvLyBjb252ZXJ0IHR5cGUncyBiaXRjb2RlIHRvIHR5cGUgbmFtZVxuICAgIGZvcih2YXIgZSBpbiBlbmMpe1xuICAgICAgZW5jW2VdLnR5cGUgPSBjb25zdHMuZGF0YVR5cGVOYW1lc1tlbmNbZV0udHlwZV07XG4gICAgfVxuXG4gICAgc3BlYyA9IHtcbiAgICAgIG1hcmt0eXBlOiB0aGlzLl9tYXJrdHlwZSxcbiAgICAgIGVuYzogZW5jXG4gICAgfVxuXG4gICAgaWYoIWV4Y2x1ZGVDb25maWcpe1xuICAgICAgc3BlYy5jZmcgPSB1dGlsLmR1cGxpY2F0ZSh0aGlzLl9jZmcpXG4gICAgfVxuXG4gICAgcmV0dXJuIHNwZWM7XG4gIH07XG5cbiAgcHJvdG8udG9TaG9ydGhhbmQgPSBmdW5jdGlvbigpe1xuICAgIHZhciBlbmMgPSB0aGlzLl9lbmM7XG4gICAgcmV0dXJuIHRoaXMuX21hcmt0eXBlICsgXCIuXCIgKyB1dGlsLmtleXMoZW5jKS5tYXAoZnVuY3Rpb24oZSl7XG4gICAgICB2YXIgdiA9IGVuY1tlXTtcbiAgICAgICAgcmV0dXJuIGUgKyBcIi1cIiArXG4gICAgICAgICAgKHYuYWdnciA/IHYuYWdncitcIl9cIiA6IFwiXCIpICtcbiAgICAgICAgICAodi5mbiA/IHYuZm4rXCJfXCIgOiBcIlwiKSArXG4gICAgICAgICAgKHYuYmluID8gXCJiaW5fXCIgOiBcIlwiKSArXG4gICAgICAgICAgKHYubmFtZSB8fCBcIlwiKSArIFwiLVwiICtcbiAgICAgICAgICBjb25zdHMuZGF0YVR5cGVOYW1lc1t2LnR5cGVdO1xuICAgICAgfVxuICAgICkuam9pbihcIi5cIik7XG4gIH1cblxuICBFbmNvZGluZy5wYXJzZVNob3J0aGFuZCA9IGZ1bmN0aW9uKHNob3J0aGFuZCwgY2ZnKXtcbiAgICB2YXIgZW5jID0gc2hvcnRoYW5kLnNwbGl0KFwiLlwiKSxcbiAgICAgIG1hcmt0eXBlID0gZW5jLnNoaWZ0KCk7XG5cbiAgICBlbmMgPSBlbmMucmVkdWNlKGZ1bmN0aW9uKG0sIGUpe1xuICAgICAgdmFyIHNwbGl0ID0gZS5zcGxpdChcIi1cIiksXG4gICAgICAgIGVuY3R5cGUgPSBzcGxpdFswXSxcbiAgICAgICAgbyA9IHtuYW1lOiBzcGxpdFsxXSwgdHlwZTogY29uc3RzLmRhdGFUeXBlc1tzcGxpdFsyXV19O1xuXG4gICAgICAvLyBjaGVjayBhZ2dyZWdhdGUgdHlwZVxuICAgICAgZm9yKHZhciBpIGluIHNjaGVtYS5hZ2dyLmVudW0pe1xuICAgICAgICB2YXIgYSA9IHNjaGVtYS5hZ2dyLmVudW1baV07XG4gICAgICAgIGlmKG8ubmFtZS5pbmRleE9mKGErXCJfXCIpID09IDApe1xuICAgICAgICAgIG8ubmFtZSA9IG8ubmFtZS5zdWJzdHIoYS5sZW5ndGgrMSk7XG4gICAgICAgICAgaWYgKGE9PVwiY291bnRcIiAmJiBvLm5hbWUubGVuZ3RoID09PSAwKSBvLm5hbWUgPSBcIipcIjtcbiAgICAgICAgICBvLmFnZ3IgPSBhO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBjaGVjayB0aW1lIGZuXG4gICAgICBmb3IodmFyIGkgaW4gc2NoZW1hLnRpbWVmbnMpe1xuICAgICAgICB2YXIgZiA9IHNjaGVtYS50aW1lZm5zW2ldO1xuICAgICAgICBpZihvLm5hbWUgJiYgby5uYW1lLmluZGV4T2YoZitcIl9cIikgPT0gMCl7XG4gICAgICAgICAgby5uYW1lID0gby5uYW1lLnN1YnN0cihvLmxlbmd0aCsxKTtcbiAgICAgICAgICBvLmZuID0gZjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBiaW5cbiAgICAgIGlmKG8ubmFtZSAmJiBvLm5hbWUuaW5kZXhPZihcImJpbl9cIikgPT0gMCl7XG4gICAgICAgIG8ubmFtZSA9IG8ubmFtZS5zdWJzdHIoNCk7XG4gICAgICAgIG8uYmluID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgbVtlbmN0eXBlXSA9IG87XG4gICAgICByZXR1cm4gbTtcbiAgICB9LCB7fSk7XG5cbiAgICByZXR1cm4gbmV3IEVuY29kaW5nKG1hcmt0eXBlLCBlbmMsIGNmZyk7XG4gIH1cblxuICBFbmNvZGluZy5mcm9tU3BlYyA9IGZ1bmN0aW9uKHNwZWMsIGV4dHJhQ2ZnKSB7XG4gICAgdmFyIGVuYyA9IHV0aWwuZHVwbGljYXRlKHNwZWMuZW5jKTtcblxuICAgIC8vY29udmVydCB0eXBlIGZyb20gc3RyaW5nIHRvIGJpdGNvZGUgKGUuZywgTz0xKVxuICAgIGZvcih2YXIgZSBpbiBlbmMpe1xuICAgICAgZW5jW2VdLnR5cGUgPSBjb25zdHMuZGF0YVR5cGVzW2VuY1tlXS50eXBlXTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEVuY29kaW5nKHNwZWMubWFya3R5cGUsIGVuYywgdXRpbC5tZXJnZShzcGVjLmNmZywgZXh0cmFDZmcgfHwge30pKTtcbiAgfVxuXG4gIHJldHVybiBFbmNvZGluZztcblxufSkoKTtcbiIsInZhciBnbG9iYWxzID0gcmVxdWlyZSgnLi9nbG9iYWxzJyksXG4gIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxudmFyIGF4aXMgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5heGlzLm5hbWVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiB1dGlsLmtleXModXRpbC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24oYSwgeCkge1xuICAgIHZhciBzID0gcHJvcHNbeF0uc2NhbGU7XG4gICAgaWYgKHM9PT1YIHx8IHM9PT1ZKSBhW3Byb3BzW3hdLnNjYWxlXSA9IDE7XG4gICAgcmV0dXJuIGE7XG4gIH0sIHt9KSk7XG59XG5cbmF4aXMuZGVmcyA9IGZ1bmN0aW9uKG5hbWVzLCBlbmNvZGluZywgb3B0KSB7XG4gIHJldHVybiBuYW1lcy5yZWR1Y2UoZnVuY3Rpb24oYSwgbmFtZSkge1xuICAgIGEucHVzaChheGlzX2RlZihuYW1lLCBlbmNvZGluZywgb3B0KSk7XG4gICAgcmV0dXJuIGE7XG4gIH0sIFtdKTtcbn1cblxuZnVuY3Rpb24gYXhpc19kZWYobmFtZSwgZW5jb2RpbmcsIG9wdCl7XG4gIHZhciB0eXBlID0gbmFtZSwgYXhpcztcbiAgdmFyIGlzQ29sID0gbmFtZT09Q09MLCBpc1JvdyA9IG5hbWU9PVJPVztcbiAgaWYoaXNDb2wpIHR5cGUgPSBcInhcIjtcbiAgaWYoaXNSb3cpIHR5cGUgPSBcInlcIjtcblxuICB2YXIgYXhpcyA9IHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHNjYWxlOiBuYW1lLFxuICAgIHRpY2tzOiAzIC8vVE9ETyhrYW5pdHcpOiBiZXR0ZXIgZGV0ZXJtaW5lICMgb2YgdGlja3NcbiAgfTtcblxuICBpZiAoZW5jb2RpbmcuYXhpcyhuYW1lKS5ncmlkKSB7XG4gICAgYXhpcy5ncmlkID0gdHJ1ZTtcbiAgICBheGlzLmxheWVyID0gXCJiYWNrXCI7XG4gIH1cblxuICBpZiAoZW5jb2RpbmcuYXhpcyhuYW1lKS50aXRsZSkge1xuICAgIC8vc2hvdyB0aXRsZSBieSBkZWZhdWx0XG5cbiAgICBheGlzID0gYXhpc190aXRsZShheGlzLCBuYW1lLCBlbmNvZGluZywgb3B0KTtcbiAgfVxuXG4gIGlmKGlzUm93IHx8IGlzQ29sKXtcbiAgICBheGlzLnByb3BlcnRpZXMgPSB7XG4gICAgICB0aWNrczogeyBvcGFjaXR5OiB7dmFsdWU6IDB9IH0sXG4gICAgICBtYWpvclRpY2tzOiB7IG9wYWNpdHk6IHt2YWx1ZTogMH0gfSxcbiAgICAgIGF4aXM6IHsgb3BhY2l0eToge3ZhbHVlOiAwfSB9XG4gICAgfTtcbiAgfVxuICBpZihpc0NvbCl7XG4gICAgYXhpcy5vZmZzZXQgPSBbb3B0LnhBeGlzTWFyZ2luIHx8IDAsIGVuY29kaW5nLmNvbmZpZyhcInlBeGlzTWFyZ2luXCIpXTtcbiAgICBheGlzLm9yaWVudCA9IFwidG9wXCI7XG4gIH1cblxuICBpZiAobmFtZT09XCJ4XCIgJiYgKGVuY29kaW5nLmlzVHlwZShuYW1lLCBPKSB8fCBlbmNvZGluZy5iaW4obmFtZSkpKSB7XG4gICAgYXhpcy5wcm9wZXJ0aWVzID0ge1xuICAgICAgbGFiZWxzOiB7XG4gICAgICAgIGFuZ2xlOiB7dmFsdWU6IDI3MH0sXG4gICAgICAgIGFsaWduOiB7dmFsdWU6IFwicmlnaHRcIn0sXG4gICAgICAgIGJhc2VsaW5lOiB7dmFsdWU6IFwibWlkZGxlXCJ9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF4aXM7XG59XG5cbmZ1bmN0aW9uIGF4aXNfdGl0bGUoYXhpcywgbmFtZSwgZW5jb2RpbmcsIG9wdCl7XG4gIGF4aXMudGl0bGUgPSBlbmNvZGluZy5maWVsZFRpdGxlKG5hbWUpO1xuICBpZihuYW1lPT1ZKXtcbiAgICBheGlzLnRpdGxlT2Zmc2V0ID0gNjA7XG4gICAgLy8gVE9ETzogc2V0IGFwcHJvcHJpYXRlIHRpdGxlT2Zmc2V0XG4gICAgLy8gbWF5YmUgYmFzZWQgb24gc29tZSBzdHJpbmcgbGVuZ3RoIGZyb20gc3RhdHNcbiAgfVxuICByZXR1cm4gYXhpcztcbn1cbiIsInZhciBnbG9iYWxzID0gcmVxdWlyZSgnLi9nbG9iYWxzJyksXG4gIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKSxcbiAgYXhpcyA9IHJlcXVpcmUoJy4vYXhpcycpLFxuICBsZWdlbmRzID0gcmVxdWlyZSgnLi9sZWdlbmRzJyksXG4gIG1hcmtzID0gcmVxdWlyZSgnLi9tYXJrcycpLFxuICBzY2FsZSA9IHJlcXVpcmUoJy4vc2NhbGUnKTtcblxudmFyIGNvbXBpbGUgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVuY29kaW5nLCBzdGF0cykge1xuICB2YXIgc2l6ZSA9IHNldFNpemUoZW5jb2RpbmcsIHN0YXRzKSxcbiAgICBjZWxsV2lkdGggPSBzaXplLmNlbGxXaWR0aCxcbiAgICBjZWxsSGVpZ2h0ID0gc2l6ZS5jZWxsSGVpZ2h0O1xuXG4gIHZhciBoYXNBZ2cgPSBlbmNvZGluZy5hbnkoZnVuY3Rpb24odiwgayl7XG4gICAgcmV0dXJuIHYuYWdnciAhPT0gdW5kZWZpbmVkO1xuICB9KTtcblxuICB2YXIgc3BlYyA9IHRlbXBsYXRlKGVuY29kaW5nLCBzaXplLCBzdGF0cyksXG4gICAgZ3JvdXAgPSBzcGVjLm1hcmtzWzBdLFxuICAgIG1hcmsgPSBtYXJrc1tlbmNvZGluZy5tYXJrdHlwZSgpXSxcbiAgICBtZGVmID0gbWFya2RlZihtYXJrLCBlbmNvZGluZywge1xuICAgICAgaGFzQWdncmVnYXRlOiBoYXNBZ2dcbiAgICB9KTtcblxuICB2YXIgaGFzUm93ID0gZW5jb2RpbmcuaGFzKFJPVyksIGhhc0NvbCA9IGVuY29kaW5nLmhhcyhDT0wpO1xuXG4gIHZhciBwcmVhZ2dyZWdhdGVkRGF0YSA9IGVuY29kaW5nLmNvbmZpZyhcInVzZVZlZ2FTZXJ2ZXJcIik7XG5cbiAgZ3JvdXAubWFya3MucHVzaChtZGVmKTtcbiAgLy8gVE9ETzogcmV0dXJuIHZhbHVlIG5vdCB1c2VkXG4gIGJpbm5pbmcoc3BlYy5kYXRhWzBdLCBlbmNvZGluZywge3ByZWFnZ3JlZ2F0ZWREYXRhOiBwcmVhZ2dyZWdhdGVkRGF0YX0pO1xuXG4gIHZhciBsaW5lVHlwZSA9IG1hcmtzW2VuY29kaW5nLm1hcmt0eXBlKCldLmxpbmU7XG5cbiAgaWYoIXByZWFnZ3JlZ2F0ZWREYXRhKXtcbiAgICBlbmNvZGluZy5mb3JFYWNoKGZ1bmN0aW9uKGVuY1R5cGUsIGZpZWxkKXtcbiAgICAgIGlmKGZpZWxkLnR5cGUgPT09IFQgJiYgZmllbGQuZm4pe1xuICAgICAgICB0aW1lVHJhbnNmb3JtKHNwZWMuZGF0YVswXSwgZW5jb2RpbmcsIGVuY1R5cGUsIGZpZWxkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIGhhbmRsZSBzdWJmYWNldHNcbiAgdmFyIGFnZ1Jlc3VsdCA9IGFnZ3JlZ2F0ZXMoc3BlYy5kYXRhWzBdLCBlbmNvZGluZywge3ByZWFnZ3JlZ2F0ZWREYXRhOiBwcmVhZ2dyZWdhdGVkRGF0YX0pLFxuICAgIGRldGFpbHMgPSBhZ2dSZXN1bHQuZGV0YWlscyxcbiAgICBoYXNEZXRhaWxzID0gZGV0YWlscyAmJiBkZXRhaWxzLmxlbmd0aCA+IDAsXG4gICAgc3RhY2sgPSBoYXNEZXRhaWxzICYmIHN0YWNraW5nKHNwZWMsIGVuY29kaW5nLCBtZGVmLCBhZ2dSZXN1bHQuZmFjZXRzKTtcblxuICBpZiAoaGFzRGV0YWlscyAmJiAoc3RhY2sgfHwgbGluZVR5cGUpKSB7XG4gICAgLy9zdWJmYWNldCB0byBncm91cCBzdGFjayAvIGxpbmUgdG9nZXRoZXIgaW4gb25lIGdyb3VwXG4gICAgc3ViZmFjZXQoZ3JvdXAsIG1kZWYsIGRldGFpbHMsIHN0YWNrLCBlbmNvZGluZyk7XG4gIH1cblxuICAvLyBhdXRvLXNvcnQgbGluZS9hcmVhIHZhbHVlc1xuICAvL1RPRE8oa2FuaXR3KTogaGF2ZSBzb21lIGNvbmZpZyB0byB0dXJuIG9mZiBhdXRvLXNvcnQgZm9yIGxpbmUgKGZvciBsaW5lIGNoYXJ0IHRoYXQgZW5jb2RlcyB0ZW1wb3JhbCBpbmZvcm1hdGlvbilcbiAgaWYgKGxpbmVUeXBlKSB7XG4gICAgdmFyIGYgPSAoZW5jb2RpbmcuaXNUeXBlKFgsIFEgfCBUKSAmJiBlbmNvZGluZy5pc1R5cGUoWSwgTykpID8gWSA6IFg7XG4gICAgaWYgKCFtZGVmLmZyb20pIG1kZWYuZnJvbSA9IHt9O1xuICAgIG1kZWYuZnJvbS50cmFuc2Zvcm0gPSBbe3R5cGU6IFwic29ydFwiLCBieTogZW5jb2RpbmcuZmllbGQoZil9XTtcbiAgfVxuXG4gIC8vIFNtYWxsIE11bHRpcGxlc1xuICBpZiAoaGFzUm93IHx8IGhhc0NvbCkge1xuICAgIHNwZWMgPSBmYWNldChncm91cCwgZW5jb2RpbmcsIGNlbGxIZWlnaHQsIGNlbGxXaWR0aCwgc3BlYywgbWRlZiwgc3RhY2ssIHN0YXRzKTtcbiAgfSBlbHNlIHtcbiAgICBncm91cC5zY2FsZXMgPSBzY2FsZS5kZWZzKHNjYWxlLm5hbWVzKG1kZWYucHJvcGVydGllcy51cGRhdGUpLCBlbmNvZGluZyxcbiAgICAgIHtzdGFjazogc3RhY2ssIHN0YXRzOiBzdGF0c30pO1xuICAgIGdyb3VwLmF4ZXMgPSBheGlzLmRlZnMoYXhpcy5uYW1lcyhtZGVmLnByb3BlcnRpZXMudXBkYXRlKSwgZW5jb2RpbmcpO1xuICAgIGdyb3VwLmxlZ2VuZHMgPSBsZWdlbmRzLmRlZnMoZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBzcGVjO1xufTtcblxuZnVuY3Rpb24gZ2V0Q2FyZGluYWxpdHkoZW5jb2RpbmcsIGVuY1R5cGUsIHN0YXRzKXtcbiAgdmFyIGZpZWxkID0gZW5jb2RpbmcuZmllbGROYW1lKGVuY1R5cGUpO1xuICBpZiAoZW5jb2RpbmcuYmluKGVuY1R5cGUpKSB7XG4gICAgdmFyIGJpbnMgPSB1dGlsLmdldGJpbnMoc3RhdHNbZmllbGRdKTtcbiAgICByZXR1cm4gKGJpbnMuc3RvcCAtIGJpbnMuc3RhcnQpIC8gYmlucy5zdGVwO1xuICB9XG4gIHJldHVybiBzdGF0c1tmaWVsZF0uY2FyZGluYWxpdHk7XG59XG5cbmZ1bmN0aW9uIHNldFNpemUoZW5jb2RpbmcsIHN0YXRzKSB7XG4gIHZhciBoYXNSb3cgPSBlbmNvZGluZy5oYXMoUk9XKSxcbiAgICAgIGhhc0NvbCA9IGVuY29kaW5nLmhhcyhDT0wpLFxuICAgICAgaGFzWCA9IGVuY29kaW5nLmhhcyhYKSxcbiAgICAgIGhhc1kgPSBlbmNvZGluZy5oYXMoWSk7XG5cbiAgLy8gSEFDSyB0byBzZXQgY2hhcnQgc2l6ZVxuICAvLyBOT1RFOiB0aGlzIGZhaWxzIGZvciBwbG90cyBkcml2ZW4gYnkgZGVyaXZlZCB2YWx1ZXMgKGUuZy4sIGFnZ3JlZ2F0ZXMpXG4gIC8vIE9uZSBzb2x1dGlvbiBpcyB0byB1cGRhdGUgVmVnYSB0byBzdXBwb3J0IGF1dG8tc2l6aW5nXG4gIC8vIEluIHRoZSBtZWFudGltZSwgYXV0by1wYWRkaW5nIChtb3N0bHkpIGRvZXMgdGhlIHRyaWNrXG4gIC8vXG4gIHZhciBjb2xDYXJkaW5hbGl0eSA9IGhhc0NvbCA/IGdldENhcmRpbmFsaXR5KGVuY29kaW5nLCBDT0wsIHN0YXRzKSA6IDEsXG4gICAgcm93Q2FyZGluYWxpdHkgPSBoYXNSb3cgPyBnZXRDYXJkaW5hbGl0eShlbmNvZGluZywgUk9XLCBzdGF0cykgOiAxO1xuXG4gIHZhciBjZWxsV2lkdGggPSBoYXNYID9cbiAgICAgICtlbmNvZGluZy5jb25maWcoXCJjZWxsV2lkdGhcIikgfHwgZW5jb2RpbmcuY29uZmlnKFwid2lkdGhcIikgKiAxLjAgLyBjb2xDYXJkaW5hbGl0eSA6XG4gICAgICBlbmNvZGluZy5tYXJrdHlwZSgpID09PSBcInRleHRcIiA/XG4gICAgICAgICtlbmNvZGluZy5jb25maWcoXCJ0ZXh0Q2VsbFdpZHRoXCIpIDpcbiAgICAgICAgK2VuY29kaW5nLmNvbmZpZyhcImJhbmRTaXplXCIpLFxuICAgIGNlbGxIZWlnaHQgPSBoYXNZID9cbiAgICAgICtlbmNvZGluZy5jb25maWcoXCJjZWxsSGVpZ2h0XCIpIHx8IGVuY29kaW5nLmNvbmZpZyhcImhlaWdodFwiKSAqIDEuMCAvIHJvd0NhcmRpbmFsaXR5IDpcbiAgICAgICtlbmNvZGluZy5jb25maWcoXCJiYW5kU2l6ZVwiKSxcbiAgICBjZWxsUGFkZGluZyA9IGVuY29kaW5nLmNvbmZpZyhcImNlbGxQYWRkaW5nXCIpLFxuICAgIGJhbmRQYWRkaW5nID0gZW5jb2RpbmcuY29uZmlnKFwiYmFuZFBhZGRpbmdcIiksXG4gICAgd2lkdGggPSBlbmNvZGluZy5jb25maWcoXCJfbWluV2lkdGhcIiksXG4gICAgaGVpZ2h0ID0gZW5jb2RpbmcuY29uZmlnKFwiX21pbkhlaWdodFwiKTtcblxuICBpZiAoaGFzWCAmJiAoZW5jb2RpbmcuaXNUeXBlKFgsIE8pIHx8IGVuY29kaW5nLmJpbihYKSkpIHsgLy9vcmRpbmFsIGZpZWxkIHdpbGwgb3ZlcnJpZGUgcGFyZW50XG4gICAgLy8gYmFuZHMgd2l0aGluIGNlbGwgdXNlIHJhbmdlUG9pbnRzKClcbiAgICB2YXIgeENhcmRpbmFsaXR5ID0gZ2V0Q2FyZGluYWxpdHkoZW5jb2RpbmcsIFgsIHN0YXRzKTtcbiAgICBjZWxsV2lkdGggPSAoeENhcmRpbmFsaXR5ICsgYmFuZFBhZGRpbmcpICogK2VuY29kaW5nLmNvbmZpZyhcImJhbmRTaXplXCIpO1xuICB9XG4gIC8vIENlbGwgYmFuZHMgdXNlIHJhbmdlQmFuZHMoKS4gVGhlcmUgYXJlIG4tMSBwYWRkaW5nLiAgT3V0ZXJwYWRkaW5nID0gMCBmb3IgY2VsbHNcbiAgd2lkdGggPSBjZWxsV2lkdGggKiAoKDEgKyBjZWxsUGFkZGluZykgKiAoY29sQ2FyZGluYWxpdHktMSkgKyAxKTtcblxuICBpZiAoaGFzWSAmJiAoZW5jb2RpbmcuaXNUeXBlKFksIE8pIHx8IGVuY29kaW5nLmJpbihZKSkpIHtcbiAgICAvLyBiYW5kcyB3aXRoaW4gY2VsbCB1c2UgcmFuZ2VQb2ludCgpXG4gICAgdmFyIHlDYXJkaW5hbGl0eSA9IGdldENhcmRpbmFsaXR5KGVuY29kaW5nLCBZLCBzdGF0cyk7XG4gICAgY2VsbEhlaWdodCA9ICh5Q2FyZGluYWxpdHkgKyBiYW5kUGFkZGluZykgKiArZW5jb2RpbmcuY29uZmlnKFwiYmFuZFNpemVcIik7XG4gIH1cbiAgLy8gQ2VsbCBiYW5kcyB1c2UgcmFuZ2VCYW5kcygpLiBUaGVyZSBhcmUgbi0xIHBhZGRpbmcuICBPdXRlcnBhZGRpbmcgPSAwIGZvciBjZWxsc1xuICBoZWlnaHQgPSBjZWxsSGVpZ2h0ICogKCgxICsgY2VsbFBhZGRpbmcpICogKHJvd0NhcmRpbmFsaXR5LTEpICsgMSk7XG5cbiAgcmV0dXJuIHtcbiAgICBjZWxsV2lkdGg6IGNlbGxXaWR0aCxcbiAgICBjZWxsSGVpZ2h0OiBjZWxsSGVpZ2h0LFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6aGVpZ2h0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZhY2V0KGdyb3VwLCBlbmNvZGluZywgY2VsbEhlaWdodCwgY2VsbFdpZHRoLCBzcGVjLCBtZGVmLCBzdGFjaywgc3RhdHMpIHtcbiAgICB2YXIgZW50ZXIgPSBncm91cC5wcm9wZXJ0aWVzLmVudGVyO1xuICAgIHZhciBmYWNldEtleXMgPSBbXSwgY2VsbEF4ZXMgPSBbXTtcblxuICAgIHZhciBoYXNSb3cgPSBlbmNvZGluZy5oYXMoUk9XKSwgaGFzQ29sID0gZW5jb2RpbmcuaGFzKENPTCk7XG5cbiAgICB2YXIgeEF4aXNNYXJnaW4gPSBlbmNvZGluZy5oYXMoWSkgPyBlbmNvZGluZy5jb25maWcoXCJ4QXhpc01hcmdpblwiKSA6IHVuZGVmaW5lZDtcblxuICAgIGVudGVyLmZpbGwgPSB7dmFsdWU6IGVuY29kaW5nLmNvbmZpZyhcImNlbGxCYWNrZ3JvdW5kQ29sb3JcIil9O1xuXG4gICAgLy9tb3ZlIFwiZnJvbVwiIHRvIGNlbGwgbGV2ZWwgYW5kIGFkZCBmYWNldCB0cmFuc2Zvcm1cbiAgICBncm91cC5mcm9tID0ge2RhdGE6IGdyb3VwLm1hcmtzWzBdLmZyb20uZGF0YX07XG5cbiAgICBpZiAoZ3JvdXAubWFya3NbMF0uZnJvbS50cmFuc2Zvcm0pIHtcbiAgICAgIGRlbGV0ZSBncm91cC5tYXJrc1swXS5mcm9tLmRhdGE7IC8vbmVlZCB0byBrZWVwIHRyYW5zZm9ybSBmb3Igc3ViZmFjZXR0aW5nIGNhc2VcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGdyb3VwLm1hcmtzWzBdLmZyb207XG4gICAgfVxuICAgIGlmIChoYXNSb3cpIHtcbiAgICAgIGlmICghZW5jb2RpbmcuaXNUeXBlKFJPVywgTykpIHtcbiAgICAgICAgdXRpbC5lcnJvcihcIlJvdyBlbmNvZGluZyBzaG91bGQgYmUgb3JkaW5hbC5cIik7XG4gICAgICB9XG4gICAgICBlbnRlci55ID0ge3NjYWxlOiBST1csIGZpZWxkOiBcImtleXMuXCIgKyBmYWNldEtleXMubGVuZ3RofTtcbiAgICAgIGVudGVyLmhlaWdodCA9IHtcInZhbHVlXCI6IGNlbGxIZWlnaHR9OyAvLyBIQUNLXG5cbiAgICAgIGZhY2V0S2V5cy5wdXNoKGVuY29kaW5nLmZpZWxkKFJPVykpO1xuXG4gICAgICB2YXIgZnJvbTtcbiAgICAgIGlmIChoYXNDb2wpIHtcbiAgICAgICAgZnJvbSA9IHV0aWwuZHVwbGljYXRlKGdyb3VwLmZyb20pO1xuICAgICAgICBmcm9tLnRyYW5zZm9ybSA9IGZyb20udHJhbnNmb3JtIHx8IFtdO1xuICAgICAgICBmcm9tLnRyYW5zZm9ybS51bnNoaWZ0KHt0eXBlOiBcImZhY2V0XCIsIGtleXM6IFtlbmNvZGluZy5maWVsZChDT0wpXX0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXhlc0dycCA9IGdyb3VwZGVmKFwieC1heGVzXCIsIHtcbiAgICAgICAgICBheGVzOiBlbmNvZGluZy5oYXMoWCkgPyAgYXhpcy5kZWZzKFtcInhcIl0sIGVuY29kaW5nKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICB4OiBoYXNDb2wgPyB7c2NhbGU6IENPTCwgZmllbGQ6IFwia2V5cy4wXCIsIG9mZnNldDogeEF4aXNNYXJnaW59IDoge3ZhbHVlOiB4QXhpc01hcmdpbn0sXG4gICAgICAgICAgd2lkdGg6IGhhc0NvbCAmJiB7XCJ2YWx1ZVwiOiBjZWxsV2lkdGh9LCAvL0hBQ0s/XG4gICAgICAgICAgZnJvbTogZnJvbVxuICAgICAgICB9KTtcblxuICAgICAgc3BlYy5tYXJrcy5wdXNoKGF4ZXNHcnApO1xuICAgICAgKHNwZWMuYXhlcyA9IHNwZWMuYXhlcyB8fCBbXSk7XG4gICAgICBzcGVjLmF4ZXMucHVzaC5hcHBseShzcGVjLmF4ZXMsIGF4aXMuZGVmcyhbXCJyb3dcIl0sIGVuY29kaW5nKSk7XG4gICAgfSBlbHNlIHsgLy8gZG9lc24ndCBoYXZlIHJvd1xuICAgICAgaWYoZW5jb2RpbmcuaGFzKFgpKXtcbiAgICAgICAgLy9rZWVwIHggYXhpcyBpbiB0aGUgY2VsbFxuICAgICAgICBjZWxsQXhlcy5wdXNoLmFwcGx5KGNlbGxBeGVzLCBheGlzLmRlZnMoW1wieFwiXSwgZW5jb2RpbmcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaGFzQ29sKSB7XG4gICAgICBpZiAoIWVuY29kaW5nLmlzVHlwZShDT0wsIE8pKSB7XG4gICAgICAgIHV0aWwuZXJyb3IoXCJDb2wgZW5jb2Rpbmcgc2hvdWxkIGJlIG9yZGluYWwuXCIpO1xuICAgICAgfVxuICAgICAgZW50ZXIueCA9IHtzY2FsZTogQ09MLCBmaWVsZDogXCJrZXlzLlwiICsgZmFjZXRLZXlzLmxlbmd0aH07XG4gICAgICBlbnRlci53aWR0aCA9IHtcInZhbHVlXCI6IGNlbGxXaWR0aH07IC8vIEhBQ0tcblxuICAgICAgZmFjZXRLZXlzLnB1c2goZW5jb2RpbmcuZmllbGQoQ09MKSk7XG5cbiAgICAgIHZhciBmcm9tO1xuICAgICAgaWYgKGhhc1Jvdykge1xuICAgICAgICBmcm9tID0gdXRpbC5kdXBsaWNhdGUoZ3JvdXAuZnJvbSk7XG4gICAgICAgIGZyb20udHJhbnNmb3JtID0gZnJvbS50cmFuc2Zvcm0gfHwgW107XG4gICAgICAgIGZyb20udHJhbnNmb3JtLnVuc2hpZnQoe3R5cGU6IFwiZmFjZXRcIiwga2V5czogW2VuY29kaW5nLmZpZWxkKFJPVyldfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBheGVzR3JwID0gZ3JvdXBkZWYoXCJ5LWF4ZXNcIiwge1xuICAgICAgICBheGVzOiBlbmNvZGluZy5oYXMoWSkgPyBheGlzLmRlZnMoW1wieVwiXSwgZW5jb2RpbmcpIDogdW5kZWZpbmVkLFxuICAgICAgICB5OiBoYXNSb3cgJiYge3NjYWxlOiBST1csIGZpZWxkOiBcImtleXMuMFwifSxcbiAgICAgICAgeDogaGFzUm93ICYmIHt2YWx1ZTogeEF4aXNNYXJnaW59LFxuICAgICAgICBoZWlnaHQ6IGhhc1JvdyAmJiB7XCJ2YWx1ZVwiOiBjZWxsSGVpZ2h0fSwgLy9IQUNLP1xuICAgICAgICBmcm9tOiBmcm9tXG4gICAgICB9KTtcblxuICAgICAgc3BlYy5tYXJrcy5wdXNoKGF4ZXNHcnApO1xuICAgICAgKHNwZWMuYXhlcyA9IHNwZWMuYXhlcyB8fCBbXSlcbiAgICAgIHNwZWMuYXhlcy5wdXNoLmFwcGx5KHNwZWMuYXhlcywgYXhpcy5kZWZzKFtcImNvbFwiXSwgZW5jb2RpbmcsIHtcbiAgICAgICAgeEF4aXNNYXJnaW46IHhBeGlzTWFyZ2luXG4gICAgICB9KSk7XG4gICAgfSBlbHNlIHsgLy8gZG9lc24ndCBoYXZlIGNvbFxuICAgICAgaWYoZW5jb2RpbmcuaGFzKFkpKXtcbiAgICAgICAgY2VsbEF4ZXMucHVzaC5hcHBseShjZWxsQXhlcywgYXhpcy5kZWZzKFtcInlcIl0sIGVuY29kaW5nKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoaGFzUm93KXtcbiAgICAgIGlmKGVudGVyLngpIGVudGVyLngub2Zmc2V0PSB4QXhpc01hcmdpbjtcbiAgICAgIGVsc2UgZW50ZXIueCA9IHt2YWx1ZTogeEF4aXNNYXJnaW59O1xuICAgIH1cbiAgICBpZihoYXNDb2wpe1xuICAgICAgLy9UT0RPIGZpbGwgaGVyZS4uXG4gICAgfVxuXG4gICAgLy8gYXNzdW1pbmcgZXF1YWwgY2VsbFdpZHRoIGhlcmVcbiAgICAvLyBUT0RPOiBzdXBwb3J0IGhldGVyb2dlbm91cyBjZWxsV2lkdGggKG1heWJlIGJ5IHVzaW5nIG11bHRpcGxlIHNjYWxlcz8pXG4gICAgc3BlYy5zY2FsZXMgPSAoc3BlYy5zY2FsZXMgfHxbXSkuY29uY2F0KHNjYWxlLmRlZnMoXG4gICAgICBzY2FsZS5uYW1lcyhlbnRlcikuY29uY2F0KHNjYWxlLm5hbWVzKG1kZWYucHJvcGVydGllcy51cGRhdGUpKSxcbiAgICAgIGVuY29kaW5nLFxuICAgICAge2NlbGxXaWR0aDogY2VsbFdpZHRoLCBjZWxsSGVpZ2h0OiBjZWxsSGVpZ2h0LCBzdGFjazogc3RhY2ssIGZhY2V0OnRydWUsIHN0YXRzOiBzdGF0c31cbiAgICApKTsgLy8gcm93L2NvbCBzY2FsZXMgKyBjZWxsIHNjYWxlc1xuXG4gICAgaWYgKGNlbGxBeGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGdyb3VwLmF4ZXMgPSBjZWxsQXhlcztcbiAgICB9XG5cbiAgICAvLyBhZGQgZmFjZXQgdHJhbnNmb3JtXG4gICAgdmFyIHRyYW5zID0gKGdyb3VwLmZyb20udHJhbnNmb3JtIHx8IChncm91cC5mcm9tLnRyYW5zZm9ybSA9IFtdKSk7XG4gICAgdHJhbnMudW5zaGlmdCh7dHlwZTogXCJmYWNldFwiLCBrZXlzOiBmYWNldEtleXN9KTtcblxuICByZXR1cm4gc3BlYztcbiAgfVxuXG5mdW5jdGlvbiBzdWJmYWNldChncm91cCwgbWRlZiwgZGV0YWlscywgc3RhY2ssIGVuY29kaW5nKSB7XG4gIHZhciBtID0gZ3JvdXAubWFya3MsXG4gICAgZyA9IGdyb3VwZGVmKFwic3ViZmFjZXRcIiwge21hcmtzOiBtfSk7XG5cbiAgZ3JvdXAubWFya3MgPSBbZ107XG4gIGcuZnJvbSA9IG1kZWYuZnJvbTtcbiAgZGVsZXRlIG1kZWYuZnJvbTtcblxuICAvL1RPRE8gdGVzdCBMT0QgLS0gd2Ugc2hvdWxkIHN1cHBvcnQgc3RhY2sgLyBsaW5lIHdpdGhvdXQgY29sb3IgKExPRCkgZmllbGRcbiAgdmFyIHRyYW5zID0gKGcuZnJvbS50cmFuc2Zvcm0gfHwgKGcuZnJvbS50cmFuc2Zvcm0gPSBbXSkpO1xuICB0cmFucy51bnNoaWZ0KHt0eXBlOiBcImZhY2V0XCIsIGtleXM6IGRldGFpbHN9KTtcblxuICBpZiAoc3RhY2sgJiYgZW5jb2RpbmcuaGFzKENPTE9SKSkge1xuICAgIHRyYW5zLnVuc2hpZnQoe3R5cGU6IFwic29ydFwiLCBieTogZW5jb2RpbmcuZmllbGQoQ09MT1IpfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZUZuKGZuKXtcbiAgc3dpdGNoKGZuKXtcbiAgICBjYXNlIFwic2Vjb25kXCI6IHJldHVybiBcImdldFVUQ1NlY29uZHNcIjtcbiAgICBjYXNlIFwibWludXRlXCI6IHJldHVybiBcImdldFVUQ01pbnV0ZXNcIjtcbiAgICBjYXNlIFwiaG91clwiOiByZXR1cm4gXCJnZXRVVENIb3Vyc1wiO1xuICAgIGNhc2UgXCJkYXlcIjogcmV0dXJuIFwiZ2V0VVRDRGF5XCI7XG4gICAgY2FzZSBcImRhdGVcIjogcmV0dXJuIFwiZ2V0VVRDRGF0ZVwiO1xuICAgIGNhc2UgXCJtb250aFwiOiByZXR1cm4gXCJnZXRVVENNb250aFwiO1xuICAgIGNhc2UgXCJ5ZWFyXCI6IHJldHVybiBcImdldFVUQ0Z1bGxZZWFyXCI7XG4gIH1cbiAgY29uc29sZS5lcnJvcihcIm5vIGZ1bmN0aW9uIHNwZWNpZmllZCBmb3IgZGF0ZVwiKTtcbn1cblxuZnVuY3Rpb24gdGltZVRyYW5zZm9ybShzcGVjLCBlbmNvZGluZywgZW5jVHlwZSwgZmllbGQpe1xuICB2YXIgZnVuYyA9IGdldFRpbWVGbihmaWVsZC5mbik7XG5cbiAgc3BlYy50cmFuc2Zvcm0gPSBzcGVjLnRyYW5zZm9ybSB8fCBbXTtcbiAgc3BlYy50cmFuc2Zvcm0ucHVzaCh7XG4gICAgdHlwZTogXCJmb3JtdWxhXCIsXG4gICAgZmllbGQ6IGVuY29kaW5nLmZpZWxkKGVuY1R5cGUpLFxuICAgIGV4cHI6IFwibmV3IERhdGUoZC5kYXRhLlwiK2ZpZWxkLm5hbWUrXCIpLlwiK2Z1bmMrXCIoKVwiXG4gIH0pO1xuICByZXR1cm4gc3BlYztcbn1cblxuZnVuY3Rpb24gYmlubmluZyhzcGVjLCBlbmNvZGluZywgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcbiAgdmFyIGJpbnMgPSB7fTtcbiAgZW5jb2RpbmcuZm9yRWFjaChmdW5jdGlvbih2diwgZCkge1xuICAgIGlmIChkLmJpbikgYmluc1tkLm5hbWVdID0gZC5uYW1lO1xuICB9KTtcbiAgYmlucyA9IHV0aWwua2V5cyhiaW5zKTtcblxuICBpZiAoYmlucy5sZW5ndGggPT09IDAgfHwgb3B0LnByZWFnZ3JlZ2F0ZWREYXRhKSByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKCFzcGVjLnRyYW5zZm9ybSkgc3BlYy50cmFuc2Zvcm0gPSBbXTtcbiAgYmlucy5mb3JFYWNoKGZ1bmN0aW9uKGQpIHtcbiAgICBzcGVjLnRyYW5zZm9ybS5wdXNoKHtcbiAgICAgIHR5cGU6IFwiYmluXCIsXG4gICAgICBmaWVsZDogXCJkYXRhLlwiICsgZCxcbiAgICAgIG91dHB1dDogXCJkYXRhLmJpbl9cIiArIGQsXG4gICAgICBtYXhiaW5zOiBNQVhfQklOU1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGJpbnM7XG59XG5cbmZ1bmN0aW9uIGFnZ3JlZ2F0ZXMoc3BlYywgZW5jb2RpbmcsIG9wdCkge1xuICBvcHQgPSBvcHQgfHwge307XG4gIHZhciBkaW1zID0ge30sIG1lYXMgPSB7fSwgZGV0YWlsID0ge30sIGZhY2V0cz17fTtcbiAgZW5jb2RpbmcuZm9yRWFjaChmdW5jdGlvbihlbmNUeXBlLCBmaWVsZCkge1xuICAgIGlmIChmaWVsZC5hZ2dyKSB7XG4gICAgICBpZihmaWVsZC5hZ2dyPT09XCJjb3VudFwiKXtcbiAgICAgICAgbWVhc1tcImNvdW50XCJdID0ge29wOlwiY291bnRcIiwgZmllbGQ6XCIqXCJ9O1xuICAgICAgfWVsc2V7XG4gICAgICAgIG1lYXNbZmllbGQuYWdncitcInxcIitmaWVsZC5uYW1lXSA9IHtcbiAgICAgICAgICBvcDpmaWVsZC5hZ2dyLFxuICAgICAgICAgIGZpZWxkOlwiZGF0YS5cIitmaWVsZC5uYW1lXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpbXNbZmllbGQubmFtZV0gPSBlbmNvZGluZy5maWVsZChlbmNUeXBlKTtcbiAgICAgIGlmIChlbmNUeXBlPT1ST1cgfHwgZW5jVHlwZSA9PSBDT0wpe1xuICAgICAgICBmYWNldHNbZmllbGQubmFtZV0gPSBkaW1zW2ZpZWxkLm5hbWVdO1xuICAgICAgfWVsc2UgaWYgKGVuY1R5cGUgIT09IFggJiYgZW5jVHlwZSAhPT0gWSkge1xuICAgICAgICBkZXRhaWxbZmllbGQubmFtZV0gPSBkaW1zW2ZpZWxkLm5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGRpbXMgPSB1dGlsLnZhbHMoZGltcyk7XG4gIG1lYXMgPSB1dGlsLnZhbHMobWVhcyk7XG5cbiAgaWYgKG1lYXMubGVuZ3RoID4gMCAmJiAhb3B0LnByZWFnZ3JlZ2F0ZWREYXRhKSB7XG4gICAgaWYgKCFzcGVjLnRyYW5zZm9ybSkgc3BlYy50cmFuc2Zvcm0gPSBbXTtcbiAgICBzcGVjLnRyYW5zZm9ybS5wdXNoKHtcbiAgICAgIHR5cGU6IFwiYWdncmVnYXRlXCIsXG4gICAgICBncm91cGJ5OiBkaW1zLFxuICAgICAgZmllbGRzOiBtZWFzXG4gICAgfSk7XG5cbiAgICBpZiAoZW5jb2RpbmcubWFya3R5cGUoKSA9PT0gVEVYVCkge1xuICAgICAgbWVhcy5mb3JFYWNoKCBmdW5jdGlvbiAobSkge1xuICAgICAgICB2YXIgZmllbGROYW1lID0gbS5maWVsZC5zdWJzdHIoNSksIC8vcmVtb3ZlIFwiZGF0YS5cIlxuICAgICAgICAgIGZpZWxkID0gXCJkYXRhLlwiICsgKG0ub3AgPyBtLm9wICsgXCJfXCIgOiBcIlwiKSArIGZpZWxkTmFtZTtcbiAgICAgICAgc3BlYy50cmFuc2Zvcm0ucHVzaCh7XG4gICAgICAgICAgdHlwZTogXCJmb3JtdWxhXCIsXG4gICAgICAgICAgZmllbGQ6IGZpZWxkLFxuICAgICAgICAgIGV4cHI6IFwiZDMuZm9ybWF0KCcuMmYnKShkLlwiK2ZpZWxkK1wiKVwiXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgZGV0YWlsczogdXRpbC52YWxzKGRldGFpbCksXG4gICAgZGltczogZGltcyxcbiAgICBmYWNldHM6IHV0aWwudmFscyhmYWNldHMpLFxuICAgIGFnZ3JlZ2F0ZWQ6IG1lYXMubGVuZ3RoID4gMFxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YWNraW5nKHNwZWMsIGVuY29kaW5nLCBtZGVmLCBmYWNldHMpIHtcbiAgaWYgKCFtYXJrc1tlbmNvZGluZy5tYXJrdHlwZSgpXS5zdGFjaykgcmV0dXJuIGZhbHNlO1xuICBpZiAoIWVuY29kaW5nLmhhcyhDT0xPUikpIHJldHVybiBmYWxzZTtcblxuICB2YXIgZGltID0gWCwgdmFsID0gWSwgaWR4ID0gMTtcbiAgaWYgKGVuY29kaW5nLmlzVHlwZShYLFF8VCkgJiYgIWVuY29kaW5nLmlzVHlwZShZLFF8VCkgJiYgZW5jb2RpbmcuaGFzKFkpKSB7XG4gICAgZGltID0gWTtcbiAgICB2YWwgPSBYO1xuICAgIGlkeCA9IDA7XG4gIH1cblxuICAvLyBhZGQgdHJhbnNmb3JtIHRvIGNvbXB1dGUgc3VtcyBmb3Igc2NhbGVcbiAgdmFyIHN0YWNrZWQgPSB7XG4gICAgbmFtZTogU1RBQ0tFRCxcbiAgICBzb3VyY2U6IFRBQkxFLFxuICAgIHRyYW5zZm9ybTogW3tcbiAgICAgIHR5cGU6IFwiYWdncmVnYXRlXCIsXG4gICAgICBncm91cGJ5OiBbZW5jb2RpbmcuZmllbGQoZGltKV0uY29uY2F0KGZhY2V0cyksIC8vIGRpbSBhbmQgb3RoZXIgZmFjZXRzXG4gICAgICBmaWVsZHM6IFt7b3A6IFwic3VtXCIsIGZpZWxkOiBlbmNvZGluZy5maWVsZCh2YWwpfV0gLy8gVE9ETyBjaGVjayBpZiBmaWVsZCB3aXRoIGFnZ3IgaXMgY29ycmVjdD9cbiAgICB9XVxuICB9O1xuXG4gIGlmKGZhY2V0cyAmJiBmYWNldHMubGVuZ3RoID4gMCl7XG4gICAgc3RhY2tlZC50cmFuc2Zvcm0ucHVzaCh7IC8vY2FsY3VsYXRlIG1heCBmb3IgZWFjaCBmYWNldFxuICAgICAgdHlwZTogXCJhZ2dyZWdhdGVcIixcbiAgICAgIGdyb3VwYnk6IGZhY2V0cyxcbiAgICAgIGZpZWxkczogW3tvcDogXCJtYXhcIiwgZmllbGQ6IFwiZGF0YS5zdW1fXCIgKyBlbmNvZGluZy5maWVsZCh2YWwsIHRydWUpfV1cbiAgICB9KTtcbiAgfVxuXG4gIHNwZWMuZGF0YS5wdXNoKHN0YWNrZWQpO1xuXG4gIC8vIGFkZCBzdGFjayB0cmFuc2Zvcm0gdG8gbWFya1xuICBtZGVmLmZyb20udHJhbnNmb3JtID0gW3tcbiAgICB0eXBlOiBcInN0YWNrXCIsXG4gICAgcG9pbnQ6IGVuY29kaW5nLmZpZWxkKGRpbSksXG4gICAgaGVpZ2h0OiBlbmNvZGluZy5maWVsZCh2YWwpLFxuICAgIG91dHB1dDoge3kxOiB2YWwsIHkwOiB2YWwrXCIyXCJ9XG4gIH1dO1xuXG4gIC8vIFRPRE86IFRoaXMgaXMgc3VwZXIgaGFjay1pc2ggLS0gY29uc29saWRhdGUgaW50byBtb2R1bGFyIG1hcmsgcHJvcGVydGllcz9cbiAgbWRlZi5wcm9wZXJ0aWVzLnVwZGF0ZVt2YWxdID0gbWRlZi5wcm9wZXJ0aWVzLmVudGVyW3ZhbF0gPSB7c2NhbGU6IHZhbCwgZmllbGQ6IHZhbH07XG4gIG1kZWYucHJvcGVydGllcy51cGRhdGVbdmFsK1wiMlwiXSA9IG1kZWYucHJvcGVydGllcy5lbnRlclt2YWwrXCIyXCJdID0ge3NjYWxlOiB2YWwsIGZpZWxkOiB2YWwrXCIyXCJ9O1xuXG4gIHJldHVybiB2YWw7IC8vcmV0dXJuIHN0YWNrIGVuY29kaW5nXG59XG5cblxuZnVuY3Rpb24gbWFya2RlZihtYXJrLCBlbmNvZGluZywgb3B0KSB7XG4gIHZhciBwID0gbWFyay5wcm9wKGVuY29kaW5nLCBvcHQpXG4gIHJldHVybiB7XG4gICAgdHlwZTogbWFyay50eXBlLFxuICAgIGZyb206IHtkYXRhOiBUQUJMRX0sXG4gICAgcHJvcGVydGllczoge2VudGVyOiBwLCB1cGRhdGU6IHB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdyb3VwZGVmKG5hbWUsIG9wdCkge1xuICBvcHQgPSBvcHQgfHwge307XG4gIHJldHVybiB7XG4gICAgX25hbWU6IG5hbWUgfHwgdW5kZWZpbmVkLFxuICAgIHR5cGU6IFwiZ3JvdXBcIixcbiAgICBmcm9tOiBvcHQuZnJvbSxcbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICBlbnRlcjoge1xuICAgICAgICB4OiBvcHQueCB8fCB1bmRlZmluZWQsXG4gICAgICAgIHk6IG9wdC55IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgd2lkdGg6IG9wdC53aWR0aCB8fCB7Z3JvdXA6IFwid2lkdGhcIn0sXG4gICAgICAgIGhlaWdodDogb3B0LmhlaWdodCB8fCB7Z3JvdXA6IFwiaGVpZ2h0XCJ9XG4gICAgICB9XG4gICAgfSxcbiAgICBzY2FsZXM6IG9wdC5zY2FsZXMgfHwgdW5kZWZpbmVkLFxuICAgIGF4ZXM6IG9wdC5heGVzIHx8IHVuZGVmaW5lZCxcbiAgICBtYXJrczogb3B0Lm1hcmtzIHx8IFtdXG4gIH07XG59XG5cbmZ1bmN0aW9uIHRlbXBsYXRlKGVuY29kaW5nLCBzaXplLCBzdGF0cykgeyAvL2hhY2sgdXNlIHN0YXRzXG5cbiAgdmFyIGRhdGEgPSB7bmFtZTpUQUJMRSwgZm9ybWF0OiB7dHlwZTogZW5jb2RpbmcuY29uZmlnKFwiZGF0YUZvcm1hdFR5cGVcIil9fSxcbiAgICBkYXRhVXJsID0gdmwuZGF0YS5nZXRVcmwoZW5jb2RpbmcsIHN0YXRzKTtcbiAgaWYoZGF0YVVybCkgZGF0YS51cmwgPSBkYXRhVXJsO1xuXG4gIHZhciBwcmVhZ2dyZWdhdGVkRGF0YSA9IGVuY29kaW5nLmNvbmZpZyhcInVzZVZlZ2FTZXJ2ZXJcIik7XG5cbiAgZW5jb2RpbmcuZm9yRWFjaChmdW5jdGlvbihlbmNUeXBlLCBmaWVsZCl7XG4gICAgaWYoZmllbGQudHlwZSA9PSBUKXtcbiAgICAgIGRhdGEuZm9ybWF0LnBhcnNlID0gZGF0YS5mb3JtYXQucGFyc2UgfHwge307XG4gICAgICBkYXRhLmZvcm1hdC5wYXJzZVtmaWVsZC5uYW1lXSA9IFwiZGF0ZVwiO1xuICAgIH1lbHNlIGlmKGZpZWxkLnR5cGUgPT0gUSl7XG4gICAgICBkYXRhLmZvcm1hdC5wYXJzZSA9IGRhdGEuZm9ybWF0LnBhcnNlIHx8IHt9O1xuICAgICAgaWYgKGZpZWxkLmFnZ3IgPT09IFwiY291bnRcIikge1xuICAgICAgICB2YXIgbmFtZSA9IFwiY291bnRcIjtcbiAgICAgIH0gZWxzZSBpZihwcmVhZ2dyZWdhdGVkRGF0YSAmJiBmaWVsZC5iaW4pe1xuICAgICAgICB2YXIgbmFtZSA9IFwiYmluX1wiICsgZmllbGQubmFtZTtcbiAgICAgIH0gZWxzZSBpZihwcmVhZ2dyZWdhdGVkRGF0YSAmJiBmaWVsZC5hZ2dyKXtcbiAgICAgICAgdmFyIG5hbWUgPSBmaWVsZC5hZ2dyICsgXCJfXCIgKyBmaWVsZC5uYW1lO1xuICAgICAgfSBlbHNle1xuICAgICAgICB2YXIgbmFtZSA9IGZpZWxkLm5hbWU7XG4gICAgICB9XG4gICAgICBkYXRhLmZvcm1hdC5wYXJzZVtuYW1lXSA9IFwibnVtYmVyXCI7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBzaXplLndpZHRoLFxuICAgIGhlaWdodDogc2l6ZS5oZWlnaHQsXG4gICAgcGFkZGluZzogXCJhdXRvXCIsXG4gICAgZGF0YTogW2RhdGFdLFxuICAgIG1hcmtzOiBbZ3JvdXBkZWYoXCJjZWxsXCIsIHtcbiAgICAgIHdpZHRoOiBzaXplLmNlbGxXaWR0aCA/IHt2YWx1ZTogc2l6ZS5jZWxsV2lkdGh9OiB1bmRlZmluZWQsXG4gICAgICBoZWlnaHQ6IHNpemUuY2VsbEhlaWdodCA/IHt2YWx1ZTogc2l6ZS5jZWxsSGVpZ2h0fSA6IHVuZGVmaW5lZFxuICAgIH0pXVxuICB9O1xufVxuIiwidmFyIGdsb2JhbHMgPSByZXF1aXJlKCcuL2dsb2JhbHMnKTtcblxudmFyIGNvbnN0cyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbmNvbnN0cy5lbmNvZGluZ1R5cGVzID0gW1gsIFksIFJPVywgQ09MLCBTSVpFLCBTSEFQRSwgQ09MT1IsIEFMUEhBLCBURVhUXTtcblxuY29uc3RzLmRhdGFUeXBlcyA9IHtcIk9cIjogTywgXCJRXCI6IFEsIFwiVFwiOiBUfTtcblxuY29uc3RzLmRhdGFUeXBlTmFtZXMgPSBbXCJPXCIsXCJRXCIsXCJUXCJdLnJlZHVjZShmdW5jdGlvbihyLHgpIHtcbiAgcltjb25zdHMuZGF0YVR5cGVzW3hdXSA9IHg7IHJldHVybiByO1xufSx7fSk7XG5cbmNvbnN0cy5ERUZBVUxUUyA9IHtcbiAgLy8gdGVtcGxhdGVcbiAgd2lkdGg6IHVuZGVmaW5lZCxcbiAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gIHZpZXdwb3J0OiB1bmRlZmluZWQsXG4gIF9taW5XaWR0aDogMjAsXG4gIF9taW5IZWlnaHQ6IDIwLFxuXG4gIC8vIGRhdGEgc291cmNlXG4gIGRhdGFVcmw6IHVuZGVmaW5lZCwgLy9mb3IgZWFzaWVyIGV4cG9ydFxuICB1c2VWZWdhU2VydmVyOiBmYWxzZSxcbiAgdmVnYVNlcnZlclVybDogXCJodHRwOi8vbG9jYWxob3N0OjMwMDFcIixcbiAgdmVnYVNlcnZlclRhYmxlOiB1bmRlZmluZWQsXG4gIGRhdGFGb3JtYXRUeXBlOiBcImpzb25cIixcblxuICAvL3NtYWxsIG11bHRpcGxlc1xuICBjZWxsSGVpZ2h0OiAyMDAsIC8vIHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgYmFuZFdpZHRoXG4gIGNlbGxXaWR0aDogMjAwLCAvLyB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IGJhbmRXaWR0aFxuICBjZWxsUGFkZGluZzogMC4xLFxuICBjZWxsQmFja2dyb3VuZENvbG9yOiBcIiNmZGZkZmRcIixcbiAgeEF4aXNNYXJnaW46IDgwLFxuICB5QXhpc01hcmdpbjogMCxcbiAgdGV4dENlbGxXaWR0aDogOTAsXG5cbiAgLy8gbWFya3NcbiAgYmFuZFNpemU6IDIxLFxuICBiYW5kUGFkZGluZzogMSxcbiAgcG9pbnRTaXplOiA1MCxcbiAgcG9pbnRTaGFwZTogXCJjaXJjbGVcIixcbiAgc3Ryb2tlV2lkdGg6IDIsXG4gIGNvbG9yOiBcInN0ZWVsYmx1ZVwiLFxuICB0ZXh0Q29sb3I6IFwiYmxhY2tcIixcbiAgdGV4dEFsaWduOiBcImxlZnRcIixcbiAgdGV4dEJhc2VsaW5lOiBcIm1pZGRsZVwiLFxuICB0ZXh0TWFyZ2luOiA0LFxuICBmb250OiBcIkhlbHZldGljYSBOZXVlXCIsXG4gIGZvbnRTaXplOiBcIjEyXCIsXG4gIGZvbnRXZWlnaHQ6IFwibm9ybWFsXCIsXG4gIGZvbnRTdHlsZTogXCJub3JtYWxcIixcbiAgb3BhY2l0eTogMSxcbiAgX3RoaWNrT3BhY2l0eTogMC41LFxuICBfdGhpbk9wYWNpdHk6IDAuMixcblxuICAvLyBzY2FsZXNcbiAgLy8gVE9ETyByZW1vdmUgX3haZXJvLCAuLi5cbiAgX3haZXJvOiB0cnVlLFxuICBfeFJldmVyc2U6IGZhbHNlLFxuICBfeVplcm86IHRydWUsXG4gIF95UmV2ZXJzZTogZmFsc2UsXG4gIHRpbWVTY2FsZU5pY2U6IFwiZGF5XCJcbn07IiwiLy8gVE9ETyByZW5hbWUgZ2V0RGF0YVVybCB0byB2bC5kYXRhLmdldFVybCgpID9cblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL3V0aWwnKTtcblxudmFyIGRhdGEgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG5kYXRhLmdldFVybCA9IGZ1bmN0aW9uIGdldERhdGFVcmwoZW5jb2RpbmcsIHN0YXRzKSB7XG4gIGlmICghZW5jb2RpbmcuY29uZmlnKFwidXNlVmVnYVNlcnZlclwiKSkge1xuICAgIC8vIGRvbid0IHVzZSB2ZWdhIHNlcnZlclxuICAgIHJldHVybiBlbmNvZGluZy5jb25maWcoXCJkYXRhVXJsXCIpO1xuICB9XG5cbiAgaWYgKGVuY29kaW5nLmxlbmd0aCgpID09PSAwKSB7XG4gICAgLy8gbm8gZmllbGRzXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGZpZWxkcyA9IFtdXG4gIGVuY29kaW5nLmZvckVhY2goZnVuY3Rpb24oZW5jVHlwZSwgZmllbGQpe1xuICAgIHZhciBvYmogPSB7XG4gICAgICBuYW1lOiBlbmNvZGluZy5maWVsZChlbmNUeXBlLCB0cnVlKSxcbiAgICAgIGZpZWxkOiBmaWVsZC5uYW1lXG4gICAgfVxuICAgIGlmIChmaWVsZC5hZ2dyKSB7XG4gICAgICBvYmouYWdnciA9IGZpZWxkLmFnZ3JcbiAgICB9XG4gICAgaWYgKGZpZWxkLmJpbikge1xuICAgICAgb2JqLmJpblNpemUgPSB1dGlsLmdldGJpbnMoc3RhdHNbZmllbGQubmFtZV0pLnN0ZXA7XG4gICAgfVxuICAgIGZpZWxkcy5wdXNoKG9iaik7XG4gIH0pO1xuXG4gIHZhciBxdWVyeSA9IHtcbiAgICB0YWJsZTogZW5jb2RpbmcuY29uZmlnKFwidmVnYVNlcnZlclRhYmxlXCIpLFxuICAgIGZpZWxkczogZmllbGRzXG4gIH1cblxuICByZXR1cm4gZW5jb2RpbmcuY29uZmlnKFwidmVnYVNlcnZlclVybFwiKSArIFwiL3F1ZXJ5Lz9xPVwiICsgSlNPTi5zdHJpbmdpZnkocXVlcnkpXG59O1xuXG4vKipcbiAqIEBwYXJhbSAge09iamVjdH0gZGF0YSBkYXRhIGluIEpTT04vamF2YXNjcmlwdCBvYmplY3QgZm9ybWF0XG4gKiBAcmV0dXJuIEFycmF5IG9mIHtuYW1lOiBfX25hbWVfXywgdHlwZTogXCJudW1iZXJ8dGV4dHx0aW1lfGxvY2F0aW9uXCJ9XG4gKi9cbmRhdGEuZ2V0U2NoZW1hID0gZnVuY3Rpb24oZGF0YSl7XG4gIHZhciBzY2hlbWEgPSBbXSxcbiAgICBmaWVsZHMgPSB1dGlsLmtleXMoZGF0YVswXSk7XG5cbiAgZmllbGRzLmZvckVhY2goZnVuY3Rpb24oayl7XG4gICAgLy8gZmluZCBub24tbnVsbCBkYXRhXG4gICAgdmFyIGk9MCwgZGF0dW0gPSBkYXRhW2ldW2tdO1xuICAgIHdoaWxlKGRhdHVtID09PSBcIlwiIHx8IGRhdHVtID09PSBudWxsIHx8IGRhdHVtID09PSB1bmRlZmluZWQpe1xuICAgICAgZGF0dW0gPSBkYXRhWysraV1ba107XG4gICAgfVxuXG4gICAgLy9UT0RPKGthbml0dyk6IGJldHRlciB0eXBlIGluZmVyZW5jZSBoZXJlXG4gICAgdmFyIHR5cGUgPSAodHlwZW9mIGRhdHVtID09PSBcIm51bWJlclwiKSA/IFwibnVtYmVyXCIgOlxuICAgICAgaXNOYU4oRGF0ZS5wYXJzZShkYXR1bSkpID8gXCJ0ZXh0XCIgOiBcInRpbWVcIjtcblxuICAgIHNjaGVtYS5wdXNoKHtuYW1lOiBrLCB0eXBlOiB0eXBlfSk7XG4gIH0pO1xuXG4gIHJldHVybiBzY2hlbWE7XG59O1xuXG5kYXRhLmdldFN0YXRzID0gZnVuY3Rpb24oZGF0YSl7IC8vIGhhY2tcbiAgdmFyIHN0YXRzID0ge30sXG4gICAgZmllbGRzID0gdXRpbC5rZXlzKGRhdGFbMF0pO1xuXG4gIGZpZWxkcy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICB2YXIgc3RhdCA9IHV0aWwubWlubWF4KGRhdGEsIGspO1xuICAgIHN0YXQuY2FyZGluYWxpdHkgPSB1dGlsLnVuaXEoZGF0YSwgayk7XG4gICAgc3RhdC5jb3VudCA9IGRhdGEubGVuZ3RoO1xuICAgIHN0YXRzW2tdID0gc3RhdDtcbiAgfSk7XG4gIHJldHVybiBzdGF0cztcbn07XG4iLCIvLyBkZWNsYXJlIGdsb2JhbCBjb25zdGFudFxudmFyIGcgPSBnbG9iYWwgfHwgd2luZG93O1xuXG5nLlRBQkxFID0gXCJ0YWJsZVwiO1xuZy5TVEFDS0VEID0gXCJzdGFja2VkXCI7XG5nLklOREVYID0gXCJpbmRleFwiO1xuXG5nLlggPSBcInhcIjtcbmcuWSA9IFwieVwiO1xuZy5ST1cgPSBcInJvd1wiO1xuZy5DT0wgPSBcImNvbFwiO1xuZy5TSVpFID0gXCJzaXplXCI7XG5nLlNIQVBFID0gXCJzaGFwZVwiO1xuZy5DT0xPUiA9IFwiY29sb3JcIjtcbmcuQUxQSEEgPSBcImFscGhhXCI7XG5nLlRFWFQgPSBcInRleHRcIjtcblxuZy5PID0gMTtcbmcuUSA9IDI7XG5nLlQgPSA0O1xuXG4vL1RPRE8gcmVmYWN0b3IgdGhpcyB0byBiZSBjb25maWc/XG5nLk1BWF9CSU5TID0gMjA7IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vZ2xvYmFscycpO1xuXG52YXIgbGVnZW5kcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbmxlZ2VuZHMuZGVmcyA9IGZ1bmN0aW9uKGVuY29kaW5nKSB7XG4gIHZhciBsZWdlbmRzID0gW107XG5cbiAgLy8gVE9ETzogc3VwcG9ydCBhbHBoYVxuXG4gIGlmIChlbmNvZGluZy5oYXMoQ09MT1IpICYmIGVuY29kaW5nLmxlZ2VuZChDT0xPUikpIHtcbiAgICBsZWdlbmRzLnB1c2goe1xuICAgICAgZmlsbDogQ09MT1IsXG4gICAgICB0aXRsZTogZW5jb2RpbmcuZmllbGRUaXRsZShDT0xPUiksXG4gICAgICBvcmllbnQ6IFwicmlnaHRcIlxuICAgIH0pO1xuICB9XG5cbiAgaWYgKGVuY29kaW5nLmhhcyhTSVpFKSAmJiBlbmNvZGluZy5sZWdlbmQoU0laRSkpIHtcbiAgICBsZWdlbmRzLnB1c2goe1xuICAgICAgc2l6ZTogU0laRSxcbiAgICAgIHRpdGxlOiBlbmNvZGluZy5maWVsZFRpdGxlKFNJWkUpLFxuICAgICAgb3JpZW50OiBsZWdlbmRzLmxlbmd0aCA9PT0gMSA/IFwibGVmdFwiIDogXCJyaWdodFwiXG4gICAgfSk7XG4gIH1cblxuICBpZiAoZW5jb2RpbmcuaGFzKFNIQVBFKSAmJiBlbmNvZGluZy5sZWdlbmQoU0hBUEUpKSB7XG4gICAgaWYgKGxlZ2VuZHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAvLyBUT0RPOiBmaXggdGhpc1xuICAgICAgY29uc29sZS5lcnJvcihcIlZlZ2FsaXRlIGN1cnJlbnRseSBvbmx5IHN1cHBvcnRzIHR3byBsZWdlbmRzXCIpO1xuICAgICAgcmV0dXJuIGxlZ2VuZHM7XG4gICAgfVxuICAgIGxlZ2VuZHMucHVzaCh7XG4gICAgICBzaGFwZTogU0hBUEUsXG4gICAgICB0aXRsZTogZW5jb2RpbmcuZmllbGRUaXRsZShTSEFQRSksXG4gICAgICBvcmllbnQ6IGxlZ2VuZHMubGVuZ3RoID09PSAxID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCJcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBsZWdlbmRzO1xufSIsInZhciBnbG9iYWxzID0gcmVxdWlyZShcIi4vZ2xvYmFsc1wiKSxcbiAgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbnZhciBtYXJrcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbm1hcmtzLmJhciA9IHtcbiAgdHlwZTogXCJyZWN0XCIsXG4gIHN0YWNrOiB0cnVlLFxuICBwcm9wOiBiYXJfcHJvcHMsXG4gIHJlcXVpcmVkRW5jb2Rpbmc6IFtcInhcIiwgXCJ5XCJdLFxuICBzdXBwb3J0ZWRFbmNvZGluZzoge3JvdzoxLCBjb2w6MSwgeDoxLCB5OjEsIHNpemU6MSwgY29sb3I6MSwgYWxwaGE6MX1cbn07XG5cbm1hcmtzLmxpbmUgPSB7XG4gIHR5cGU6IFwibGluZVwiLFxuICBsaW5lOiB0cnVlLFxuICBwcm9wOiBsaW5lX3Byb3BzLFxuICByZXF1aXJlZEVuY29kaW5nOiBbXCJ4XCIsIFwieVwiXSxcbiAgc3VwcG9ydGVkRW5jb2Rpbmc6IHtyb3c6MSwgY29sOjEsIHg6MSwgeToxLCBjb2xvcjoxLCBhbHBoYToxfVxufTtcblxubWFya3MuYXJlYSA9IHtcbiAgdHlwZTogXCJhcmVhXCIsXG4gIHN0YWNrOiB0cnVlLFxuICBsaW5lOiB0cnVlLFxuICByZXF1aXJlZEVuY29kaW5nOiBbXCJ4XCIsIFwieVwiXSxcbiAgcHJvcDogYXJlYV9wcm9wcyxcbiAgc3VwcG9ydGVkRW5jb2Rpbmc6IG1hcmtzLmxpbmUuc3VwcG9ydGVkRW5jb2Rpbmdcbn07XG5cbm1hcmtzLmNpcmNsZSA9IHtcbiAgdHlwZTogXCJzeW1ib2xcIixcbiAgcHJvcDogZmlsbGVkX3BvaW50X3Byb3BzKFwiY2lyY2xlXCIpLFxuICBzdXBwb3J0ZWRFbmNvZGluZzoge3JvdzoxLCBjb2w6MSwgeDoxLCB5OjEsIHNpemU6MSwgY29sb3I6MSwgYWxwaGE6MX1cbn07XG5cbm1hcmtzLnNxdWFyZSA9IHtcbiAgdHlwZTogXCJzeW1ib2xcIixcbiAgcHJvcDogZmlsbGVkX3BvaW50X3Byb3BzKFwic3F1YXJlXCIpLFxuICBzdXBwb3J0ZWRFbmNvZGluZzogbWFya3MuY2lyY2xlLnN1cHBvcnRlZEVuY29kaW5nXG59O1xuXG5tYXJrcy5wb2ludCA9IHtcbiAgdHlwZTogXCJzeW1ib2xcIixcbiAgcHJvcDogcG9pbnRfcHJvcHMsXG4gIHN1cHBvcnRlZEVuY29kaW5nOiB7cm93OjEsIGNvbDoxLCB4OjEsIHk6MSwgc2l6ZToxLCBjb2xvcjoxLCBhbHBoYToxLCBzaGFwZToxfVxufTtcblxubWFya3MudGV4dCA9IHtcbiAgdHlwZTogXCJ0ZXh0XCIsXG4gIHByb3A6IHRleHRfcHJvcHMsXG4gIHJlcXVpcmVkRW5jb2Rpbmc6IFtcInRleHRcIl0sXG4gIHN1cHBvcnRlZEVuY29kaW5nOiB7cm93OjEsIGNvbDoxLCBzaXplOjEsIGNvbG9yOjEsIGFscGhhOjEsIHRleHQ6MX1cbn07XG5cbmZ1bmN0aW9uIGJhcl9wcm9wcyhlKSB7XG4gIHZhciBwID0ge307XG5cbiAgLy8geFxuICBpZiAoZS5pc1R5cGUoWCxRfFQpICYmICFlLmJpbihYKSkge1xuICAgIHAueCA9IHtzY2FsZTogWCwgZmllbGQ6IGUuZmllbGQoWCl9O1xuICAgIGlmIChlLmhhcyhZKSAmJiAoIWUuaXNUeXBlKFksUXxUKSB8fCBlLmJpbihZKSkpIHtcbiAgICAgIHAueDIgPSB7c2NhbGU6IFgsIHZhbHVlOiAwfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZS5oYXMoWCkpIHtcbiAgICBwLnhjID0ge3NjYWxlOiBYLCBmaWVsZDogZS5maWVsZChYKX07XG4gIH0gZWxzZSB7XG4gICAgcC54YyA9IHt2YWx1ZTogMH07XG4gIH1cblxuICAvLyB5XG4gIGlmIChlLmlzVHlwZShZLFF8VCkgJiYgIWUuYmluKFkpKSB7XG4gICAgcC55ID0ge3NjYWxlOiBZLCBmaWVsZDogZS5maWVsZChZKX07XG4gICAgcC55MiA9IHtzY2FsZTogWSwgdmFsdWU6IDB9O1xuICB9IGVsc2UgaWYgKGUuaGFzKFkpKSB7XG4gICAgcC55YyA9IHtzY2FsZTogWSwgZmllbGQ6IGUuZmllbGQoWSl9O1xuICB9IGVsc2Uge1xuICAgIHAueWMgPSB7Z3JvdXA6IFwiaGVpZ2h0XCJ9O1xuICB9XG5cbiAgLy8gd2lkdGhcbiAgaWYgKCFlLmlzVHlwZShYLFF8VCkpIHtcbiAgICBpZiAoZS5oYXMoU0laRSkpIHtcbiAgICAgIHAud2lkdGggPSB7c2NhbGU6IFNJWkUsIGZpZWxkOiBlLmZpZWxkKFNJWkUpfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcC53aWR0aCA9IHtzY2FsZTogWCwgYmFuZDogdHJ1ZSwgb2Zmc2V0OiAtMX07XG4gICAgICBwLndpZHRoID0ge3ZhbHVlOiArZS5jb25maWcoXCJiYW5kU2l6ZVwiKSwgb2Zmc2V0OiAtMX07XG4gICAgfVxuICB9IGVsc2UgaWYgKCFlLmlzVHlwZShZLE8pICYmICFlLmJpbihZKSkge1xuICAgIHAud2lkdGggPSB7dmFsdWU6ICtlLmNvbmZpZyhcImJhbmRTaXplXCIpLCBvZmZzZXQ6IC0xfTtcbiAgfVxuXG4gIC8vIGhlaWdodFxuICBpZiAoIWUuaXNUeXBlKFksUXxUKSkge1xuICAgIGlmIChlLmhhcyhTSVpFKSkge1xuICAgICAgcC5oZWlnaHQgPSB7c2NhbGU6IFNJWkUsIGZpZWxkOiBlLmZpZWxkKFNJWkUpfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcC5oZWlnaHQgPSB7c2NhbGU6IFksIGJhbmQ6IHRydWUsIG9mZnNldDogLTF9O1xuICAgICAgcC5oZWlnaHQgPSB7dmFsdWU6ICtlLmNvbmZpZyhcImJhbmRTaXplXCIpLCBvZmZzZXQ6IC0xfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWUuaXNUeXBlKFgsTykgJiYgIWUuYmluKFgpKSB7XG4gICAgcC5oZWlnaHQgPSB7dmFsdWU6ICtlLmNvbmZpZyhcImJhbmRTaXplXCIpLCBvZmZzZXQ6IC0xfTtcbiAgfVxuXG4gIC8vIGZpbGxcbiAgaWYgKGUuaGFzKENPTE9SKSkge1xuICAgIHAuZmlsbCA9IHtzY2FsZTogQ09MT1IsIGZpZWxkOiBlLmZpZWxkKENPTE9SKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKENPTE9SKSkge1xuICAgIHAuZmlsbCA9IHt2YWx1ZTogZS5jb25maWcoXCJjb2xvclwiKX07XG4gIH1cblxuICAvLyBhbHBoYVxuICBpZiAoZS5oYXMoQUxQSEEpKSB7XG4gICAgcC5vcGFjaXR5ID0ge3NjYWxlOiBBTFBIQSwgZmllbGQ6IGUuZmllbGQoQUxQSEEpfTtcbiAgfVxuXG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBwb2ludF9wcm9wcyhlLCBvcHQpIHtcbiAgdmFyIHAgPSB7fTtcbiAgb3B0ID0gb3B0IHx8IHt9O1xuXG4gIC8vIHhcbiAgaWYgKGUuaGFzKFgpKSB7XG4gICAgcC54ID0ge3NjYWxlOiBYLCBmaWVsZDogZS5maWVsZChYKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKFgpKSB7XG4gICAgcC54ID0ge3ZhbHVlOiBlLmNvbmZpZyhcImJhbmRTaXplXCIpLzJ9O1xuICB9XG5cbiAgLy8geVxuICBpZiAoZS5oYXMoWSkpIHtcbiAgICBwLnkgPSB7c2NhbGU6IFksIGZpZWxkOiBlLmZpZWxkKFkpfTtcbiAgfSBlbHNlIGlmICghZS5oYXMoWSkpIHtcbiAgICBwLnkgPSB7dmFsdWU6IGUuY29uZmlnKFwiYmFuZFNpemVcIikvMn07XG4gIH1cblxuICAvLyBzaXplXG4gIGlmIChlLmhhcyhTSVpFKSkge1xuICAgIHAuc2l6ZSA9IHtzY2FsZTogU0laRSwgZmllbGQ6IGUuZmllbGQoU0laRSl9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhTSVpFKSkge1xuICAgIHAuc2l6ZSA9IHt2YWx1ZTogZS5jb25maWcoXCJwb2ludFNpemVcIil9O1xuICB9XG5cbiAgLy8gc2hhcGVcbiAgaWYgKGUuaGFzKFNIQVBFKSkge1xuICAgIHAuc2hhcGUgPSB7c2NhbGU6IFNIQVBFLCBmaWVsZDogZS5maWVsZChTSEFQRSl9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhTSEFQRSkpIHtcbiAgICBwLnNoYXBlID0ge3ZhbHVlOiBlLmNvbmZpZyhcInBvaW50U2hhcGVcIil9O1xuICB9XG5cbiAgLy8gc3Ryb2tlXG4gIGlmIChlLmhhcyhDT0xPUikpIHtcbiAgICBwLnN0cm9rZSA9IHtzY2FsZTogQ09MT1IsIGZpZWxkOiBlLmZpZWxkKENPTE9SKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKENPTE9SKSkge1xuICAgIHAuc3Ryb2tlID0ge3ZhbHVlOiBlLmNvbmZpZyhcImNvbG9yXCIpfTtcbiAgfVxuXG4gIC8vIGFscGhhXG4gIGlmIChlLmhhcyhBTFBIQSkpIHtcbiAgICBwLm9wYWNpdHkgPSB7c2NhbGU6IEFMUEhBLCBmaWVsZDogZS5maWVsZChBTFBIQSl9O1xuICB9ZWxzZXtcbiAgICBwLm9wYWNpdHkgPSB7XG4gICAgICB2YWx1ZTogZS5jb25maWcoXCJvcGFjaXR5XCIpIHx8IGUuY29uZmlnKG9wdC5oYXNBZ2dyZWdhdGUgPyBcIl90aGlja09wYWNpdHlcIiA6IFwiX3RoaW5PcGFjaXR5XCIpXG4gICAgfTtcbiAgfVxuXG4gIHAuc3Ryb2tlV2lkdGggPSB7dmFsdWU6IGUuY29uZmlnKFwic3Ryb2tlV2lkdGhcIil9O1xuXG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBsaW5lX3Byb3BzKGUpIHtcbiAgdmFyIHAgPSB7fTtcblxuICAvLyB4XG4gIGlmIChlLmhhcyhYKSkge1xuICAgIHAueCA9IHtzY2FsZTogWCwgZmllbGQ6IGUuZmllbGQoWCl9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhYKSkge1xuICAgIHAueCA9IHt2YWx1ZTogMH07XG4gIH1cblxuICAvLyB5XG4gIGlmIChlLmhhcyhZKSkge1xuICAgIHAueSA9IHtzY2FsZTogWSwgZmllbGQ6IGUuZmllbGQoWSl9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhZKSkge1xuICAgIHAueSA9IHtncm91cDogXCJoZWlnaHRcIn07XG4gIH1cblxuICAvLyBzdHJva2VcbiAgaWYgKGUuaGFzKENPTE9SKSkge1xuICAgIHAuc3Ryb2tlID0ge3NjYWxlOiBDT0xPUiwgZmllbGQ6IGUuZmllbGQoQ09MT1IpfTtcbiAgfSBlbHNlIGlmICghZS5oYXMoQ09MT1IpKSB7XG4gICAgcC5zdHJva2UgPSB7dmFsdWU6IGUuY29uZmlnKFwiY29sb3JcIil9O1xuICB9XG5cbiAgLy8gYWxwaGFcbiAgaWYgKGUuaGFzKEFMUEhBKSkge1xuICAgIHAub3BhY2l0eSA9IHtzY2FsZTogQUxQSEEsIGZpZWxkOiBlLmZpZWxkKEFMUEhBKX07XG4gIH1cblxuICBwLnN0cm9rZVdpZHRoID0ge3ZhbHVlOiBlLmNvbmZpZyhcInN0cm9rZVdpZHRoXCIpfTtcblxuICByZXR1cm4gcDtcbn1cblxuZnVuY3Rpb24gYXJlYV9wcm9wcyhlKSB7XG4gIHZhciBwID0ge307XG5cbiAgLy8geFxuICBpZiAoZS5pc1R5cGUoWCxRfFQpKSB7XG4gICAgcC54ID0ge3NjYWxlOiBYLCBmaWVsZDogZS5maWVsZChYKX07XG4gICAgaWYgKCFlLmlzVHlwZShZLFF8VCkgJiYgZS5oYXMoWSkpIHtcbiAgICAgIHAueDIgPSB7c2NhbGU6IFgsIHZhbHVlOiAwfTtcbiAgICAgIHAub3JpZW50ID0ge3ZhbHVlOiBcImhvcml6b250YWxcIn07XG4gICAgfVxuICB9IGVsc2UgaWYgKGUuaGFzKFgpKSB7XG4gICAgcC54ID0ge3NjYWxlOiBYLCBmaWVsZDogZS5maWVsZChYKX07XG4gIH0gZWxzZSB7XG4gICAgcC54ID0ge3ZhbHVlOiAwfTtcbiAgfVxuXG4gIC8vIHlcbiAgaWYgKGUuaXNUeXBlKFksUXxUKSkge1xuICAgIHAueSA9IHtzY2FsZTogWSwgZmllbGQ6IGUuZmllbGQoWSl9O1xuICAgIHAueTIgPSB7c2NhbGU6IFksIHZhbHVlOiAwfTtcbiAgfSBlbHNlIGlmIChlLmhhcyhZKSkge1xuICAgIHAueSA9IHtzY2FsZTogWSwgZmllbGQ6IGUuZmllbGQoWSl9O1xuICB9IGVsc2Uge1xuICAgIHAueSA9IHtncm91cDogXCJoZWlnaHRcIn07XG4gIH1cblxuICAvLyBzdHJva2VcbiAgaWYgKGUuaGFzKENPTE9SKSkge1xuICAgIHAuZmlsbCA9IHtzY2FsZTogQ09MT1IsIGZpZWxkOiBlLmZpZWxkKENPTE9SKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKENPTE9SKSkge1xuICAgIHAuZmlsbCA9IHt2YWx1ZTogZS5jb25maWcoXCJjb2xvclwiKX07XG4gIH1cblxuICAvLyBhbHBoYVxuICBpZiAoZS5oYXMoQUxQSEEpKSB7XG4gICAgcC5vcGFjaXR5ID0ge3NjYWxlOiBBTFBIQSwgZmllbGQ6IGUuZmllbGQoQUxQSEEpfTtcbiAgfVxuXG4gIHJldHVybiBwO1xufVxuXG5mdW5jdGlvbiBmaWxsZWRfcG9pbnRfcHJvcHMoc2hhcGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGUsIG9wdCkge1xuICAgIHZhciBwID0ge307XG4gICAgb3B0ID0gb3B0IHx8IHt9O1xuXG4gICAgLy8geFxuICAgIGlmIChlLmhhcyhYKSkge1xuICAgICAgcC54ID0ge3NjYWxlOiBYLCBmaWVsZDogZS5maWVsZChYKX07XG4gICAgfSBlbHNlIGlmICghZS5oYXMoWCkpIHtcbiAgICAgIHAueCA9IHt2YWx1ZTogZS5jb25maWcoXCJiYW5kU2l6ZVwiKS8yfTtcbiAgICB9XG5cbiAgICAvLyB5XG4gICAgaWYgKGUuaGFzKFkpKSB7XG4gICAgICBwLnkgPSB7c2NhbGU6IFksIGZpZWxkOiBlLmZpZWxkKFkpfTtcbiAgICB9IGVsc2UgaWYgKCFlLmhhcyhZKSkge1xuICAgICAgcC55ID0ge3ZhbHVlOiBlLmNvbmZpZyhcImJhbmRTaXplXCIpLzJ9O1xuICAgIH1cblxuICAgIC8vIHNpemVcbiAgICBpZiAoZS5oYXMoU0laRSkpIHtcbiAgICAgIHAuc2l6ZSA9IHtzY2FsZTogU0laRSwgZmllbGQ6IGUuZmllbGQoU0laRSl9O1xuICAgIH0gZWxzZSBpZiAoIWUuaGFzKFgpKSB7XG4gICAgICBwLnNpemUgPSB7dmFsdWU6IGUuY29uZmlnKFwicG9pbnRTaXplXCIpfTtcbiAgICB9XG5cbiAgICAvLyBzaGFwZVxuICAgIHAuc2hhcGUgPSB7dmFsdWU6IHNoYXBlfTtcblxuICAgIC8vIGZpbGxcbiAgICBpZiAoZS5oYXMoQ09MT1IpKSB7XG4gICAgICBwLmZpbGwgPSB7c2NhbGU6IENPTE9SLCBmaWVsZDogZS5maWVsZChDT0xPUil9O1xuICAgIH0gZWxzZSBpZiAoIWUuaGFzKENPTE9SKSkge1xuICAgICAgcC5maWxsID0ge3ZhbHVlOiBlLmNvbmZpZyhcImNvbG9yXCIpfTtcbiAgICB9XG5cbiAgICAvLyBhbHBoYVxuICAgIGlmIChlLmhhcyhBTFBIQSkpIHtcbiAgICAgIHAub3BhY2l0eSA9IHtzY2FsZTogQUxQSEEsIGZpZWxkOiBlLmZpZWxkKEFMUEhBKX07XG4gICAgfWVsc2Uge1xuICAgICAgcC5vcGFjaXR5ID0ge1xuICAgICAgICB2YWx1ZTogZS5jb25maWcoXCJvcGFjaXR5XCIpIHx8IGUuY29uZmlnKG9wdC5oYXNBZ2dyZWdhdGUgPyBcIl90aGlja09wYWNpdHlcIiA6IFwiX3RoaW5PcGFjaXR5XCIpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBwO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0X3Byb3BzKGUpIHtcbiAgdmFyIHAgPSB7fTtcblxuICAvLyB4XG4gIGlmIChlLmhhcyhYKSkge1xuICAgIHAueCA9IHtzY2FsZTogWCwgZmllbGQ6IGUuZmllbGQoWCl9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhYKSkge1xuICAgIHAueCA9IHt2YWx1ZTogZS5jb25maWcoXCJiYW5kU2l6ZVwiKS8yfTtcbiAgfVxuXG4gIC8vIHlcbiAgaWYgKGUuaGFzKFkpKSB7XG4gICAgcC55ID0ge3NjYWxlOiBZLCBmaWVsZDogZS5maWVsZChZKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKFkpKSB7XG4gICAgcC55ID0ge3ZhbHVlOiBlLmNvbmZpZyhcImJhbmRTaXplXCIpLzJ9O1xuICB9XG5cbiAgLy8gc2l6ZVxuICBpZiAoZS5oYXMoU0laRSkpIHtcbiAgICBwLmZvbnRTaXplID0ge3NjYWxlOiBTSVpFLCBmaWVsZDogZS5maWVsZChTSVpFKX07XG4gIH0gZWxzZSBpZiAoIWUuaGFzKFgpKSB7XG4gICAgcC5mb250U2l6ZSA9IHt2YWx1ZTogZS5jb25maWcoXCJmb250U2l6ZVwiKX07XG4gIH1cblxuICAvLyBmaWxsXG4gIGlmIChlLmhhcyhDT0xPUikpIHtcbiAgICBwLmZpbGwgPSB7c2NhbGU6IENPTE9SLCBmaWVsZDogZS5maWVsZChDT0xPUil9O1xuICB9IGVsc2UgaWYgKCFlLmhhcyhDT0xPUikpIHtcbiAgICBwLmZpbGwgPSB7dmFsdWU6IGUuY29uZmlnKFwidGV4dENvbG9yXCIpfTtcbiAgfVxuXG4gIC8vIGFscGhhXG4gIGlmIChlLmhhcyhBTFBIQSkpIHtcbiAgICBwLm9wYWNpdHkgPSB7c2NhbGU6IEFMUEhBLCBmaWVsZDogZS5maWVsZChBTFBIQSl9O1xuICB9XG5cbiAgLy8gdGV4dFxuICBpZiAoZS5oYXMoVEVYVCkpIHtcbiAgICBwLnRleHQgPSB7ZmllbGQ6IGUuZmllbGQoVEVYVCl9O1xuICB9IGVsc2Uge1xuICAgIHAudGV4dCA9IHt2YWx1ZTogXCJBYmNcIn07XG4gIH1cblxuICBwLmZvbnQgPSB7dmFsdWU6IGUuY29uZmlnKFwiZm9udFwiKX07XG4gIHAuZm9udFdlaWdodCA9IHt2YWx1ZTogZS5jb25maWcoXCJmb250V2VpZ2h0XCIpfTtcbiAgcC5mb250U3R5bGUgPSB7dmFsdWU6IGUuY29uZmlnKFwiZm9udFN0eWxlXCIpfTtcbiAgcC5iYXNlbGluZSA9IHt2YWx1ZTogZS5jb25maWcoXCJ0ZXh0QmFzZWxpbmVcIil9O1xuXG4gIC8vIGFsaWduXG4gIGlmIChlLmhhcyhYKSkge1xuICAgIGlmIChlLmlzVHlwZShYLE8pKSB7XG4gICAgICBwLmFsaWduID0ge3ZhbHVlOiBcImxlZnRcIn07XG4gICAgICBwLmR4ID0ge3ZhbHVlOiBlLmNvbmZpZyhcInRleHRNYXJnaW5cIil9O1xuICAgIH0gZWxzZSB7XG4gICAgICBwLmFsaWduID0ge3ZhbHVlOiBcImNlbnRlclwifVxuICAgIH1cbiAgfSBlbHNlIGlmIChlLmhhcyhZKSkge1xuICAgIHAuYWxpZ24gPSB7dmFsdWU6IFwibGVmdFwifTtcbiAgICBwLmR4ID0ge3ZhbHVlOiBlLmNvbmZpZyhcInRleHRNYXJnaW5cIil9O1xuICB9IGVsc2Uge1xuICAgIHAuYWxpZ24gPSB7dmFsdWU6IGUuY29uZmlnKFwidGV4dEFsaWduXCIpfTtcbiAgfVxuXG4gIHJldHVybiBwO1xufSIsInZhciBnbG9iYWxzID0gcmVxdWlyZShcIi4vZ2xvYmFsc1wiKSxcbiAgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWxcIik7XG5cbnZhciBzY2FsZSA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnNjYWxlLm5hbWVzID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gIHJldHVybiB1dGlsLmtleXModXRpbC5rZXlzKHByb3BzKS5yZWR1Y2UoZnVuY3Rpb24oYSwgeCkge1xuICAgIGlmIChwcm9wc1t4XSAmJiBwcm9wc1t4XS5zY2FsZSkgYVtwcm9wc1t4XS5zY2FsZV0gPSAxO1xuICAgIHJldHVybiBhO1xuICB9LCB7fSkpO1xufVxuXG5zY2FsZS5kZWZzID0gZnVuY3Rpb24gKG5hbWVzLCBlbmNvZGluZywgb3B0KSB7XG4gIG9wdCA9IG9wdCB8fCB7fTtcblxuICByZXR1cm4gbmFtZXMucmVkdWNlKGZ1bmN0aW9uKGEsIG5hbWUpIHtcbiAgICB2YXIgcyA9IHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB0eXBlOiBzY2FsZV90eXBlKG5hbWUsIGVuY29kaW5nKSxcbiAgICAgIGRvbWFpbjogc2NhbGVfZG9tYWluKG5hbWUsIGVuY29kaW5nLCBvcHQpXG4gICAgfTtcbiAgICBpZiAocy50eXBlID09PSBcIm9yZGluYWxcIiAmJiAhZW5jb2RpbmcuYmluKG5hbWUpKSB7XG4gICAgICBzLnNvcnQgPSB0cnVlO1xuICAgIH1cblxuICAgIHNjYWxlX3JhbmdlKHMsIGVuY29kaW5nLCBvcHQpO1xuXG4gICAgcmV0dXJuIChhLnB1c2gocyksIGEpO1xuICB9LCBbXSk7XG59XG5cbmZ1bmN0aW9uIHNjYWxlX3R5cGUobmFtZSwgZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChlbmNvZGluZy50eXBlKG5hbWUpKSB7XG4gICAgY2FzZSBPOiByZXR1cm4gXCJvcmRpbmFsXCI7XG4gICAgY2FzZSBUOlxuICAgICAgaWYgKGVuY29kaW5nLmZuKG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBcImxpbmVhclwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFwidGltZVwiO1xuICAgIGNhc2UgUTpcbiAgICAgIGlmIChlbmNvZGluZy5iaW4obmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIFwib3JkaW5hbFwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVuY29kaW5nLnNjYWxlKG5hbWUpLnR5cGUgfHwgXCJsaW5lYXJcIjtcbiAgfVxufVxuXG5mdW5jdGlvbiBzY2FsZV9kb21haW4obmFtZSwgZW5jb2RpbmcsIG9wdCkge1xuICBpZiAoZW5jb2RpbmcudHlwZShuYW1lKSA9PT0gVCl7XG4gICAgc3dpdGNoKGVuY29kaW5nLmZuKG5hbWUpKXtcbiAgICAgIGNhc2UgXCJzZWNvbmRcIjpcbiAgICAgIGNhc2UgXCJtaW51dGVcIjogcmV0dXJuIFswLCA1OV07XG4gICAgICBjYXNlIFwiaG91clwiOiByZXR1cm4gWzAsIDIzXTtcbiAgICAgIGNhc2UgXCJkYXlcIjogcmV0dXJuIFswLCA2XTtcbiAgICAgIGNhc2UgXCJkYXRlXCI6IHJldHVybiBbMSwgMzFdO1xuICAgICAgY2FzZSBcIm1vbnRoXCI6IHJldHVybiBbMCwgMTFdO1xuICAgIH1cbiAgfVxuXG4gIGlmIChlbmNvZGluZy5iaW4obmFtZSkpIHtcbiAgICAvLyBUT0RPOiBhZGQgaW5jbHVkZUVtcHR5Q29uZmlnIGhlcmVcbiAgICBpZiAob3B0LnN0YXRzKSB7XG4gICAgICB2YXIgYmlucyA9IHV0aWwuZ2V0YmlucyhvcHQuc3RhdHNbZW5jb2RpbmcuZmllbGROYW1lKG5hbWUpXSk7XG4gICAgICB2YXIgZG9tYWluID0gdXRpbC5yYW5nZShiaW5zLnN0YXJ0LCBiaW5zLnN0b3AsIGJpbnMuc3RlcCk7XG4gICAgICByZXR1cm4gbmFtZT09PVkgPyBkb21haW4ucmV2ZXJzZSgpIDogZG9tYWluO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lID09IG9wdC5zdGFjayA/XG4gICAge1xuICAgICAgZGF0YTogU1RBQ0tFRCxcbiAgICAgIGZpZWxkOiBcImRhdGEuXCIgKyAob3B0LmZhY2V0ID8gXCJtYXhfXCIgOlwiXCIpICsgXCJzdW1fXCIgKyBlbmNvZGluZy5maWVsZChuYW1lLCB0cnVlKVxuICAgIH06XG4gICAge2RhdGE6IFRBQkxFLCBmaWVsZDogZW5jb2RpbmcuZmllbGQobmFtZSl9O1xufVxuXG5mdW5jdGlvbiBzY2FsZV9yYW5nZShzLCBlbmNvZGluZywgb3B0KSB7XG4gIHZhciBzcGVjID0gZW5jb2Rpbmcuc2NhbGUocy5uYW1lKTtcbiAgc3dpdGNoIChzLm5hbWUpIHtcbiAgICBjYXNlIFg6XG4gICAgICBpZiAoZW5jb2RpbmcuaXNUeXBlKHMubmFtZSwgTykgfHwgZW5jb2RpbmcuYmluKHMubmFtZSkpIHtcbiAgICAgICAgcy5iYW5kV2lkdGggPSArZW5jb2RpbmcuY29uZmlnKFwiYmFuZFNpemVcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzLnJhbmdlID0gb3B0LmNlbGxXaWR0aCA/IFswLCBvcHQuY2VsbFdpZHRoXSA6IFwid2lkdGhcIjtcbiAgICAgICAgLy9UT0RPIHplcm8gYW5kIHJldmVyc2Ugc2hvdWxkIGJlY29tZSBnZW5lcmljLCBhbmQgd2UganVzdCByZWFkIGRlZmF1bHQgZnJvbSBlaXRoZXIgdGhlIHNjaGVtYSBvciB0aGUgc2NoZW1hIGdlbmVyYXRvclxuICAgICAgICBzLnplcm8gPSBzcGVjLnplcm8gfHwgZW5jb2RpbmcuY29uZmlnKFwiX3haZXJvXCIpO1xuICAgICAgICBzLnJldmVyc2UgPSBzcGVjLnJldmVyc2UgfHwgZW5jb2RpbmcuY29uZmlnKFwiX3hSZXZlcnNlXCIpO1xuICAgICAgfVxuICAgICAgcy5yb3VuZCA9IHRydWU7XG4gICAgICBpZiAoZW5jb2RpbmcuaXNUeXBlKHMubmFtZSwgVCkpe1xuICAgICAgICBzLm5pY2UgPSBlbmNvZGluZy5hZ2dyKHMubmFtZSkgfHwgZW5jb2RpbmcuY29uZmlnKFwidGltZVNjYWxlTmljZVwiKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBzLm5pY2UgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBZOlxuICAgICAgaWYgKGVuY29kaW5nLmlzVHlwZShzLm5hbWUsIE8pIHx8IGVuY29kaW5nLmJpbihzLm5hbWUpKSB7XG4gICAgICAgIHMuYmFuZFdpZHRoID0gK2VuY29kaW5nLmNvbmZpZyhcImJhbmRTaXplXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcy5yYW5nZSA9IG9wdC5jZWxsSGVpZ2h0ID8gW29wdC5jZWxsSGVpZ2h0LCAwXSA6IFwiaGVpZ2h0XCI7XG4gICAgICAgIC8vVE9ETyB6ZXJvIGFuZCByZXZlcnNlIHNob3VsZCBiZWNvbWUgZ2VuZXJpYywgYW5kIHdlIGp1c3QgcmVhZCBkZWZhdWx0IGZyb20gZWl0aGVyIHRoZSBzY2hlbWEgb3IgdGhlIHNjaGVtYSBnZW5lcmF0b3JcbiAgICAgICAgcy56ZXJvID0gc3BlYy56ZXJvIHx8IGVuY29kaW5nLmNvbmZpZyhcIl95WmVyb1wiKTtcbiAgICAgICAgcy5yZXZlcnNlID0gc3BlYy5yZXZlcnNlIHx8IGVuY29kaW5nLmNvbmZpZyhcIl95UmV2ZXJzZVwiKTtcbiAgICAgIH1cblxuICAgICAgcy5yb3VuZCA9IHRydWU7XG5cbiAgICAgIGlmIChlbmNvZGluZy5pc1R5cGUocy5uYW1lLCBUKSl7XG4gICAgICAgIHMubmljZSA9IGVuY29kaW5nLmFnZ3Iocy5uYW1lKTtcbiAgICAgIH1lbHNle1xuICAgICAgICBzLm5pY2UgPSB0cnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBST1c6XG4gICAgICBzLmJhbmRXaWR0aCA9IG9wdC5jZWxsSGVpZ2h0IHx8IGVuY29kaW5nLmNvbmZpZyhcImNlbGxIZWlnaHRcIik7XG4gICAgICBzLnJvdW5kID0gdHJ1ZTtcbiAgICAgIHMubmljZSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIENPTDpcbiAgICAgIHMuYmFuZFdpZHRoID0gb3B0LmNlbGxXaWR0aCB8fCBlbmNvZGluZy5jb25maWcoXCJjZWxsV2lkdGhcIik7XG4gICAgICBzLnJvdW5kID0gdHJ1ZTtcbiAgICAgIHMubmljZSA9IHRydWU7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFNJWkU6XG4gICAgICBpZiAoZW5jb2RpbmcuaXMoXCJiYXJcIikpIHtcbiAgICAgICAgcy5yYW5nZSA9IFszLCArZW5jb2RpbmcuY29uZmlnKFwiYmFuZFNpemVcIildO1xuICAgICAgfSBlbHNlIGlmIChlbmNvZGluZy5pcyhURVhUKSkge1xuICAgICAgICBzLnJhbmdlID0gWzgsIDQwXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMucmFuZ2UgPSBbMTAsIDEwMDBdO1xuICAgICAgfVxuICAgICAgcy5yb3VuZCA9IHRydWU7XG4gICAgICBzLnplcm8gPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgU0hBUEU6XG4gICAgICBzLnJhbmdlID0gXCJzaGFwZXNcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ09MT1I6XG4gICAgICBpZiAoZW5jb2RpbmcuaXNUeXBlKHMubmFtZSwgTykpIHtcbiAgICAgICAgcy5yYW5nZSA9IFwiY2F0ZWdvcnkxMFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcy5yYW5nZSA9IFtcIiNkZGZcIiwgXCJzdGVlbGJsdWVcIl07XG4gICAgICAgIHMuemVybyA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBBTFBIQTpcbiAgICAgIHMucmFuZ2UgPSBbMC4yLCAxLjBdO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gZW5jb2RpbmcgbmFtZTogXCIrcy5uYW1lKTtcbiAgfVxuXG4gIHN3aXRjaChzLm5hbWUpe1xuICAgIGNhc2UgUk9XOlxuICAgIGNhc2UgQ09MOlxuICAgICAgcy5wYWRkaW5nID0gZW5jb2RpbmcuY29uZmlnKFwiY2VsbFBhZGRpbmdcIik7XG4gICAgICBzLm91dGVyUGFkZGluZyA9IDA7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFg6XG4gICAgY2FzZSBZOlxuICAgICAgaWYgKGVuY29kaW5nLmlzVHlwZShzLm5hbWUsIE8pIHx8IGVuY29kaW5nLmJpbihzLm5hbWUpICkgeyAvLyYmICFzLmJhbmRXaWR0aFxuICAgICAgICBzLnBvaW50cyA9IHRydWU7XG4gICAgICAgIHMucGFkZGluZyA9IGVuY29kaW5nLmNvbmZpZyhcImJhbmRQYWRkaW5nXCIpO1xuICAgICAgfVxuICB9XG59IiwiLy8gUGFja2FnZSBvZiBkZWZpbmluZyBWZWdhbGl0ZSBTcGVjaWZpY2F0aW9uJ3MganNvbiBzY2hlbWFcbi8vXG52YXIgc2NoZW1hID0gbW9kdWxlLmV4cG9ydHMgPSB7fSxcbiAgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG5zY2hlbWEudXRpbCA9IHJlcXVpcmUoJy4vc2NoZW1hdXRpbCcpO1xuXG5zY2hlbWEubWFya3R5cGUgPSB7XG4gIHR5cGU6IFwic3RyaW5nXCIsXG4gIGVudW06IFtcInBvaW50XCIsIFwiYmFyXCIsIFwibGluZVwiLCBcImFyZWFcIiwgXCJjaXJjbGVcIiwgXCJzcXVhcmVcIiwgXCJ0ZXh0XCJdXG59O1xuXG5zY2hlbWEuYWdnciA9IHtcbiAgdHlwZTogXCJzdHJpbmdcIixcbiAgZW51bTogW1wiYXZnXCIsIFwic3VtXCIsIFwibWluXCIsIFwibWF4XCIsIFwiY291bnRcIl0sXG4gIHN1cHBvcnRlZEVudW1zOiB7XG4gICAgUTogW1wiYXZnXCIsIFwic3VtXCIsIFwibWluXCIsIFwibWF4XCIsIFwiY291bnRcIl0sXG4gICAgTzogW1wiY291bnRcIl0sXG4gICAgVDogW1wiYXZnXCIsIFwibWluXCIsIFwibWF4XCIsIFwiY291bnRcIl0sXG4gICAgXCJcIjogW1wiY291bnRcIl0sXG4gIH0sXG4gIHN1cHBvcnRlZFR5cGVzOiB7XCJRXCI6IHRydWUsIFwiT1wiOiB0cnVlLCBcIlRcIjogdHJ1ZSwgXCJcIjogdHJ1ZX1cbn07XG5cbnNjaGVtYS50aW1lZm5zID0gW1wibW9udGhcIiwgXCJ5ZWFyXCIsIFwiZGF5XCIsIFwiZGF0ZVwiLCBcImhvdXJcIiwgXCJtaW51dGVcIiwgXCJzZWNvbmRcIl07XG5cbnNjaGVtYS5mbiA9IHtcbiAgdHlwZTogXCJzdHJpbmdcIixcbiAgZW51bTogc2NoZW1hLnRpbWVmbnMsXG4gIHN1cHBvcnRlZFR5cGVzOiB7XCJUXCI6IHRydWV9XG59XG5cbi8vVE9ETyhrYW5pdHcpOiBhZGQgb3RoZXIgdHlwZSBvZiBmdW5jdGlvbiBoZXJlXG5cbnNjaGVtYS5zY2FsZV90eXBlID0ge1xuICB0eXBlOiBcInN0cmluZ1wiLFxuICBlbnVtOiBbXCJsaW5lYXJcIiwgXCJsb2dcIixcInBvd1wiLCBcInNxcnRcIiwgXCJxdWFudGlsZVwiXSxcbiAgZGVmYXVsdDogXCJsaW5lYXJcIixcbiAgc3VwcG9ydGVkVHlwZXM6IHtcIlFcIjogdHJ1ZX1cbn07XG5cbnNjaGVtYS5maWVsZCA9IHtcbiAgdHlwZTogXCJvYmplY3RcIixcbiAgcmVxdWlyZWQ6IFtcIm5hbWVcIiwgXCJ0eXBlXCJdLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIlxuICAgIH1cbiAgfVxufTtcblxudmFyIGNsb25lID0gdXRpbC5kdXBsaWNhdGU7XG52YXIgbWVyZ2UgPSBzY2hlbWEudXRpbC5tZXJnZTtcblxudmFyIHR5cGljYWxGaWVsZCA9IG1lcmdlKGNsb25lKHNjaGVtYS5maWVsZCksIHtcbiAgdHlwZTogXCJvYmplY3RcIixcbiAgcHJvcGVydGllczoge1xuICAgIHR5cGU6IHtcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbnVtOiBbXCJPXCIsIFwiUVwiLCBcIlRcIl1cbiAgICB9LFxuICAgIGJpbjoge1xuICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICBzdXBwb3J0ZWRUeXBlczoge1wiUVwiOiB0cnVlLCBcIk9cIjogdHJ1ZX1cbiAgICB9LFxuICAgIGFnZ3I6IHNjaGVtYS5hZ2dyLFxuICAgIGZuOiBzY2hlbWEuZm4sXG4gICAgc2NhbGU6IHtcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHR5cGU6IHNjaGVtYS5zY2FsZV90eXBlLFxuICAgICAgICByZXZlcnNlOiB7IHR5cGU6IFwiYm9vbGVhblwiLCBkZWZhdWx0OiBmYWxzZSB9LFxuICAgICAgICB6ZXJvOiB7XG4gICAgICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiSW5jbHVkZSB6ZXJvXCIsXG4gICAgICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAgICAgc3VwcG9ydGVkVHlwZXM6IHtcIlFcIjogdHJ1ZX1cbiAgICAgICAgfSxcbiAgICAgICAgbmljZToge1xuICAgICAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICAgICAgZW51bTogW1wic2Vjb25kXCIsIFwibWludXRlXCIsIFwiaG91clwiLCBcImRheVwiLCBcIndlZWtcIiwgXCJtb250aFwiLCBcInllYXJcIl0sXG4gICAgICAgICAgc3VwcG9ydGVkVHlwZXM6IHtcIlRcIjogdHJ1ZX1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5cbnZhciBvbmx5T3JkaW5hbEZpZWxkID0gbWVyZ2UoY2xvbmUoc2NoZW1hLmZpZWxkKSwge1xuICB0eXBlOiBcIm9iamVjdFwiLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgdHlwZToge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVudW06IFtcIk9cIl1cbiAgICB9LFxuICAgIGJpbjoge1xuICAgICAgdHlwZTogXCJib29sZWFuXCIsXG4gICAgICBzdXBwb3J0ZWRUeXBlczoge1wiT1wiOiB0cnVlfVxuICAgIH0sXG4gICAgYWdncjoge1xuICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgIGVudW06IFtcImNvdW50XCJdLFxuICAgICAgc3VwcG9ydGVkVHlwZXM6IHtcIk9cIjogdHJ1ZX1cbiAgICB9XG4gIH1cbn0pO1xuXG52YXIgYXhpc01peGluID0ge1xuICB0eXBlOiBcIm9iamVjdFwiLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgYXhpczoge1xuICAgICAgdHlwZTogXCJvYmplY3RcIixcbiAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgZ3JpZDogeyB0eXBlOiBcImJvb2xlYW5cIiwgZGVmYXVsdDogZmFsc2UgfSxcbiAgICAgICAgdGl0bGU6IHsgdHlwZTogXCJib29sZWFuXCIsIGRlZmF1bHQ6IHRydWUgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgbGVnZW5kTWl4aW4gPSB7XG4gIHR5cGU6IFwib2JqZWN0XCIsXG4gIHByb3BlcnRpZXM6IHtcbiAgICBsZWdlbmQ6IHsgdHlwZTogXCJib29sZWFuXCIsIGRlZmF1bHQ6IHRydWUgfVxuICB9XG59XG5cbnZhciB0ZXh0TWl4aW4gPSB7XG4gIHR5cGU6IFwib2JqZWN0XCIsXG4gIHByb3BlcnRpZXM6IHtcbiAgICB0ZXh0OiB7XG4gICAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgICAgcHJvcGVydGllczoge1xuICAgICAgICB3ZWlnaHQ6IHtcbiAgICAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgICAgICAgIGVudW06IFtcIm5vcm1hbFwiLCBcImJvbGRcIl0sXG4gICAgICAgICAgZGVmYXVsdDogXCJub3JtYWxcIixcbiAgICAgICAgICBzdXBwb3J0ZWRUeXBlczoge1wiVFwiOiB0cnVlfVxuICAgICAgICB9LFxuICAgICAgICBzaXplOiB7XG4gICAgICAgICAgdHlwZTogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgZGVmYXVsdDogMTAsXG4gICAgICAgICAgbWluaW11bTogMCxcbiAgICAgICAgICBzdXBwb3J0ZWRUeXBlczoge1wiVFwiOiB0cnVlfVxuICAgICAgICB9LFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICAgICAgICBkZWZhdWx0OiBcIkhhbHZldGljYSBOZXVlXCIsXG4gICAgICAgICAgc3VwcG9ydGVkVHlwZXM6IHtcIlRcIjogdHJ1ZX1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgeCA9IG1lcmdlKGNsb25lKHR5cGljYWxGaWVsZCksIGF4aXNNaXhpbik7XG52YXIgeSA9IGNsb25lKHgpO1xuXG52YXIgcm93ID0gY2xvbmUob25seU9yZGluYWxGaWVsZCk7XG52YXIgY29sID0gY2xvbmUocm93KTtcblxudmFyIHNpemUgPSBtZXJnZShjbG9uZSh0eXBpY2FsRmllbGQpLCBsZWdlbmRNaXhpbik7XG52YXIgY29sb3IgPSBtZXJnZShjbG9uZSh0eXBpY2FsRmllbGQpLCBsZWdlbmRNaXhpbik7XG52YXIgYWxwaGEgPSBjbG9uZSh0eXBpY2FsRmllbGQpO1xudmFyIHNoYXBlID0gbWVyZ2UoY2xvbmUob25seU9yZGluYWxGaWVsZCksIGxlZ2VuZE1peGluKTtcblxudmFyIHRleHQgPSBtZXJnZShjbG9uZSh0eXBpY2FsRmllbGQpLCB0ZXh0TWl4aW4pO1xuXG52YXIgY2ZnID0ge1xuICB0eXBlOiBcIm9iamVjdFwiLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgZGF0YUZvcm1hdFR5cGU6IHtcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBlbnVtOiBbXCJqc29uXCIsIFwiY3N2XCJdXG4gICAgfSxcbiAgICB1c2VWZWdhU2VydmVyOiB7XG4gICAgICB0eXBlOiBcImJvb2xlYW5cIixcbiAgICAgIGRlZmF1bHQ6IGZhbHNlXG4gICAgfSxcbiAgICBkYXRhVXJsOiB7XG4gICAgICB0eXBlOiBcInN0cmluZ1wiXG4gICAgfSxcbiAgICB2ZWdhU2VydmVyVGFibGU6IHtcbiAgICAgIHR5cGU6IFwic3RyaW5nXCJcbiAgICB9LFxuICAgIHZlZ2FTZXJ2ZXJVcmw6IHtcbiAgICAgIHR5cGU6IFwic3RyaW5nXCIsXG4gICAgICBkZWZhdWx0OiBcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMVwiXG4gICAgfVxuICB9XG59XG5cbi8qKiBAdHlwZSBPYmplY3QgU2NoZW1hIG9mIGEgdmVnYWxpdGUgc3BlY2lmaWNhdGlvbiAqL1xuc2NoZW1hLnNjaGVtYSA9IHtcbiAgJHNjaGVtYTogXCJodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA0L3NjaGVtYSNcIixcbiAgdHlwZTogXCJvYmplY3RcIixcbiAgcmVxdWlyZWQ6IFtcIm1hcmt0eXBlXCIsIFwiZW5jXCIsIFwiY2ZnXCJdLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgbWFya3R5cGU6IHNjaGVtYS5tYXJrdHlwZSxcbiAgICBlbmM6IHtcbiAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHg6IHgsXG4gICAgICAgIHk6IHksXG4gICAgICAgIHJvdzogcm93LFxuICAgICAgICBjb2w6IGNvbCxcbiAgICAgICAgc2l6ZTogc2l6ZSxcbiAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICBhbHBoYTogYWxwaGEsXG4gICAgICAgIHNoYXBlOiBzaGFwZSxcbiAgICAgICAgdGV4dDogdGV4dFxuICAgICAgfVxuICAgIH0sXG4gICAgY2ZnOiBjZmdcbiAgfVxufTtcblxuLyoqIEluc3RhbnRpYXRlIGEgdmVyYm9zZSB2bCBzcGVjIGZyb20gdGhlIHNjaGVtYSAqL1xuc2NoZW1hLmluc3RhbnRpYXRlID0gZnVuY3Rpb24oKXtcbiAgcmV0dXJuIHNjaGVtYS51dGlsLmluc3RhbnRpYXRlKHNjaGVtYS5zY2hlbWEpO1xufVxuIiwidmFyIHV0aWwgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG52YXIgaXNFbXB0eSA9IGZ1bmN0aW9uKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDBcbn1cblxuLy8gaW5zdGFudGlhdGUgYSBzY2hlbWFcbnV0aWwuaW5zdGFudGlhdGUgPSBmdW5jdGlvbihzY2hlbWEsIHJlcXVpcmVkKSB7XG4gIGlmIChzY2hlbWEudHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICBzY2hlbWEucmVxdWlyZWQgPSBzY2hlbWEucmVxdWlyZWQgPyBzY2hlbWEucmVxdWlyZWQgOiBbXTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7fTtcbiAgICBmb3IgKHZhciBuYW1lIGluIHNjaGVtYS5wcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgY2hpbGQgPSBzY2hlbWEucHJvcGVydGllc1tuYW1lXTtcbiAgICAgIGluc3RhbmNlW25hbWVdID0gdXRpbC5pbnN0YW50aWF0ZShjaGlsZCwgc2NoZW1hLnJlcXVpcmVkLmluZGV4T2YobmFtZSkgIT0gLTEpO1xuICAgIH07XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2UgaWYgKCdkZWZhdWx0JyBpbiBzY2hlbWEpIHtcbiAgICByZXR1cm4gc2NoZW1hLmRlZmF1bHQ7XG4gIH0gZWxzZSBpZiAoc2NoZW1hLmVudW0gJiYgcmVxdWlyZWQpIHtcbiAgICByZXR1cm4gc2NoZW1hLmVudW1bMF07XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn07XG5cbi8vIHJlbW92ZSBhbGwgZGVmYXVsdHMgZnJvbSBhbiBpbnN0YW5jZVxudXRpbC5kaWZmZXJlbmNlID0gZnVuY3Rpb24oZGVmYXVsdHMsIGluc3RhbmNlKSB7XG4gIHZhciBjaGFuZ2VzID0ge307XG4gIGZvciAodmFyIHByb3AgaW4gaW5zdGFuY2UpIHtcbiAgICBpZiAoIWRlZmF1bHRzIHx8IGRlZmF1bHRzW3Byb3BdICE9PSBpbnN0YW5jZVtwcm9wXSkge1xuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZVtwcm9wXSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHZhciBjID0gdXRpbC5kaWZmZXJlbmNlKGRlZmF1bHRzW3Byb3BdLCBpbnN0YW5jZVtwcm9wXSk7XG4gICAgICAgIGlmICghaXNFbXB0eShjKSlcbiAgICAgICAgICBjaGFuZ2VzW3Byb3BdID0gYztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZXNbcHJvcF0gPSBpbnN0YW5jZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoYW5nZXM7XG59O1xuXG4vLyByZWN1cnNpdmVseSBtZXJnZXMgaW5zdGFuY2UgaW50byBkZWZhdWx0c1xudXRpbC5tZXJnZSA9IGZ1bmN0aW9uIChkZWZhdWx0cywgaW5zdGFuY2UpIHtcbiAgaWYgKHR5cGVvZiBpbnN0YW5jZSE9PSdvYmplY3QnIHx8IGluc3RhbmNlPT09bnVsbCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuXG4gIGZvciAodmFyIHAgaW4gaW5zdGFuY2UpIHtcbiAgICBpZiAoIWluc3RhbmNlLmhhc093blByb3BlcnR5KHApKVxuICAgICAgY29udGludWU7XG4gICAgaWYgKGluc3RhbmNlW3BdPT09dW5kZWZpbmVkIClcbiAgICAgIGNvbnRpbnVlO1xuICAgIGlmICh0eXBlb2YgaW5zdGFuY2VbcF0gIT09ICdvYmplY3QnIHx8IGluc3RhbmNlW3BdID09PSBudWxsKSB7XG4gICAgICBkZWZhdWx0c1twXSA9IGluc3RhbmNlW3BdO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZmF1bHRzW3BdICE9PSAnb2JqZWN0JyB8fCBkZWZhdWx0c1twXSA9PT0gbnVsbCkge1xuICAgICAgZGVmYXVsdHNbcF0gPSB1dGlsLm1lcmdlKGluc3RhbmNlW3BdLmNvbnN0cnVjdG9yID09PSBBcnJheSA/IFtdIDoge30sIGluc3RhbmNlW3BdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXRpbC5tZXJnZShkZWZhdWx0c1twXSwgaW5zdGFuY2VbcF0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHM7XG59XG4iLCJ2YXIgdXRpbCA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbnV0aWwua2V5cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIGsgPSBbXSwgeDtcbiAgZm9yICh4IGluIG9iaikgay5wdXNoKHgpO1xuICByZXR1cm4gaztcbn1cblxudXRpbC52YWxzID0gZnVuY3Rpb24gKG9iaikge1xuICB2YXIgdiA9IFtdLCB4O1xuICBmb3IgKHggaW4gb2JqKSB2LnB1c2gob2JqW3hdKTtcbiAgcmV0dXJuIHY7XG59XG5cbnV0aWwucmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAzKSB7XG4gICAgc3RlcCA9IDE7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICBzdG9wID0gc3RhcnQ7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICB9XG4gIGlmICgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXAgPT0gSW5maW5pdHkpIHRocm93IG5ldyBFcnJvcihcImluZmluaXRlIHJhbmdlXCIpO1xuICB2YXIgcmFuZ2UgPSBbXSwgaSA9IC0xLCBqO1xuICBpZiAoc3RlcCA8IDApIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPiBzdG9wKSByYW5nZS5wdXNoKGopO1xuICBlbHNlIHdoaWxlICgoaiA9IHN0YXJ0ICsgc3RlcCAqICsraSkgPCBzdG9wKSByYW5nZS5wdXNoKGopO1xuICByZXR1cm4gcmFuZ2U7XG59XG5cbnV0aWwuZmluZCA9IGZ1bmN0aW9uIChsaXN0LCBwYXR0ZXJuKSB7XG4gIHZhciBsID0gbGlzdC5maWx0ZXIoZnVuY3Rpb24oeCkge1xuICAgIHJldHVybiB4W3BhdHRlcm4ubmFtZV0gPT09IHBhdHRlcm4udmFsdWU7XG4gIH0pO1xuICByZXR1cm4gbC5sZW5ndGggJiYgbFswXSB8fCBudWxsO1xufVxuXG51dGlsLnVuaXEgPSBmdW5jdGlvbiAoZGF0YSwgZmllbGQpIHtcbiAgdmFyIG1hcCA9IHt9LCBjb3VudCA9IDAsIGksIGs7XG4gIGZvciAoaT0wOyBpPGRhdGEubGVuZ3RoOyArK2kpIHtcbiAgICBrID0gZGF0YVtpXVtmaWVsZF07XG4gICAgaWYgKCFtYXBba10pIHtcbiAgICAgIG1hcFtrXSA9IDE7XG4gICAgICBjb3VudCArPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY291bnQ7XG59XG5cbnV0aWwubWlubWF4ID0gZnVuY3Rpb24gKGRhdGEsIGZpZWxkKSB7XG4gIHZhciBzdGF0cyA9IHttaW46ICtJbmZpbml0eSwgbWF4OiAtSW5maW5pdHl9O1xuICBmb3IgKGk9MDsgaTxkYXRhLmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHYgPSBkYXRhW2ldW2ZpZWxkXTtcbiAgICBpZiAodiA+IHN0YXRzLm1heCkgc3RhdHMubWF4ID0gdjtcbiAgICBpZiAodiA8IHN0YXRzLm1pbikgc3RhdHMubWluID0gdjtcbiAgfVxuICByZXR1cm4gc3RhdHM7XG59XG5cbnV0aWwuZHVwbGljYXRlID0gZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvYmopKTtcbn07XG5cbnV0aWwuYW55ID0gZnVuY3Rpb24oYXJyLCBmKXtcbiAgdmFyIGk9MCwgaztcbiAgZm9yIChrIGluIGFycikge1xuICAgIGlmKGYoYXJyW2tdLCBrLCBpKyspKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbnV0aWwuYWxsID0gZnVuY3Rpb24oYXJyLCBmKXtcbiAgdmFyIGk9MCwgaztcbiAgZm9yIChrIGluIGFycikge1xuICAgIGlmKCFmKGFycltrXSwgaywgaSsrKSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG51dGlsLm1lcmdlID0gZnVuY3Rpb24oZGVzdCwgc3JjKXtcbiAgcmV0dXJuIHV0aWwua2V5cyhzcmMpLnJlZHVjZShmdW5jdGlvbihjLCBrKXtcbiAgICBjW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiBjO1xuICB9LCBkZXN0KTtcbn07XG5cbnV0aWwuZ2V0YmlucyA9IGZ1bmN0aW9uIChzdGF0cykge1xuICByZXR1cm4gdmcuYmlucyh7XG4gICAgbWluOiBzdGF0cy5taW4sXG4gICAgbWF4OiBzdGF0cy5tYXgsXG4gICAgbWF4YmluczogTUFYX0JJTlNcbiAgfSk7XG59XG5cblxudXRpbC5lcnJvciA9IGZ1bmN0aW9uKG1zZyl7XG4gIGNvbnNvbGUuZXJyb3IoXCJbVkwgRXJyb3JdXCIsIG1zZyk7XG59XG5cbiJdfQ==\n","\"use strict\";\n\nvar global = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  schema = require('./schema');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config) {\n    this._marktype = marktype;\n    this._enc = enc; // {encType1:field1, ...}\n    this._cfg = util.merge(Object.create(consts.DEFAULTS), config);\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(x) {\n    return this._enc[x] !== undefined;\n  };\n\n  proto.enc = function(x){\n    return this._enc[x];\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? \"\" : \"data.\");\n\n    if (this._enc[x].aggr === \"count\") {\n      return f + \"count\";\n    } else if (!nofn && this._enc[x].bin) {\n      return f + \"bin_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + \"_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn){\n      return f + this._enc[x].fn + \"_\" + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x){\n    return this._enc[x].name;\n  }\n\n  proto.fieldTitle = function(x){\n    if (this._enc[x].aggr) {\n      return this._enc[x].aggr + \"(\" + this._enc[x].name + \")\";\n    } else {\n      return this._enc[x].name;\n    }\n  }\n\n  proto.scale = function(x){\n    return this._enc[x].scale || {};\n  }\n\n  proto.axis = function(x){\n    return this._enc[x].axis || {};\n  }\n\n  proto.aggr = function(x){\n    return this._enc[x].aggr;\n  }\n\n  proto.bin = function(x){\n    return this._enc[x].bin;\n  }\n\n  proto.legend = function(x){\n    return this._enc[x].legend;\n  }\n\n  proto.fn = function(x){\n    return this._enc[x].fn;\n  }\n\n  proto.any = function(f){\n    return util.any(this._enc, f);\n  }\n\n  proto.all = function(f){\n    return util.all(this._enc, f);\n  }\n\n  proto.length = function(){\n    return util.keys(this._enc).length;\n  }\n\n  proto.reduce = function(f, init){\n    var r = init, i=0;\n    for (k in this._enc){\n      r = f(r, this._enc[k], k, this._enc);\n    }\n    return r;\n  }\n\n  proto.forEach = function(f) {\n    var i=0, k;\n    for (k in this._enc) {\n      f(k, this._enc[k], i++);\n    }\n  };\n\n  proto.type = function(x) {\n    return this.has(x) ? this._enc[x].type : null;\n  };\n\n  proto.isType = function(x, t) {\n    var xt = this.type(x);\n    if (xt == null) return false;\n    return (xt & t) > 0;\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig){\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for(var e in enc){\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc\n    }\n\n    if(!excludeConfig){\n      spec.cfg = util.duplicate(this._cfg)\n    }\n\n    return spec;\n  };\n\n  proto.toShorthand = function(){\n    var enc = this._enc;\n    return this._marktype + \".\" + util.keys(enc).map(function(e){\n      var v = enc[e];\n        return e + \"-\" +\n          (v.aggr ? v.aggr+\"_\" : \"\") +\n          (v.fn ? v.fn+\"_\" : \"\") +\n          (v.bin ? \"bin_\" : \"\") +\n          (v.name || \"\") + \"-\" +\n          consts.dataTypeNames[v.type];\n      }\n    ).join(\".\");\n  }\n\n  Encoding.parseShorthand = function(shorthand, cfg){\n    var enc = shorthand.split(\".\"),\n      marktype = enc.shift();\n\n    enc = enc.reduce(function(m, e){\n      var split = e.split(\"-\"),\n        enctype = split[0],\n        o = {name: split[1], type: consts.dataTypes[split[2]]};\n\n      // check aggregate type\n      for(var i in schema.aggr.enum){\n        var a = schema.aggr.enum[i];\n        if(o.name.indexOf(a+\"_\") == 0){\n          o.name = o.name.substr(a.length+1);\n          if (a==\"count\" && o.name.length === 0) o.name = \"*\";\n          o.aggr = a;\n          break;\n        }\n      }\n      // check time fn\n      for(var i in schema.timefns){\n        var f = schema.timefns[i];\n        if(o.name && o.name.indexOf(f+\"_\") == 0){\n          o.name = o.name.substr(o.length+1);\n          o.fn = f;\n          break;\n        }\n      }\n\n      // check bin\n      if(o.name && o.name.indexOf(\"bin_\") == 0){\n        o.name = o.name.substr(4);\n        o.bin = true;\n      }\n\n      m[enctype] = o;\n      return m;\n    }, {});\n\n    return new Encoding(marktype, enc, cfg);\n  }\n\n  Encoding.fromSpec = function(spec, extraCfg) {\n    var enc = util.duplicate(spec.enc);\n\n    //convert type from string to bitcode (e.g, O=1)\n    for(var e in enc){\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, util.merge(spec.cfg, extraCfg || {}));\n  }\n\n  return Encoding;\n\n})();\n","var globals = require('./globals'),\n  util = require('./util');\n\nvar axis = module.exports = {};\n\naxis.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s===X || s===Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n}\n\naxis.defs = function(names, encoding, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis_def(name, encoding, opt));\n    return a;\n  }, []);\n}\n\nfunction axis_def(name, encoding, opt){\n  var type = name, axis;\n  var isCol = name==COL, isRow = name==ROW;\n  if(isCol) type = \"x\";\n  if(isRow) type = \"y\";\n\n  var axis = {\n    type: type,\n    scale: name,\n    ticks: 3 //TODO(kanitw): better determine # of ticks\n  };\n\n  if (encoding.axis(name).grid) {\n    axis.grid = true;\n    axis.layer = \"back\";\n  }\n\n  if (encoding.axis(name).title) {\n    //show title by default\n\n    axis = axis_title(axis, name, encoding, opt);\n  }\n\n  if(isRow || isCol){\n    axis.properties = {\n      ticks: { opacity: {value: 0} },\n      majorTicks: { opacity: {value: 0} },\n      axis: { opacity: {value: 0} }\n    };\n  }\n  if(isCol){\n    axis.offset = [opt.xAxisMargin || 0, encoding.config(\"yAxisMargin\")];\n    axis.orient = \"top\";\n  }\n\n  if (name==\"x\" && (encoding.isType(name, O) || encoding.bin(name))) {\n    axis.properties = {\n      labels: {\n        angle: {value: 270},\n        align: {value: \"right\"},\n        baseline: {value: \"middle\"}\n      }\n    }\n  }\n\n  return axis;\n}\n\nfunction axis_title(axis, name, encoding, opt){\n  axis.title = encoding.fieldTitle(name);\n  if(name==Y){\n    axis.titleOffset = 60;\n    // TODO: set appropriate titleOffset\n    // maybe based on some string length from stats\n  }\n  return axis;\n}\n","var globals = require('./globals'),\n  util = require('./util'),\n  axis = require('./axis'),\n  legends = require('./legends'),\n  marks = require('./marks'),\n  scale = require('./scale');\n\nvar compile = module.exports = function(encoding, stats) {\n  var size = setSize(encoding, stats),\n    cellWidth = size.cellWidth,\n    cellHeight = size.cellHeight;\n\n  var hasAgg = encoding.any(function(v, k){\n    return v.aggr !== undefined;\n  });\n\n  var spec = template(encoding, size, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdef = markdef(mark, encoding, {\n      hasAggregate: hasAgg\n    });\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  group.marks.push(mdef);\n  // TODO: return value not used\n  binning(spec.data[0], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if(!preaggregatedData){\n    encoding.forEach(function(encType, field){\n      if(field.type === T && field.fn){\n        timeTransform(spec.data[0], encoding, encType, field);\n      }\n    });\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec.data[0], encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isType(X, Q | T) && encoding.isType(Y, O)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    mdef.from.transform = [{type: \"sort\", by: encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding);\n    group.legends = legends.defs(encoding);\n  }\n  return spec;\n};\n\nfunction getCardinality(encoding, encType, stats){\n  var field = encoding.fieldName(encType);\n  if (encoding.bin(encType)) {\n    var bins = util.getbins(stats[field]);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  return stats[field].cardinality;\n}\n\nfunction setSize(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y);\n\n  // HACK to set chart size\n  // NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  // One solution is to update Vega to support auto-sizing\n  // In the meantime, auto-padding (mostly) does the trick\n  //\n  var colCardinality = hasCol ? getCardinality(encoding, COL, stats) : 1,\n    rowCardinality = hasRow ? getCardinality(encoding, ROW, stats) : 1;\n\n  var cellWidth = hasX ?\n      +encoding.config(\"cellWidth\") || encoding.config(\"width\") * 1.0 / colCardinality :\n      encoding.marktype() === \"text\" ?\n        +encoding.config(\"textCellWidth\") :\n        +encoding.config(\"bandSize\"),\n    cellHeight = hasY ?\n      +encoding.config(\"cellHeight\") || encoding.config(\"height\") * 1.0 / rowCardinality :\n      +encoding.config(\"bandSize\"),\n    cellPadding = encoding.config(\"cellPadding\"),\n    bandPadding = encoding.config(\"bandPadding\"),\n    width = encoding.config(\"_minWidth\"),\n    height = encoding.config(\"_minHeight\");\n\n  if (hasX && (encoding.isType(X, O) || encoding.bin(X))) { //ordinal field will override parent\n    // bands within cell use rangePoints()\n    var xCardinality = getCardinality(encoding, X, stats);\n    cellWidth = (xCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  width = cellWidth * ((1 + cellPadding) * (colCardinality-1) + 1);\n\n  if (hasY && (encoding.isType(Y, O) || encoding.bin(Y))) {\n    // bands within cell use rangePoint()\n    var yCardinality = getCardinality(encoding, Y, stats);\n    cellHeight = (yCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  height = cellHeight * ((1 + cellPadding) * (rowCardinality-1) + 1);\n\n  return {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    width: width,\n    height:height\n  };\n}\n\nfunction facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats) {\n    var enter = group.properties.enter;\n    var facetKeys = [], cellAxes = [];\n\n    var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n    var xAxisMargin = encoding.has(Y) ? encoding.config(\"xAxisMargin\") : undefined;\n\n    enter.fill = {value: encoding.config(\"cellBackgroundColor\")};\n\n    //move \"from\" to cell level and add facet transform\n    group.from = {data: group.marks[0].from.data};\n\n    if (group.marks[0].from.transform) {\n      delete group.marks[0].from.data; //need to keep transform for subfacetting case\n    } else {\n      delete group.marks[0].from;\n    }\n    if (hasRow) {\n      if (!encoding.isType(ROW, O)) {\n        util.error(\"Row encoding should be ordinal.\");\n      }\n      enter.y = {scale: ROW, field: \"keys.\" + facetKeys.length};\n      enter.height = {\"value\": cellHeight}; // HACK\n\n      facetKeys.push(encoding.field(ROW));\n\n      var from;\n      if (hasCol) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(COL)]});\n      }\n\n      var axesGrp = groupdef(\"x-axes\", {\n          axes: encoding.has(X) ?  axis.defs([\"x\"], encoding) : undefined,\n          x: hasCol ? {scale: COL, field: \"keys.0\", offset: xAxisMargin} : {value: xAxisMargin},\n          width: hasCol && {\"value\": cellWidth}, //HACK?\n          from: from\n        });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || []);\n      spec.axes.push.apply(spec.axes, axis.defs([\"row\"], encoding));\n    } else { // doesn't have row\n      if(encoding.has(X)){\n        //keep x axis in the cell\n        cellAxes.push.apply(cellAxes, axis.defs([\"x\"], encoding));\n      }\n    }\n\n    if (hasCol) {\n      if (!encoding.isType(COL, O)) {\n        util.error(\"Col encoding should be ordinal.\");\n      }\n      enter.x = {scale: COL, field: \"keys.\" + facetKeys.length};\n      enter.width = {\"value\": cellWidth}; // HACK\n\n      facetKeys.push(encoding.field(COL));\n\n      var from;\n      if (hasRow) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(ROW)]});\n      }\n\n      var axesGrp = groupdef(\"y-axes\", {\n        axes: encoding.has(Y) ? axis.defs([\"y\"], encoding) : undefined,\n        y: hasRow && {scale: ROW, field: \"keys.0\"},\n        x: hasRow && {value: xAxisMargin},\n        height: hasRow && {\"value\": cellHeight}, //HACK?\n        from: from\n      });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || [])\n      spec.axes.push.apply(spec.axes, axis.defs([\"col\"], encoding, {\n        xAxisMargin: xAxisMargin\n      }));\n    } else { // doesn't have col\n      if(encoding.has(Y)){\n        cellAxes.push.apply(cellAxes, axis.defs([\"y\"], encoding));\n      }\n    }\n\n    if(hasRow){\n      if(enter.x) enter.x.offset= xAxisMargin;\n      else enter.x = {value: xAxisMargin};\n    }\n    if(hasCol){\n      //TODO fill here..\n    }\n\n    // assuming equal cellWidth here\n    // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n    spec.scales = (spec.scales ||[]).concat(scale.defs(\n      scale.names(enter).concat(scale.names(mdef.properties.update)),\n      encoding,\n      {cellWidth: cellWidth, cellHeight: cellHeight, stack: stack, facet:true, stats: stats}\n    )); // row/col scales + cell scales\n\n    if (cellAxes.length > 0) {\n      group.axes = cellAxes;\n    }\n\n    // add facet transform\n    var trans = (group.from.transform || (group.from.transform = []));\n    trans.unshift({type: \"facet\", keys: facetKeys});\n\n  return spec;\n  }\n\nfunction subfacet(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef(\"subfacet\", {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: \"facet\", keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: \"sort\", by: encoding.field(COLOR)});\n  }\n}\n\nfunction getTimeFn(fn){\n  switch(fn){\n    case \"second\": return \"getUTCSeconds\";\n    case \"minute\": return \"getUTCMinutes\";\n    case \"hour\": return \"getUTCHours\";\n    case \"day\": return \"getUTCDay\";\n    case \"date\": return \"getUTCDate\";\n    case \"month\": return \"getUTCMonth\";\n    case \"year\": return \"getUTCFullYear\";\n  }\n  console.error(\"no function specified for date\");\n}\n\nfunction timeTransform(spec, encoding, encType, field){\n  var func = getTimeFn(field.fn);\n\n  spec.transform = spec.transform || [];\n  spec.transform.push({\n    type: \"formula\",\n    field: encoding.field(encType),\n    expr: \"new Date(d.data.\"+field.name+\").\"+func+\"()\"\n  });\n  return spec;\n}\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n  encoding.forEach(function(vv, d) {\n    if (d.bin) bins[d.name] = d.name;\n  });\n  bins = util.keys(bins);\n\n  if (bins.length === 0 || opt.preaggregatedData) return false;\n\n  if (!spec.transform) spec.transform = [];\n  bins.forEach(function(d) {\n    spec.transform.push({\n      type: \"bin\",\n      field: \"data.\" + d,\n      output: \"data.bin_\" + d,\n      maxbins: MAX_BINS\n    });\n  });\n  return bins;\n}\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n  var dims = {}, meas = {}, detail = {}, facets={};\n  encoding.forEach(function(encType, field) {\n    if (field.aggr) {\n      if(field.aggr===\"count\"){\n        meas[\"count\"] = {op:\"count\", field:\"*\"};\n      }else{\n        meas[field.aggr+\"|\"+field.name] = {\n          op:field.aggr,\n          field:\"data.\"+field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType==ROW || encType == COL){\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!spec.transform) spec.transform = [];\n    spec.transform.push({\n      type: \"aggregate\",\n      groupby: dims,\n      fields: meas\n    });\n\n    if (encoding.marktype() === TEXT) {\n      meas.forEach( function (m) {\n        var fieldName = m.field.substr(5), //remove \"data.\"\n          field = \"data.\" + (m.op ? m.op + \"_\" : \"\") + fieldName;\n        spec.transform.push({\n          type: \"formula\",\n          field: field,\n          expr: \"d3.format('.2f')(d.\"+field+\")\"\n        });\n      });\n    }\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  }\n}\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n  if (!encoding.has(COLOR)) return false;\n\n  var dim = X, val = Y, idx = 1;\n  if (encoding.isType(X,Q|T) && !encoding.isType(Y,Q|T) && encoding.has(Y)) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: \"aggregate\",\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: \"sum\", field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if(facets && facets.length > 0){\n    stacked.transform.push({ //calculate max for each facet\n      type: \"aggregate\",\n      groupby: facets,\n      fields: [{op: \"max\", field: \"data.sum_\" + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: \"stack\",\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val+\"2\"}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val+\"2\"] = mdef.properties.enter[val+\"2\"] = {scale: val, field: val+\"2\"};\n\n  return val; //return stack encoding\n}\n\n\nfunction markdef(mark, encoding, opt) {\n  var p = mark.prop(encoding, opt)\n  return {\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  };\n}\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: \"group\",\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: \"width\"},\n        height: opt.height || {group: \"height\"}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\nfunction template(encoding, size, stats) { //hack use stats\n\n  var data = {name:TABLE, format: {type: encoding.config(\"dataFormatType\")}},\n    dataUrl = vl.data.getUrl(encoding, stats);\n  if(dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  encoding.forEach(function(encType, field){\n    if(field.type == T){\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = \"date\";\n    }else if(field.type == Q){\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === \"count\") {\n        var name = \"count\";\n      } else if(preaggregatedData && field.bin){\n        var name = \"bin_\" + field.name;\n      } else if(preaggregatedData && field.aggr){\n        var name = field.aggr + \"_\" + field.name;\n      } else{\n        var name = field.name;\n      }\n      data.format.parse[name] = \"number\";\n    }\n  });\n\n  return {\n    width: size.width,\n    height: size.height,\n    padding: \"auto\",\n    data: [data],\n    marks: [groupdef(\"cell\", {\n      width: size.cellWidth ? {value: size.cellWidth}: undefined,\n      height: size.cellHeight ? {value: size.cellHeight} : undefined\n    })]\n  };\n}\n","var globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT];\n\nconsts.dataTypes = {\"O\": O, \"Q\": Q, \"T\": T};\n\nconsts.dataTypeNames = [\"O\",\"Q\",\"T\"].reduce(function(r,x) {\n  r[consts.dataTypes[x]] = x; return r;\n},{});\n\nconsts.DEFAULTS = {\n  // template\n  width: undefined,\n  height: undefined,\n  viewport: undefined,\n  _minWidth: 20,\n  _minHeight: 20,\n\n  // data source\n  dataUrl: undefined, //for easier export\n  useVegaServer: false,\n  vegaServerUrl: \"http://localhost:3001\",\n  vegaServerTable: undefined,\n  dataFormatType: \"json\",\n\n  //small multiples\n  cellHeight: 200, // will be overwritten by bandWidth\n  cellWidth: 200, // will be overwritten by bandWidth\n  cellPadding: 0.1,\n  cellBackgroundColor: \"#fdfdfd\",\n  xAxisMargin: 80,\n  yAxisMargin: 0,\n  textCellWidth: 90,\n\n  // marks\n  bandSize: 21,\n  bandPadding: 1,\n  pointSize: 50,\n  pointShape: \"circle\",\n  strokeWidth: 2,\n  color: \"steelblue\",\n  textColor: \"black\",\n  textAlign: \"left\",\n  textBaseline: \"middle\",\n  textMargin: 4,\n  font: \"Helvetica Neue\",\n  fontSize: \"12\",\n  fontWeight: \"normal\",\n  fontStyle: \"normal\",\n  opacity: 1,\n  _thickOpacity: 0.5,\n  _thinOpacity: 0.2,\n\n  // scales\n  // TODO remove _xZero, ...\n  _xZero: true,\n  _xReverse: false,\n  _yZero: true,\n  _yReverse: false,\n  timeScaleNice: \"day\"\n};","// TODO rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar data = module.exports = {};\n\ndata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config(\"useVegaServer\")) {\n    // don't use vega server\n    return encoding.config(\"dataUrl\");\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = []\n  encoding.forEach(function(encType, field){\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    }\n    if (field.aggr) {\n      obj.aggr = field.aggr\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name]).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config(\"vegaServerTable\"),\n    fields: fields\n  }\n\n  return encoding.config(\"vegaServerUrl\") + \"/query/?q=\" + JSON.stringify(query)\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\ndata.getSchema = function(data){\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k){\n    // find non-null data\n    var i=0, datum = data[i][k];\n    while(datum === \"\" || datum === null || datum === undefined){\n      datum = data[++i][k];\n    }\n\n    //TODO(kanitw): better type inference here\n    var type = (typeof datum === \"number\") ? \"number\" :\n      isNaN(Date.parse(datum)) ? \"text\" : \"time\";\n\n    schema.push({name: k, type: type});\n  });\n\n  return schema;\n};\n\ndata.getStats = function(data){ // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var stat = util.minmax(data, k);\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n    stats[k] = stat;\n  });\n  return stats;\n};\n","// declare global constant\nvar g = global || window;\n\ng.TABLE = \"table\";\ng.STACKED = \"stacked\";\ng.INDEX = \"index\";\n\ng.X = \"x\";\ng.Y = \"y\";\ng.ROW = \"row\";\ng.COL = \"col\";\ng.SIZE = \"size\";\ng.SHAPE = \"shape\";\ng.COLOR = \"color\";\ng.ALPHA = \"alpha\";\ng.TEXT = \"text\";\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n//TODO refactor this to be config?\ng.MAX_BINS = 20;","var global = require('./globals');\n\nvar legends = module.exports = {};\n\nlegends.defs = function(encoding) {\n  var legends = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    legends.push({\n      fill: COLOR,\n      title: encoding.fieldTitle(COLOR),\n      orient: \"right\"\n    });\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    legends.push({\n      size: SIZE,\n      title: encoding.fieldTitle(SIZE),\n      orient: legends.length === 1 ? \"left\" : \"right\"\n    });\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (legends.length === 2) {\n      // TODO: fix this\n      console.error(\"Vegalite currently only supports two legends\");\n      return legends;\n    }\n    legends.push({\n      shape: SHAPE,\n      title: encoding.fieldTitle(SHAPE),\n      orient: legends.length === 1 ? \"left\" : \"right\"\n    });\n  }\n\n  return legends;\n}","var globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar marks = module.exports = {};\n\nmarks.bar = {\n  type: \"rect\",\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.line = {\n  type: \"line\",\n  line: true,\n  prop: line_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, color:1, alpha:1}\n};\n\nmarks.area = {\n  type: \"area\",\n  stack: true,\n  line: true,\n  requiredEncoding: [\"x\", \"y\"],\n  prop: area_props,\n  supportedEncoding: marks.line.supportedEncoding\n};\n\nmarks.circle = {\n  type: \"symbol\",\n  prop: filled_point_props(\"circle\"),\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.square = {\n  type: \"symbol\",\n  prop: filled_point_props(\"square\"),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: \"symbol\",\n  prop: point_props,\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1, shape:1}\n};\n\nmarks.text = {\n  type: \"text\",\n  prop: text_props,\n  requiredEncoding: [\"text\"],\n  supportedEncoding: {row:1, col:1, size:1, color:1, alpha:1, text:1}\n};\n\nfunction bar_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T) && !e.bin(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.has(Y) && (!e.isType(Y,Q|T) || e.bin(Y))) {\n      p.x2 = {scale: X, value: 0};\n    }\n  } else if (e.has(X)) {\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T) && !e.bin(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    p.yc = {group: \"height\"};\n  }\n\n  // width\n  if (!e.isType(X,Q|T)) {\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.width = {scale: X, band: true, offset: -1};\n      p.width = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(Y,O) && !e.bin(Y)) {\n    p.width = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // height\n  if (!e.isType(Y,Q|T)) {\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.height = {scale: Y, band: true, offset: -1};\n      p.height = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(X,O) && !e.bin(X)) {\n    p.height = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, opt) {\n  var p = {};\n  opt = opt || {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.config(\"pointSize\")};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.config(\"pointShape\")};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }else{\n    p.opacity = {\n      value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n    };\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction line_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction area_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.isType(Y,Q|T) && e.has(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: \"horizontal\"};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, opt) {\n    var p = {};\n    opt = opt || {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.config(\"bandSize\")/2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.config(\"bandSize\")/2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.config(\"pointSize\")};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.config(\"color\")};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    }else {\n      p.opacity = {\n        value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n      };\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(X)) {\n    p.fontSize = {value: e.config(\"fontSize\")};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"textColor\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    p.text = {field: e.field(TEXT)};\n  } else {\n    p.text = {value: \"Abc\"};\n  }\n\n  p.font = {value: e.config(\"font\")};\n  p.fontWeight = {value: e.config(\"fontWeight\")};\n  p.fontStyle = {value: e.config(\"fontStyle\")};\n  p.baseline = {value: e.config(\"textBaseline\")};\n\n  // align\n  if (e.has(X)) {\n    if (e.isType(X,O)) {\n      p.align = {value: \"left\"};\n      p.dx = {value: e.config(\"textMargin\")};\n    } else {\n      p.align = {value: \"center\"}\n    }\n  } else if (e.has(Y)) {\n    p.align = {value: \"left\"};\n    p.dx = {value: e.config(\"textMargin\")};\n  } else {\n    p.align = {value: e.config(\"textAlign\")};\n  }\n\n  return p;\n}","var globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar scale = module.exports = {};\n\nscale.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n}\n\nscale.defs = function (names, encoding, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale_type(name, encoding),\n      domain: scale_domain(name, encoding, opt)\n    };\n    if (s.type === \"ordinal\" && !encoding.bin(name)) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, opt);\n\n    return (a.push(s), a);\n  }, []);\n}\n\nfunction scale_type(name, encoding) {\n  switch (encoding.type(name)) {\n    case O: return \"ordinal\";\n    case T:\n      if (encoding.fn(name)) {\n        return \"linear\";\n      }\n      return \"time\";\n    case Q:\n      if (encoding.bin(name)) {\n        return \"ordinal\";\n      }\n      return encoding.scale(name).type || \"linear\";\n  }\n}\n\nfunction scale_domain(name, encoding, opt) {\n  if (encoding.type(name) === T){\n    switch(encoding.fn(name)){\n      case \"second\":\n      case \"minute\": return [0, 59];\n      case \"hour\": return [0, 23];\n      case \"day\": return [0, 6];\n      case \"date\": return [1, 31];\n      case \"month\": return [0, 11];\n    }\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)]);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name===Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: \"data.\" + (opt.facet ? \"max_\" :\"\") + \"sum_\" + encoding.field(name, true)\n    }:\n    {data: TABLE, field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name)) {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellWidth ? [0, opt.cellWidth] : \"width\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_xZero\");\n        s.reverse = spec.reverse || encoding.config(\"_xReverse\");\n      }\n      s.round = true;\n      if (encoding.isType(s.name, T)){\n        s.nice = encoding.aggr(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name)) {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellHeight ? [opt.cellHeight, 0] : \"height\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_yZero\");\n        s.reverse = spec.reverse || encoding.config(\"_yReverse\");\n      }\n\n      s.round = true;\n\n      if (encoding.isType(s.name, T)){\n        s.nice = encoding.aggr(s.name);\n      }else{\n        s.nice = true;\n      }\n      break;\n    case ROW:\n      s.bandWidth = opt.cellHeight || encoding.config(\"cellHeight\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL:\n      s.bandWidth = opt.cellWidth || encoding.config(\"cellWidth\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is(\"bar\")) {\n        s.range = [3, +encoding.config(\"bandSize\")];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else {\n        s.range = [10, 1000];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = \"shapes\";\n      break;\n    case COLOR:\n      if (encoding.isType(s.name, O)) {\n        s.range = \"category10\";\n      } else {\n        s.range = [\"#ddf\", \"steelblue\"];\n        s.zero = false;\n      }\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error(\"Unknown encoding name: \"+s.name);\n  }\n\n  switch(s.name){\n    case ROW:\n    case COL:\n      s.padding = encoding.config(\"cellPadding\");\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (encoding.isType(s.name, O) || encoding.bin(s.name) ) { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.config(\"bandPadding\");\n      }\n  }\n}","// Package of defining Vegalite Specification's json schema\n//\nvar schema = module.exports = {},\n  util = require('./util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: \"string\",\n  enum: [\"point\", \"bar\", \"line\", \"area\", \"circle\", \"square\", \"text\"]\n};\n\nschema.aggr = {\n  type: \"string\",\n  enum: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n  supportedEnums: {\n    Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n    O: [\"count\"],\n    T: [\"avg\", \"min\", \"max\", \"count\"],\n    \"\": [\"count\"],\n  },\n  supportedTypes: {\"Q\": true, \"O\": true, \"T\": true, \"\": true}\n};\n\nschema.timefns = [\"month\", \"year\", \"day\", \"date\", \"hour\", \"minute\", \"second\"];\n\nschema.fn = {\n  type: \"string\",\n  enum: schema.timefns,\n  supportedTypes: {\"T\": true}\n}\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: \"string\",\n  enum: [\"linear\", \"log\",\"pow\", \"sqrt\", \"quantile\"],\n  default: \"linear\",\n  supportedTypes: {\"Q\": true}\n};\n\nschema.field = {\n  type: \"object\",\n  required: [\"name\", \"type\"],\n  properties: {\n    name: {\n      type: \"string\"\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nvar typicalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\", \"Q\", \"T\"]\n    },\n    bin: {\n      type: \"boolean\",\n      supportedTypes: {\"Q\": true, \"O\": true}\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    scale: {\n      type: \"object\",\n      properties: {\n        type: schema.scale_type,\n        reverse: { type: \"boolean\", default: false },\n        zero: {\n          type: \"boolean\",\n          description: \"Include zero\",\n          default: false,\n          supportedTypes: {\"Q\": true}\n        },\n        nice: {\n          type: \"string\",\n          enum: [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"],\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\"]\n    },\n    bin: {\n      type: \"boolean\",\n      supportedTypes: {\"O\": true}\n    },\n    aggr: {\n      type: \"string\",\n      enum: [\"count\"],\n      supportedTypes: {\"O\": true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: \"object\",\n  properties: {\n    axis: {\n      type: \"object\",\n      properties: {\n        grid: { type: \"boolean\", default: false },\n        title: { type: \"boolean\", default: true }\n      }\n    }\n  }\n}\n\nvar legendMixin = {\n  type: \"object\",\n  properties: {\n    legend: { type: \"boolean\", default: true }\n  }\n}\n\nvar textMixin = {\n  type: \"object\",\n  properties: {\n    text: {\n      type: \"object\",\n      properties: {\n        weight: {\n          type: \"string\",\n          enum: [\"normal\", \"bold\"],\n          default: \"normal\",\n          supportedTypes: {\"T\": true}\n        },\n        size: {\n          type: \"integer\",\n          default: 10,\n          minimum: 0,\n          supportedTypes: {\"T\": true}\n        },\n        font: {\n          type: \"string\",\n          default: \"Halvetica Neue\",\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n}\n\nvar x = merge(clone(typicalField), axisMixin);\nvar y = clone(x);\n\nvar row = clone(onlyOrdinalField);\nvar col = clone(row);\n\nvar size = merge(clone(typicalField), legendMixin);\nvar color = merge(clone(typicalField), legendMixin);\nvar alpha = clone(typicalField);\nvar shape = merge(clone(onlyOrdinalField), legendMixin);\n\nvar text = merge(clone(typicalField), textMixin);\n\nvar cfg = {\n  type: \"object\",\n  properties: {\n    dataFormatType: {\n      type: \"string\",\n      enum: [\"json\", \"csv\"]\n    },\n    useVegaServer: {\n      type: \"boolean\",\n      default: false\n    },\n    dataUrl: {\n      type: \"string\"\n    },\n    vegaServerTable: {\n      type: \"string\"\n    },\n    vegaServerUrl: {\n      type: \"string\",\n      default: \"http://localhost:3001\"\n    }\n  }\n}\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: \"http://json-schema.org/draft-04/schema#\",\n  type: \"object\",\n  required: [\"marktype\", \"enc\", \"cfg\"],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: \"object\",\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text\n      }\n    },\n    cfg: cfg\n  }\n};\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function(){\n  return schema.util.instantiate(schema.schema);\n}\n","var util = module.exports = {};\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0\n}\n\n// instantiate a schema\nutil.instantiate = function(schema, required) {\n  if (schema.type === 'object') {\n    schema.required = schema.required ? schema.required : [];\n    var instance = {};\n    for (var name in schema.properties) {\n      var child = schema.properties[name];\n      instance[name] = util.instantiate(child, schema.required.indexOf(name) != -1);\n    };\n    return instance;\n  } else if ('default' in schema) {\n    return schema.default;\n  } else if (schema.enum && required) {\n    return schema.enum[0];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nutil.difference = function(defaults, instance) {\n  var changes = {};\n  for (var prop in instance) {\n    if (!defaults || defaults[prop] !== instance[prop]) {\n      if (typeof instance[prop] == \"object\") {\n        var c = util.difference(defaults[prop], instance[prop]);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else {\n        changes[prop] = instance[prop];\n      }\n    }\n  }\n  return changes;\n};\n\n// recursively merges instance into defaults\nutil.merge = function (defaults, instance) {\n  if (typeof instance!=='object' || instance===null) {\n    return defaults;\n  }\n\n  for (var p in instance) {\n    if (!instance.hasOwnProperty(p))\n      continue;\n    if (instance[p]===undefined )\n      continue;\n    if (typeof instance[p] !== 'object' || instance[p] === null) {\n      defaults[p] = instance[p];\n    } else if (typeof defaults[p] !== 'object' || defaults[p] === null) {\n      defaults[p] = util.merge(instance[p].constructor === Array ? [] : {}, instance[p]);\n    } else {\n      util.merge(defaults[p], instance[p]);\n    }\n  }\n  return defaults;\n}\n","var util = module.exports = {};\n\nutil.keys = function (obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n}\n\nutil.vals = function (obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n}\n\nutil.range = function (start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error(\"infinite range\");\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n}\n\nutil.find = function (list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n}\n\nutil.uniq = function (data, field) {\n  var map = {}, count = 0, i, k;\n  for (i=0; i<data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n}\n\nutil.minmax = function (data, field) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (i=0; i<data.length; ++i) {\n    var v = data[i][field];\n    if (v > stats.max) stats.max = v;\n    if (v < stats.min) stats.min = v;\n  }\n  return stats;\n}\n\nutil.duplicate = function (obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.any = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(f(arr[k], k, i++)) return true;\n  }\n  return false;\n}\n\nutil.all = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(!f(arr[k], k, i++)) return false;\n  }\n  return true;\n}\n\nutil.merge = function(dest, src){\n  return util.keys(src).reduce(function(c, k){\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.getbins = function (stats) {\n  return vg.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: MAX_BINS\n  });\n}\n\n\nutil.error = function(msg){\n  console.error(\"[VL Error]\", msg);\n}\n\n"],"sourceRoot":"/source/"}