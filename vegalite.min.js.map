{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","src/Encoding.js","src/compile/aggregates.js","src/compile/axis.js","src/compile/binning.js","src/compile/compile.js","src/compile/faceting.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stacking.js","src/compile/style.js","src/compile/subfaceting.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","merge","Encoding","compile","data","field","enc","schema","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,"vlfield","vlenc","marktype","config","filter","theme","defaults","instantiate","spec","cfg","type","dataTypes","specExtended","this","_marktype","_enc","_cfg","_filter","proto","prototype","is","m","has","encType","undefined","name","x","filterNull","fields","forEach","fieldList","fieldName","Q","containsType","T","O","push","operands","operator","concat","nodata","nofn","aggr","bin","fn","fieldTitle","isCount","count","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","Y","ROW","X","COL","size","maxbins","MAXBINS_DEFAULT","legend","value","sort","et","stats","isType","byCode","toggleSort","support","qField","y","reverse","any","all","keys","map","reduce","init","role","text","prop","TEXT","font","fieldDef","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","toSpec","excludeConfig","duplicate","dataTypeNames","subtract","toShorthand","c","shorthand","assign","delim","parseShorthand","split","shift","trim","shorthandFromSpec","fromSpec","apply","arguments","specFromShorthand","transpose","oldenc","row","col","direction","useTypeCode","mode","get","toggleFilterNullO","numNulls","./compile/time",3,"aggregates","opt","dims","meas","detail","facets","op","vals","preaggregatedData","transform","groupby","details","aggregated","../globals","../util",4,"axis_title","def","layout","maxlength","cellWidth","cellHeight","title","truncate","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","format","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","x2","group","mult","opacity","orient","ticks","./time",5,"binning","output",6,"style","vlstyle","template","marks","mark","mdefs","mdef","addFilters","sorting","vlsort","hasRow","hasCol","lineType","line","aggResult","hasDetails","stack","stacking","subfaceting","from","by","faceting","legends","scales","properties","update","axes","filterLessThanZero","./aggregates","./axis","./binning","./faceting","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stacking","./style","./subfaceting","./template",7,"axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","facet","trans",8,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","j","console","warn","test",9,"_name",10,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","maxLength","Math","min","../field","../schema/schema",11,"COLOR","SIZE","SHAPE","shape","labels",12,"bar_props","p","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",13,"scale_domain","range","domain","bins","getbins","start","stop","step","STACKED","getDataset","scale_range","bandWidth","zero","round","nice","max","colorRange","outerPadding","points",14,"addSortTransforms","datasetMapping","counter","sortBy","d","byClause","dataName","transforms","source","RAW",15,"dim","val","idx","isXMeasure","isYMeasure","stacked","y1","y0",16,"estimateOpacity","numPoints","numMultiples","../Encoding",17,"g",18,"table","dataUrl","vldata","getUrl","url","parse","../data",19,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","formula","expr","labelLength","substr","isOrdinalFn","isColor",20,"encodingTypes","DETAIL",21,"obj","binSize","query","JSON","stringify","getSchema","order","k","datum","Date","stablesort","typeThenName","getStats","column","minmax","numbers","dates","uniq","len","toString","skew","stdev","mean","median","sample","Object","floor","random",22,"encTypes","countRetinal","arr","indexOf","join","convertType","isArray","enctype",23,"getIsType","byName","shorthands","timefns","typeOrder","G","toLowerCase","original","typeThenCardinality",24,"INDEX",25,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","viewport","gridColor","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellBackgroundColor","textCellWidth","timeScaleLabelLength","characterWidth","dataFormatType","useVegaServer","vegaServerTable","vegaServerUrl","$schema","./schemautil",26,"dest","src","hasOwnProperty","constructor","Array","schemautil","isEmpty","extend","instance","isObject","changes","ins",27,"util_bisectLeft","lo","hi","mid","cmp","vg_truncateOnWord","rev","cnt","tok","vg_truncate_word_re","w","slice","v","Infinity","find","list","pattern","isin","item","array","isNumber","isNaN","parseFloat","isFinite","values","nums","date","b","half","variance","avg","diffs","pow","keyFn","indices","sa","sb","sqrt","med","std","thisArg","NaN","precision","eps","maxb","base","div","mins","minstep","logb","log","level","ceil","span","nbins","steps","unit","noaugment","pos","word","ellipsis","l1","l2","msg"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\n\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\n\n\nmodule.exports = vl;\n\n},{\"./Encoding\":2,\"./compile/compile\":6,\"./consts\":20,\"./data\":21,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],2:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      marktype: marktype,\n      enc: enc,\n      cfg: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._cfg = specExtended.cfg;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(x) {\n    return this._enc[x];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[x].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[x].bin) {\n      return f + 'bin_' + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + '_' + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn) {\n      return f + this._enc[x].fn + '_' + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x) {\n    return this._enc[x].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(x) {\n    if (vlfield.isCount(this._enc[x])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[x].aggr || this._enc[x].fn || (this._enc[x].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[x].name + ')';\n    } else {\n      return this._enc[x].name;\n    }\n  };\n\n  proto.scale = function(x) {\n    return this._enc[x].scale || {};\n  };\n\n  proto.axis = function(x) {\n    return this._enc[x].axis || {};\n  };\n\n  proto.band = function(x) {\n    return this._enc[x].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(x) {\n    return this._enc[x].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(x) {\n    var bin = this._enc[x].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(x) {\n    return this._enc[x].legend;\n  };\n\n  proto.value = function(x) {\n    return this._enc[x].value;\n  };\n\n  proto.fn = function(x) {\n    return this._enc[x].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(x, type) {\n    var field = this.enc(x);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.cfg = util.duplicate(this._cfg);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.parseShorthand = function(shorthand, cfg) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.parseShorthand(split, true);\n\n    return new Encoding(marktype, enc, cfg);\n  };\n\n  // FIXME remove this -- simply use Encoding.shorthand\n  Encoding.shorthandFromSpec = function(/*spec, theme*/) {\n    return Encoding.fromSpec.apply(null, arguments).toShorthand();\n  };\n\n  Encoding.specFromShorthand = function(shorthand, cfg, excludeConfig) {\n    return Encoding.parseShorthand(shorthand, cfg).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.cfg, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.toggleSort = spec.cfg.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.cfg.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.filterNull = spec.cfg.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.cfg.filterNull.O = !spec.cfg.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./compile/time\":19,\"./consts\":20,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],3:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":24,\"../util\":27}],4:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],5:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":24,\"../util\":27}],6:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregates = compile.aggregates = require('./aggregates'),\n  binning = compile.binning = require('./binning'),\n  faceting = compile.faceting = require('./faceting'),\n  stacking = compile.stacking = require('./stacking'),\n  subfaceting = compile.subfaceting = require('./subfaceting');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  binning(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfaceting(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n}\n\n\n},{\"../globals\":24,\"../util\":27,\"./aggregates\":3,\"./axis\":4,\"./binning\":5,\"./faceting\":7,\"./filter\":8,\"./group\":9,\"./layout\":10,\"./legend\":11,\"./marks\":12,\"./scale\":13,\"./sort\":14,\"./stacking\":15,\"./style\":16,\"./subfaceting\":17,\"./template\":18,\"./time\":19}],7:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./axis\":4,\"./group\":9,\"./scale\":13}],8:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":24}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../field\":23,\"../globals\":24,\"../schema/schema\":25,\"../util\":27,\"./time\":19}],11:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":24,\"./time\":19}],12:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./scale\":13}],13:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],14:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":24}],15:[function(require,module,exports){\n\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":24,\"../util\":27,\"./marks\":12}],16:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../Encoding\":2,\"../field\":23,\"../globals\":24,\"../util\":27}],17:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":24,\"./group\":9}],18:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.config('dataFormatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../data\":21,\"../globals\":24,\"./group\":9}],19:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../globals\":24,\"../util\":27}],20:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":24}],21:[function(require,module,exports){\n'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config('useVegaServer')) {\n    // don't use vega server\n    return encoding.config('dataUrl');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config('vegaServerTable'),\n    fields: fields\n  };\n\n  return encoding.config('vegaServerUrl') + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n\n},{\"./field\":23,\"./util\":27}],22:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.parseShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.parseShorthand(field, convertType);\n    return m;\n  }, {});\n};\n},{\"./compile/time\":19,\"./consts\":20,\"./field\":23,\"./schema/schema\":25,\"./util\":27}],23:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.parseShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":19,\"./consts\":20,\"./schema/schema\":25,\"./util\":27}],24:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],25:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar cfg = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    },\n\n    // data source\n    dataFormatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    useVegaServer: {\n      type: 'boolean',\n      default: false\n    },\n    dataUrl: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerTable: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: 'string',\n      default: 'http://localhost:3001'\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'cfg'],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    cfg: cfg\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":27,\"./schemautil\":26}],26:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":27}],27:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      marktype: marktype,\n      enc: enc,\n      cfg: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._cfg = specExtended.cfg;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(x) {\n    return this._enc[x];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[x].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[x].bin) {\n      return f + 'bin_' + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + '_' + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn) {\n      return f + this._enc[x].fn + '_' + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x) {\n    return this._enc[x].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(x) {\n    if (vlfield.isCount(this._enc[x])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[x].aggr || this._enc[x].fn || (this._enc[x].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[x].name + ')';\n    } else {\n      return this._enc[x].name;\n    }\n  };\n\n  proto.scale = function(x) {\n    return this._enc[x].scale || {};\n  };\n\n  proto.axis = function(x) {\n    return this._enc[x].axis || {};\n  };\n\n  proto.band = function(x) {\n    return this._enc[x].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(x) {\n    return this._enc[x].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(x) {\n    var bin = this._enc[x].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(x) {\n    return this._enc[x].legend;\n  };\n\n  proto.value = function(x) {\n    return this._enc[x].value;\n  };\n\n  proto.fn = function(x) {\n    return this._enc[x].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(x, type) {\n    var field = this.enc(x);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.cfg = util.duplicate(this._cfg);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.parseShorthand = function(shorthand, cfg) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.parseShorthand(split, true);\n\n    return new Encoding(marktype, enc, cfg);\n  };\n\n  // FIXME remove this -- simply use Encoding.shorthand\n  Encoding.shorthandFromSpec = function(/*spec, theme*/) {\n    return Encoding.fromSpec.apply(null, arguments).toShorthand();\n  };\n\n  Encoding.specFromShorthand = function(shorthand, cfg, excludeConfig) {\n    return Encoding.parseShorthand(shorthand, cfg).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.cfg, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.toggleSort = spec.cfg.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.cfg.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.filterNull = spec.cfg.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.cfg.filterNull.O = !spec.cfg.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregates = compile.aggregates = require('./aggregates'),\n  binning = compile.binning = require('./binning'),\n  faceting = compile.faceting = require('./faceting'),\n  stacking = compile.stacking = require('./stacking'),\n  subfaceting = compile.subfaceting = require('./subfaceting');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  binning(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfaceting(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n}\n\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.config('dataFormatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config('useVegaServer')) {\n    // don't use vega server\n    return encoding.config('dataUrl');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config('vegaServerTable'),\n    fields: fields\n  };\n\n  return encoding.config('vegaServerUrl') + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.parseShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.parseShorthand(field, convertType);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.parseShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n","// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar cfg = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    },\n\n    // data source\n    dataFormatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    useVegaServer: {\n      type: 'boolean',\n      default: false\n    },\n    dataUrl: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerTable: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: 'string',\n      default: 'http://localhost:3001'\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'cfg'],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    cfg: cfg\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}