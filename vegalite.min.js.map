{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","src/Encoding.js","src/axis.js","src/compile.js","src/consts.js","src/data.js","src/globals.js","src/legends.js","src/marks.js","src/scale.js","src/schema.js","src/schemautil.js","src/time.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","merge","schema","Encoding","axis","compile","data","legends","marks","scale","./Encoding","./axis","./compile","./consts","./data","./globals","./legends","./marks","./scale","./schema","./util",2,"marktype","enc","config","encDefaults","instantiate","properties","cfgDefaults","cfg","k","DEFAULTS","this","_marktype","_enc","_cfg","proto","prototype","is","m","has","x","undefined","field","nodata","nofn","aggr","bin","name","fn","fieldName","fieldTitle","legend","any","all","keys","reduce","init","forEach","type","isType","xt","toSpec","excludeConfig","spec","duplicate","dataTypeNames","toShorthand","map","v","join","parseShorthand","shorthand","split","shift","enctype","dataTypes","indexOf","substr","timefns","fromSpec","extraCfg",3,"axis_title","encoding","title","Y","titleOffset","names","props","X","defs","opt","push","def","isCol","COL","isRow","ROW","Q","ticks","grid","layer","opacity","value","majorTicks","offset","xAxisMargin","orient","O","T","labels","angle","align","baseline","text",4,"getCardinality","encType","stats","bins","getbins","stop","start","step","cardinality","setSize","hasRow","hasCol","hasX","hasY","colCardinality","rowCardinality","cellWidth","cellHeight","cellPadding","bandPadding","width","height","xCardinality","yCardinality","facet","group","mdef","stack","enter","facetKeys","cellAxes","fill","from","transform","error","y","unshift","axesGrp","groupdef","axes","apply","scales","concat","update","trans","subfacet","details","g","COLOR","by","binning","vv","d","preaggregatedData","output","maxbins","MAX_BINS","aggregates","dims","meas","detail","facets","op","vals","groupby","fields","TEXT","expr","aggregated","stacking","dim","val","idx","stacked","STACKED","source","TABLE","point","y1","y0","markdef","mark","p","prop","_name","template","size","format","dataUrl","getUrl","url","parse","padding","time","hasAgg","hasAggregate","lineType","line","aggResult","hasDetails","./time",5,"encodingTypes","SIZE","SHAPE","ALPHA","cellBackgroundColor","yAxisMargin","textCellWidth","bandSize","pointSize","pointShape","strokeWidth","color","textColor","textAlign","textBaseline","textMargin","font","fontSize","fontWeight","fontStyle","_thickOpacity","_thinOpacity","_xZero","_xReverse","_yZero","_yReverse","timeScaleNice","timeScaleLabelLength",6,"obj","binSize","query","table","JSON","stringify","getSchema","datum","isNaN","Date","getStats","stat","minmax","uniq","count",7,"INDEX",8,"_legends","console","shape","_legend",9,"bar_props","x2","xc","y2","yc","point_props","stroke","line_props","area_props","filled_point_props","text_props","dx","bar","requiredEncoding","supportedEncoding","row","col","alpha","area","circle","square",10,"scale_domain","range","domain","reverse","scale_range","bandWidth","zero","round","nice","outerPadding","points","sort",11,"enum","supportedEnums","supportedTypes","scale_type","default","required","clone","typicalField","description","onlyOrdinalField","axisMixin","legendMixin","textMixin","weight","minimum","viewport","items","_minWidth","_minHeight","dataFormatType","useVegaServer","vegaServerTable","vegaServerUrl","$schema","./schemautil",12,"isEmpty","Object","requried","instance","child","difference","defaults","changes","c","hasOwnProperty","constructor","Array",13,"timeFields","timeFn","tf","formula","date","labelLength",14,"arguments","Infinity","j","find","list","pattern","filter","min","max","arr","dest","src","vg","msg"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var globals = require(\"./globals\"),\n    util = require(\"./util\"),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.schema = require('./schema');\nvl.Encoding = require('./Encoding');\nvl.axis = require('./axis');\nvl.compile = require('./compile');\nvl.data = require('./data');\nvl.legends = require('./legends');\nvl.marks = require('./marks')\nvl.scale = require('./scale');\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n    util = require(\"./util\"),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.schema = require('./schema');\nvl.Encoding = require('./Encoding');\nvl.axis = require('./axis');\nvl.compile = require('./compile');\nvl.data = require('./data');\nvl.legends = require('./legends');\nvl.marks = require('./marks')\nvl.scale = require('./scale');\n\nmodule.exports = vl;\n\n},{\"./Encoding\":2,\"./axis\":3,\"./compile\":4,\"./consts\":5,\"./data\":6,\"./globals\":7,\"./legends\":8,\"./marks\":9,\"./scale\":10,\"./schema\":11,\"./util\":14}],2:[function(require,module,exports){\n\"use strict\";\n\nvar global = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  schema = require('./schema');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config) {\n    // TODO: caching\n    var encDefaults = schema.util.instantiate(schema.schema.properties.enc);\n    var cfgDefaults = schema.util.instantiate(schema.schema.properties.cfg);\n\n    // Hack\n    for (var k in consts.DEFAULTS) {\n      cfgDefaults[k] = consts.DEFAULTS[k];\n    }\n\n    // remove field defs that we don't use in encoding\n    for (var k in encDefaults) {\n      if (!enc[k]) {\n        delete encDefaults[k];\n      }\n    }\n\n    this._marktype = marktype;\n    this._enc = schema.util.merge(encDefaults, enc);\n    this._cfg = schema.util.merge(cfgDefaults, config);\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(x) {\n    return this._enc[x] !== undefined;\n  };\n\n  proto.enc = function(x){\n    return this._enc[x];\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? \"\" : \"data.\");\n\n    if (this._enc[x].aggr === \"count\") {\n      return f + \"count\";\n    } else if (!nofn && this._enc[x].bin) {\n      return f + \"bin_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + \"_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn){\n      return f + this._enc[x].fn + \"_\" + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x){\n    return this._enc[x].name;\n  }\n\n  proto.fieldTitle = function(x){\n    if (this._enc[x].aggr) {\n      return this._enc[x].aggr + \"(\" + this._enc[x].name + \")\";\n    } else {\n      return this._enc[x].name;\n    }\n  }\n\n  proto.scale = function(x){\n    return this._enc[x].scale || {};\n  }\n\n  proto.axis = function(x){\n    return this._enc[x].axis || {};\n  }\n\n  proto.aggr = function(x){\n    return this._enc[x].aggr;\n  }\n\n  proto.bin = function(x){\n    return this._enc[x].bin;\n  }\n\n  proto.legend = function(x){\n    return this._enc[x].legend;\n  }\n\n  proto.fn = function(x){\n    return this._enc[x].fn;\n  }\n\n  proto.any = function(f){\n    return util.any(this._enc, f);\n  }\n\n  proto.all = function(f){\n    return util.all(this._enc, f);\n  }\n\n  proto.length = function(){\n    return util.keys(this._enc).length;\n  }\n\n  proto.reduce = function(f, init){\n    var r = init, i=0;\n    for (k in this._enc){\n      r = f(r, this._enc[k], k, this._enc);\n    }\n    return r;\n  }\n\n  proto.forEach = function(f) {\n    var i=0, k;\n    for (k in this._enc) {\n      f(k, this._enc[k], i++);\n    }\n  };\n\n  proto.type = function(x) {\n    return this.has(x) ? this._enc[x].type : null;\n  };\n\n  proto.isType = function(x, t) {\n    var xt = this.type(x);\n    if (xt == null) return false;\n    return (xt & t) > 0;\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig){\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for(var e in enc){\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc\n    }\n\n    if(!excludeConfig){\n      spec.cfg = util.duplicate(this._cfg)\n    }\n\n    return spec;\n  };\n\n  proto.toShorthand = function(){\n    var enc = this._enc;\n    return this._marktype + \".\" + util.keys(enc).map(function(e){\n      var v = enc[e];\n        return e + \"-\" +\n          (v.aggr ? v.aggr+\"_\" : \"\") +\n          (v.fn ? v.fn+\"_\" : \"\") +\n          (v.bin ? \"bin_\" : \"\") +\n          (v.name || \"\") + \"-\" +\n          consts.dataTypeNames[v.type];\n      }\n    ).join(\".\");\n  }\n\n  Encoding.parseShorthand = function(shorthand, cfg){\n    var enc = shorthand.split(\".\"),\n      marktype = enc.shift();\n\n    enc = enc.reduce(function(m, e){\n      var split = e.split(\"-\"),\n        enctype = split[0],\n        o = {name: split[1], type: consts.dataTypes[split[2]]};\n\n      // check aggregate type\n      for(var i in schema.aggr.enum){\n        var a = schema.aggr.enum[i];\n        if(o.name.indexOf(a+\"_\") == 0){\n          o.name = o.name.substr(a.length+1);\n          if (a==\"count\" && o.name.length === 0) o.name = \"*\";\n          o.aggr = a;\n          break;\n        }\n      }\n      // check time fn\n      for(var i in schema.timefns){\n        var f = schema.timefns[i];\n        if(o.name && o.name.indexOf(f+\"_\") == 0){\n          o.name = o.name.substr(o.length+1);\n          o.fn = f;\n          break;\n        }\n      }\n\n      // check bin\n      if(o.name && o.name.indexOf(\"bin_\") == 0){\n        o.name = o.name.substr(4);\n        o.bin = true;\n      }\n\n      m[enctype] = o;\n      return m;\n    }, {});\n\n    return new Encoding(marktype, enc, cfg);\n  }\n\n  Encoding.fromSpec = function(spec, extraCfg) {\n    var enc = util.duplicate(spec.enc);\n\n    //convert type from string to bitcode (e.g, O=1)\n    for(var e in enc){\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, util.merge(spec.cfg, extraCfg || {}));\n  }\n\n  return Encoding;\n\n})();\n\n},{\"./consts\":5,\"./globals\":7,\"./schema\":11,\"./util\":14}],3:[function(require,module,exports){\nvar globals = require('./globals'),\n  util = require('./util');\n\nvar axis = module.exports = {};\n\naxis.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s===X || s===Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function (name, encoding, opt){\n  var type = name;\n  var isCol = name==COL, isRow = name==ROW;\n  if(isCol) type = \"x\";\n  if(isRow) type = \"y\";\n\n  var axis = {\n    type: type,\n    scale: name,\n  };\n\n  if (encoding.isType(name, Q)) {\n    //TODO(kanitw): better determine # of ticks\n    axis.ticks = 3;\n  }\n\n  if (encoding.axis(name).grid) {\n    axis.grid = true;\n    axis.layer = \"back\";\n  }\n\n  if (encoding.axis(name).title) {\n    //show title by default\n\n    axis = axis_title(axis, name, encoding, opt);\n  }\n\n  if(isRow || isCol){\n    axis.properties = {\n      ticks: { opacity: {value: 0} },\n      majorTicks: { opacity: {value: 0} },\n      axis: { opacity: {value: 0} }\n    };\n  }\n  if(isCol){\n    axis.offset = [opt.xAxisMargin || 0, encoding.config(\"yAxisMargin\")];\n    axis.orient = \"top\";\n  }\n\n  if (name==\"x\" && (encoding.isType(name, O|T) || encoding.bin(name))) {\n    axis.properties = {\n      labels: {\n        angle: {value: 270},\n        align: {value: \"right\"},\n        baseline: {value: \"middle\"}\n      }\n    };\n  }\n\n  // add custom label for time type\n  if (encoding.isType(name, T)) {\n    var fn = encoding.fn(name),\n      properties = axis.properties = axis.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    switch (fn) {\n      case \"day\":\n      case \"month\":\n        text.scale = \"time-\"+fn;\n        break;\n    }\n  }\n\n  return axis;\n};\n\nfunction axis_title(axis, name, encoding, opt){\n  axis.title = encoding.fieldTitle(name);\n  if(name==Y){\n    axis.titleOffset = 60;\n    // TODO: set appropriate titleOffset\n    // maybe based on some string length from stats\n  }\n  return axis;\n}\n\n},{\"./globals\":7,\"./util\":14}],4:[function(require,module,exports){\nvar globals = require('./globals'),\n  util = require('./util'),\n  axis = require('./axis'),\n  legends = require('./legends'),\n  marks = require('./marks'),\n  scale = require('./scale'),\n  time = require('./time');\n\nvar compile = module.exports = function(encoding, stats) {\n  var size = setSize(encoding, stats),\n    cellWidth = size.cellWidth,\n    cellHeight = size.cellHeight;\n\n  var hasAgg = encoding.any(function(v, k){\n    return v.aggr !== undefined;\n  });\n\n  var spec = template(encoding, size, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdef = markdef(mark, encoding, {\n      hasAggregate: hasAgg\n    });\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  group.marks.push(mdef);\n  // TODO: return value not used\n  binning(spec.data[0], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if(!preaggregatedData){\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec.data[0], encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isType(X, Q | T) && encoding.isType(Y, O)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    mdef.from.transform = [{type: \"sort\", by: encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding);\n    group.legends = legends.defs(encoding);\n  }\n  return spec;\n};\n\nfunction getCardinality(encoding, encType, stats){\n  var field = encoding.fieldName(encType);\n  if (encoding.bin(encType)) {\n    var bins = util.getbins(stats[field]);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  return stats[field].cardinality;\n}\n\nfunction setSize(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y);\n\n  // HACK to set chart size\n  // NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  // One solution is to update Vega to support auto-sizing\n  // In the meantime, auto-padding (mostly) does the trick\n  //\n  var colCardinality = hasCol ? getCardinality(encoding, COL, stats) : 1,\n    rowCardinality = hasRow ? getCardinality(encoding, ROW, stats) : 1;\n\n  var cellWidth = hasX ?\n      +encoding.config(\"cellWidth\") || encoding.config(\"width\") * 1.0 / colCardinality :\n      encoding.marktype() === \"text\" ?\n        +encoding.config(\"textCellWidth\") :\n        +encoding.config(\"bandSize\"),\n    cellHeight = hasY ?\n      +encoding.config(\"cellHeight\") || encoding.config(\"height\") * 1.0 / rowCardinality :\n      +encoding.config(\"bandSize\"),\n    cellPadding = encoding.config(\"cellPadding\"),\n    bandPadding = encoding.config(\"bandPadding\"),\n    width = encoding.config(\"_minWidth\"),\n    height = encoding.config(\"_minHeight\");\n\n  if (hasX && (encoding.isType(X, O) || encoding.bin(X))) { //ordinal field will override parent\n    // bands within cell use rangePoints()\n    var xCardinality = getCardinality(encoding, X, stats);\n    cellWidth = (xCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  width = cellWidth * ((1 + cellPadding) * (colCardinality-1) + 1);\n\n  if (hasY && (encoding.isType(Y, O) || encoding.bin(Y))) {\n    // bands within cell use rangePoint()\n    var yCardinality = getCardinality(encoding, Y, stats);\n    cellHeight = (yCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  height = cellHeight * ((1 + cellPadding) * (rowCardinality-1) + 1);\n\n  return {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    width: width,\n    height:height\n  };\n}\n\nfunction facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats) {\n    var enter = group.properties.enter;\n    var facetKeys = [], cellAxes = [];\n\n    var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n    var xAxisMargin = encoding.has(Y) ? encoding.config(\"xAxisMargin\") : undefined;\n\n    enter.fill = {value: encoding.config(\"cellBackgroundColor\")};\n\n    //move \"from\" to cell level and add facet transform\n    group.from = {data: group.marks[0].from.data};\n\n    if (group.marks[0].from.transform) {\n      delete group.marks[0].from.data; //need to keep transform for subfacetting case\n    } else {\n      delete group.marks[0].from;\n    }\n    if (hasRow) {\n      if (!encoding.isType(ROW, O)) {\n        util.error(\"Row encoding should be ordinal.\");\n      }\n      enter.y = {scale: ROW, field: \"keys.\" + facetKeys.length};\n      enter.height = {\"value\": cellHeight}; // HACK\n\n      facetKeys.push(encoding.field(ROW));\n\n      var from;\n      if (hasCol) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(COL)]});\n      }\n\n      var axesGrp = groupdef(\"x-axes\", {\n          axes: encoding.has(X) ?  axis.defs([\"x\"], encoding) : undefined,\n          x: hasCol ? {scale: COL, field: \"keys.0\", offset: xAxisMargin} : {value: xAxisMargin},\n          width: hasCol && {\"value\": cellWidth}, //HACK?\n          from: from\n        });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || []);\n      spec.axes.push.apply(spec.axes, axis.defs([\"row\"], encoding));\n    } else { // doesn't have row\n      if(encoding.has(X)){\n        //keep x axis in the cell\n        cellAxes.push.apply(cellAxes, axis.defs([\"x\"], encoding));\n      }\n    }\n\n    if (hasCol) {\n      if (!encoding.isType(COL, O)) {\n        util.error(\"Col encoding should be ordinal.\");\n      }\n      enter.x = {scale: COL, field: \"keys.\" + facetKeys.length};\n      enter.width = {\"value\": cellWidth}; // HACK\n\n      facetKeys.push(encoding.field(COL));\n\n      var from;\n      if (hasRow) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(ROW)]});\n      }\n\n      var axesGrp = groupdef(\"y-axes\", {\n        axes: encoding.has(Y) ? axis.defs([\"y\"], encoding) : undefined,\n        y: hasRow && {scale: ROW, field: \"keys.0\"},\n        x: hasRow && {value: xAxisMargin},\n        height: hasRow && {\"value\": cellHeight}, //HACK?\n        from: from\n      });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || [])\n      spec.axes.push.apply(spec.axes, axis.defs([\"col\"], encoding, {\n        xAxisMargin: xAxisMargin\n      }));\n    } else { // doesn't have col\n      if(encoding.has(Y)){\n        cellAxes.push.apply(cellAxes, axis.defs([\"y\"], encoding));\n      }\n    }\n\n    if(hasRow){\n      if(enter.x) enter.x.offset= xAxisMargin;\n      else enter.x = {value: xAxisMargin};\n    }\n    if(hasCol){\n      //TODO fill here..\n    }\n\n    // assuming equal cellWidth here\n    // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n    spec.scales = (spec.scales ||[]).concat(scale.defs(\n      scale.names(enter).concat(scale.names(mdef.properties.update)),\n      encoding,\n      {cellWidth: cellWidth, cellHeight: cellHeight, stack: stack, facet:true, stats: stats}\n    )); // row/col scales + cell scales\n\n    if (cellAxes.length > 0) {\n      group.axes = cellAxes;\n    }\n\n    // add facet transform\n    var trans = (group.from.transform || (group.from.transform = []));\n    trans.unshift({type: \"facet\", keys: facetKeys});\n\n  return spec;\n  }\n\nfunction subfacet(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef(\"subfacet\", {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: \"facet\", keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: \"sort\", by: encoding.field(COLOR)});\n  }\n}\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n  encoding.forEach(function(vv, d) {\n    if (d.bin) bins[d.name] = d.name;\n  });\n  bins = util.keys(bins);\n\n  if (bins.length === 0 || opt.preaggregatedData) return false;\n\n  if (!spec.transform) spec.transform = [];\n  bins.forEach(function(d) {\n    spec.transform.push({\n      type: \"bin\",\n      field: \"data.\" + d,\n      output: \"data.bin_\" + d,\n      maxbins: MAX_BINS\n    });\n  });\n  return bins;\n}\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n  var dims = {}, meas = {}, detail = {}, facets={};\n  encoding.forEach(function(encType, field) {\n    if (field.aggr) {\n      if(field.aggr===\"count\"){\n        meas[\"count\"] = {op:\"count\", field:\"*\"};\n      }else{\n        meas[field.aggr+\"|\"+field.name] = {\n          op:field.aggr,\n          field:\"data.\"+field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType==ROW || encType == COL){\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!spec.transform) spec.transform = [];\n    spec.transform.push({\n      type: \"aggregate\",\n      groupby: dims,\n      fields: meas\n    });\n\n    if (encoding.marktype() === TEXT) {\n      meas.forEach( function (m) {\n        var fieldName = m.field.substr(5), //remove \"data.\"\n          field = \"data.\" + (m.op ? m.op + \"_\" : \"\") + fieldName;\n        spec.transform.push({\n          type: \"formula\",\n          field: field,\n          expr: \"d3.format('.2f')(d.\"+field+\")\"\n        });\n      });\n    }\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  }\n}\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n  if (!encoding.has(COLOR)) return false;\n\n  var dim = X, val = Y, idx = 1;\n  if (encoding.isType(X,Q|T) && !encoding.isType(Y,Q|T) && encoding.has(Y)) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: \"aggregate\",\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: \"sum\", field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if(facets && facets.length > 0){\n    stacked.transform.push({ //calculate max for each facet\n      type: \"aggregate\",\n      groupby: facets,\n      fields: [{op: \"max\", field: \"data.sum_\" + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: \"stack\",\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val+\"2\"}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val+\"2\"] = mdef.properties.enter[val+\"2\"] = {scale: val, field: val+\"2\"};\n\n  return val; //return stack encoding\n}\n\n\nfunction markdef(mark, encoding, opt) {\n  var p = mark.prop(encoding, opt)\n  return {\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  };\n}\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: \"group\",\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: \"width\"},\n        height: opt.height || {group: \"height\"}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\nfunction template(encoding, size, stats) { //hack use stats\n\n  var data = {name:TABLE, format: {type: encoding.config(\"dataFormatType\")}},\n    dataUrl = vl.data.getUrl(encoding, stats);\n  if(dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  encoding.forEach(function(encType, field){\n    if(field.type == T){\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = \"date\";\n    }else if(field.type == Q){\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === \"count\") {\n        var name = \"count\";\n      } else if(preaggregatedData && field.bin){\n        var name = \"bin_\" + field.name;\n      } else if(preaggregatedData && field.aggr){\n        var name = field.aggr + \"_\" + field.name;\n      } else{\n        var name = field.name;\n      }\n      data.format.parse[name] = \"number\";\n    }\n  });\n\n  return {\n    width: size.width,\n    height: size.height,\n    padding: \"auto\",\n    data: [data],\n    marks: [groupdef(\"cell\", {\n      width: size.cellWidth ? {value: size.cellWidth}: undefined,\n      height: size.cellHeight ? {value: size.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"./axis\":3,\"./globals\":7,\"./legends\":8,\"./marks\":9,\"./scale\":10,\"./time\":13,\"./util\":14}],5:[function(require,module,exports){\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT];\n\nconsts.dataTypes = {\"O\": O, \"Q\": Q, \"T\": T};\n\nconsts.dataTypeNames = [\"O\",\"Q\",\"T\"].reduce(function(r,x) {\n  r[consts.dataTypes[x]] = x; return r;\n},{});\n\nconsts.DEFAULTS = {\n  //small multiples\n  cellHeight: 200, // will be overwritten by bandWidth\n  cellWidth: 200, // will be overwritten by bandWidth\n  cellPadding: 0.1,\n  cellBackgroundColor: \"#fdfdfd\",\n  xAxisMargin: 80,\n  yAxisMargin: 0,\n  textCellWidth: 90,\n\n  // marks\n  bandSize: 21,\n  bandPadding: 1,\n  pointSize: 50,\n  pointShape: \"circle\",\n  strokeWidth: 2,\n  color: \"steelblue\",\n  textColor: \"black\",\n  textAlign: \"left\",\n  textBaseline: \"middle\",\n  textMargin: 4,\n  font: \"Helvetica Neue\",\n  fontSize: \"12\",\n  fontWeight: \"normal\",\n  fontStyle: \"normal\",\n  opacity: 1,\n  _thickOpacity: 0.5,\n  _thinOpacity: 0.2,\n\n  // scales\n  // TODO remove _xZero, ...\n  _xZero: true,\n  _xReverse: false,\n  _yZero: true,\n  _yReverse: false,\n  timeScaleNice: \"day\",\n  timeScaleLabelLength: 3\n};\n},{\"./globals\":7}],6:[function(require,module,exports){\n// TODO rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar data = module.exports = {};\n\ndata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config(\"useVegaServer\")) {\n    // don't use vega server\n    return encoding.config(\"dataUrl\");\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = []\n  encoding.forEach(function(encType, field){\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    }\n    if (field.aggr) {\n      obj.aggr = field.aggr\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name]).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config(\"vegaServerTable\"),\n    fields: fields\n  }\n\n  return encoding.config(\"vegaServerUrl\") + \"/query/?q=\" + JSON.stringify(query)\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\ndata.getSchema = function(data){\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k){\n    // find non-null data\n    var i=0, datum = data[i][k];\n    while(datum === \"\" || datum === null || datum === undefined){\n      datum = data[++i][k];\n    }\n\n    //TODO(kanitw): better type inference here\n    var type = (typeof datum === \"number\") ? \"Q\":\n      isNaN(Date.parse(datum)) ? \"O\" : \"T\";\n\n    schema.push({name: k, type: type});\n  });\n\n  return schema;\n};\n\ndata.getStats = function(data){ // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var stat = util.minmax(data, k);\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n    stats[k] = stat;\n  });\n  return stats;\n};\n\n},{\"./util\":14}],7:[function(require,module,exports){\n(function (global){\n// declare global constant\nvar g = global || window;\n\ng.TABLE = \"table\";\ng.STACKED = \"stacked\";\ng.INDEX = \"index\";\n\ng.X = \"x\";\ng.Y = \"y\";\ng.ROW = \"row\";\ng.COL = \"col\";\ng.SIZE = \"size\";\ng.SHAPE = \"shape\";\ng.COLOR = \"color\";\ng.ALPHA = \"alpha\";\ng.TEXT = \"text\";\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n//TODO refactor this to be config?\ng.MAX_BINS = 20;\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],8:[function(require,module,exports){\nvar global = require('./globals');\n\nvar legends = module.exports = {};\n\nlegends.defs = function(encoding) {\n  var _legends = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    _legends.push(legends.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: \"right\"\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    _legends.push(legends.def(SIZE, encoding, {\n      size: SIZE,\n      orient: _legends.length === 1 ? \"left\" : \"right\"\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (_legends.length === 2) {\n      // TODO: fix this\n      console.error(\"Vegalite currently only supports two _legends\");\n      return _legends;\n    }\n    _legends.push(legends.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: _legends.length === 1 ? \"left\" : \"right\"\n    }));\n  }\n\n  return _legends;\n};\n\nlegends.def = function(name, encoding, props){\n  var _legend = props;\n\n  _legend.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T)) {\n    var fn = encoding.fn(name),\n      properties = _legend.properties = _legend.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    switch (fn) {\n      case \"day\":\n      case \"month\":\n        text.scale = \"time-\"+fn;\n        break;\n    }\n  }\n\n  return _legend;\n};\n},{\"./globals\":7}],9:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar marks = module.exports = {};\n\nmarks.bar = {\n  type: \"rect\",\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.line = {\n  type: \"line\",\n  line: true,\n  prop: line_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, color:1, alpha:1}\n};\n\nmarks.area = {\n  type: \"area\",\n  stack: true,\n  line: true,\n  requiredEncoding: [\"x\", \"y\"],\n  prop: area_props,\n  supportedEncoding: marks.line.supportedEncoding\n};\n\nmarks.circle = {\n  type: \"symbol\",\n  prop: filled_point_props(\"circle\"),\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.square = {\n  type: \"symbol\",\n  prop: filled_point_props(\"square\"),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: \"symbol\",\n  prop: point_props,\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1, shape:1}\n};\n\nmarks.text = {\n  type: \"text\",\n  prop: text_props,\n  requiredEncoding: [\"text\"],\n  supportedEncoding: {row:1, col:1, size:1, color:1, alpha:1, text:1}\n};\n\nfunction bar_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T) && !e.bin(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.has(Y) && (!e.isType(Y,Q|T) || e.bin(Y))) {\n      p.x2 = {scale: X, value: 0};\n    }\n  } else if (e.has(X)) {\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T) && !e.bin(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    p.yc = {group: \"height\"};\n  }\n\n  // width\n  if (!e.isType(X,Q|T)) {\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.width = {scale: X, band: true, offset: -1};\n      p.width = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(Y,O) && !e.bin(Y)) {\n    p.width = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // height\n  if (!e.isType(Y,Q|T)) {\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.height = {scale: Y, band: true, offset: -1};\n      p.height = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(X,O) && !e.bin(X)) {\n    p.height = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, opt) {\n  var p = {};\n  opt = opt || {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.config(\"pointSize\")};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.config(\"pointShape\")};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }else{\n    p.opacity = {\n      value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n    };\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction line_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction area_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.isType(Y,Q|T) && e.has(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: \"horizontal\"};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, opt) {\n    var p = {};\n    opt = opt || {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.config(\"bandSize\")/2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.config(\"bandSize\")/2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.config(\"pointSize\")};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.config(\"color\")};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    }else {\n      p.opacity = {\n        value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n      };\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(X)) {\n    p.fontSize = {value: e.config(\"fontSize\")};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"textColor\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    p.text = {field: e.field(TEXT)};\n  } else {\n    p.text = {value: \"Abc\"};\n  }\n\n  p.font = {value: e.config(\"font\")};\n  p.fontWeight = {value: e.config(\"fontWeight\")};\n  p.fontStyle = {value: e.config(\"fontStyle\")};\n  p.baseline = {value: e.config(\"textBaseline\")};\n\n  // align\n  if (e.has(X)) {\n    if (e.isType(X,O)) {\n      p.align = {value: \"left\"};\n      p.dx = {value: e.config(\"textMargin\")};\n    } else {\n      p.align = {value: \"center\"}\n    }\n  } else if (e.has(Y)) {\n    p.align = {value: \"left\"};\n    p.dx = {value: e.config(\"textMargin\")};\n  } else {\n    p.align = {value: e.config(\"textAlign\")};\n  }\n\n  return p;\n}\n},{\"./globals\":7,\"./util\":14}],10:[function(require,module,exports){\nvar globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar scale = module.exports = {};\n\nscale.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function (names, encoding, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, opt)\n    };\n    if (s.type === \"ordinal\" && !encoding.bin(name)) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function (name, encoding) {\n  var fn;\n  switch (encoding.type(name)) {\n    case O: return \"ordinal\";\n    case T:\n      switch(encoding.fn(name)){\n        case \"second\":\n        case \"minute\":\n        case \"hour\":\n        case \"day\":\n        case \"date\":\n        case \"month\":\n          return \"ordinal\";\n        case \"year\":\n          return \"linear\";\n      }\n      return \"time\";\n    case Q:\n      if (encoding.bin(name)) {\n        return \"ordinal\";\n      }\n      return encoding.scale(name).type || \"linear\";\n  }\n};\n\nfunction scale_domain(name, encoding, opt) {\n  if (encoding.type(name) === T){\n    switch(encoding.fn(name)){\n      case \"second\":\n      case \"minute\":  return util.range(0, 60);\n      case \"hour\":    return util.range(0, 24);\n      case \"day\":     return util.range(0, 7);\n      case \"date\":    return util.range(0, 32);\n      case \"month\":   return util.range(0, 12);\n    }\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)]);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name===Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: \"data.\" + (opt.facet ? \"max_\" :\"\") + \"sum_\" + encoding.field(name, true)\n    }:\n    {data: TABLE, field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type===\"ordinal\") {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellWidth ? [0, opt.cellWidth] : \"width\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_xZero\");\n        s.reverse = spec.reverse || encoding.config(\"_xReverse\");\n      }\n      s.round = true;\n      if (s.type===\"time\"){\n        s.nice = encoding.fn(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type===\"ordinal\") {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellHeight ? [opt.cellHeight, 0] : \"height\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_yZero\");\n        s.reverse = spec.reverse || encoding.config(\"_yReverse\");\n      }\n\n      s.round = true;\n\n      if (s.type===\"time\"){\n        s.nice = encoding.fn(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = opt.cellHeight || encoding.config(\"cellHeight\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = opt.cellWidth || encoding.config(\"cellWidth\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is(\"bar\")) {\n        s.range = [3, +encoding.config(\"bandSize\")];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else {\n        s.range = [10, 1000];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = \"shapes\";\n      break;\n    case COLOR:\n      if (s.type === \"ordinal\") {\n        s.range = \"category10\";\n      } else {\n        s.range = [\"#ddf\", \"steelblue\"];\n        s.zero = false;\n      }\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error(\"Unknown encoding name: \"+s.name);\n  }\n\n  switch(s.name){\n    case ROW:\n    case COL:\n      s.padding = encoding.config(\"cellPadding\");\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === \"ordinal\") { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.config(\"bandPadding\");\n      }\n  }\n}\n},{\"./globals\":7,\"./util\":14}],11:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n//\nvar schema = module.exports = {},\n  util = require('./util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: \"string\",\n  enum: [\"point\", \"bar\", \"line\", \"area\", \"circle\", \"square\", \"text\"]\n};\n\nschema.aggr = {\n  type: \"string\",\n  enum: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n  supportedEnums: {\n    Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n    O: [\"count\"],\n    T: [\"avg\", \"min\", \"max\", \"count\"],\n    \"\": [\"count\"],\n  },\n  supportedTypes: {\"Q\": true, \"O\": true, \"T\": true, \"\": true}\n};\n\nschema.timefns = [\"month\", \"year\", \"day\", \"date\", \"hour\", \"minute\", \"second\"];\n\nschema.fn = {\n  type: \"string\",\n  enum: schema.timefns,\n  supportedTypes: {\"T\": true}\n}\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: \"string\",\n  enum: [\"linear\", \"log\",\"pow\", \"sqrt\", \"quantile\"],\n  default: \"linear\",\n  supportedTypes: {\"Q\": true}\n};\n\nschema.field = {\n  type: \"object\",\n  required: [\"name\", \"type\"],\n  properties: {\n    name: {\n      type: \"string\"\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nvar typicalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\", \"Q\", \"T\"]\n    },\n    bin: {\n      type: \"boolean\",\n      default: false,\n      supportedTypes: {\"Q\": true, \"O\": true}\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    scale: {\n      type: \"object\",\n      properties: {\n        type: schema.scale_type,\n        reverse: { type: \"boolean\", default: false },\n        zero: {\n          type: \"boolean\",\n          description: \"Include zero\",\n          default: false,\n          supportedTypes: {\"Q\": true}\n        },\n        nice: {\n          type: \"string\",\n          enum: [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"],\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\"]\n    },\n    bin: {\n      type: \"boolean\",\n      default: false,\n      supportedTypes: {\"O\": true}\n    },\n    aggr: {\n      type: \"string\",\n      enum: [\"count\"],\n      supportedTypes: {\"O\": true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: \"object\",\n  properties: {\n    axis: {\n      type: \"object\",\n      properties: {\n        grid: { type: \"boolean\", default: false },\n        title: { type: \"boolean\", default: true }\n      }\n    }\n  }\n}\n\nvar legendMixin = {\n  type: \"object\",\n  properties: {\n    legend: { type: \"boolean\", default: true }\n  }\n}\n\nvar textMixin = {\n  type: \"object\",\n  properties: {\n    text: {\n      type: \"object\",\n      properties: {\n        weight: {\n          type: \"string\",\n          enum: [\"normal\", \"bold\"],\n          default: \"normal\",\n          supportedTypes: {\"T\": true}\n        },\n        size: {\n          type: \"integer\",\n          default: 10,\n          minimum: 0,\n          supportedTypes: {\"T\": true}\n        },\n        font: {\n          type: \"string\",\n          default: \"Halvetica Neue\",\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n}\n\nvar x = merge(clone(typicalField), axisMixin);\nvar y = clone(x);\n\nvar row = clone(onlyOrdinalField);\nvar col = clone(row);\n\nvar size = merge(clone(typicalField), legendMixin);\nvar color = merge(clone(typicalField), legendMixin);\nvar alpha = clone(typicalField);\nvar shape = merge(clone(onlyOrdinalField), legendMixin);\n\nvar text = merge(clone(typicalField), textMixin);\n\nvar cfg = {\n  type: \"object\",\n  properties: {\n    // template\n    width: {\n      type: \"integer\",\n      default: undefined\n    },\n    height: {\n      type: \"integer\",\n      default: undefined\n    },\n    viewport: {\n      type: \"array\",\n      items: {\n        type: [\"integer\"]\n      },\n      default: undefined\n    },\n    _minWidth: {\n      type: \"integer\",\n      default: 20\n    },\n    _minHeight: {\n      type: \"integer\",\n      default: 20\n    },\n\n    // data source\n    dataFormatType: {\n      type: \"string\",\n      enum: [\"json\", \"csv\"],\n      default: \"json\"\n    },\n    useVegaServer: {\n      type: \"boolean\",\n      default: false\n    },\n    dataUrl: {\n      type: \"string\",\n      default: undefined\n    },\n    vegaServerTable: {\n      type: \"string\",\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: \"string\",\n      default: \"http://localhost:3001\"\n    }\n  }\n}\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: \"http://json-schema.org/draft-04/schema#\",\n  type: \"object\",\n  required: [\"marktype\", \"enc\", \"cfg\"],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: \"object\",\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text\n      }\n    },\n    cfg: cfg\n  }\n};\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function(){\n  return schema.util.instantiate(schema.schema);\n}\n\n},{\"./schemautil\":12,\"./util\":14}],12:[function(require,module,exports){\nvar util = module.exports = {};\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0\n}\n\n// instantiate a schema\nutil.instantiate = function(schema, required) {\n  if (schema.type === 'object') {\n    var requried = schema.required ? schema.required : [];\n    var instance = {};\n    for (var name in schema.properties) {\n      var child = schema.properties[name];\n      instance[name] = util.instantiate(child, requried.indexOf(name) != -1);\n    };\n    return instance;\n  } else if ('default' in schema) {\n    return schema.default;\n  } else if (schema.enum && required) {\n    return schema.enum[0];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nutil.difference = function(defaults, instance) {\n  var changes = {};\n  for (var prop in instance) {\n    if (!defaults || defaults[prop] !== instance[prop]) {\n      if (typeof instance[prop] == \"object\") {\n        var c = util.difference(defaults[prop], instance[prop]);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else {\n        changes[prop] = instance[prop];\n      }\n    }\n  }\n  return changes;\n};\n\n// recursively merges instance into defaults\nutil.merge = function (defaults, instance) {\n  if (typeof instance!=='object' || instance===null) {\n    return defaults;\n  }\n\n  for (var p in instance) {\n    if (!instance.hasOwnProperty(p))\n      continue;\n    if (instance[p]===undefined )\n      continue;\n    if (typeof instance[p] !== 'object' || instance[p] === null) {\n      defaults[p] = instance[p];\n    } else if (typeof defaults[p] !== 'object' || defaults[p] === null) {\n      defaults[p] = util.merge(instance[p].constructor === Array ? [] : {}, instance[p]);\n    } else {\n      util.merge(defaults[p], instance[p]);\n    }\n  }\n  return defaults;\n}\n\n},{}],13:[function(require,module,exports){\nvar globals = require('./globals'),\n  util = require('./util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt){\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(encType, field){\n    if(field.type === T && field.fn){\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[0],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function (field) {\n  var date = \"new Date(d.data.\"+field.name+\")\";\n  switch(field.fn){\n    case \"second\":  return date + \".getUTCSeconds()\";\n    case \"minute\":  return date + \".getUTCMinutes()\";\n    case \"hour\":    return date + \".getUTCHours()\";\n    case \"day\":     return date + \".getUTCDay()\";\n    case \"date\":    return date + \".getUTCDate()\";\n    case \"month\":   return date + \".getUTCMonth()\";\n    case \"year\":    return date + \".getUTCFullYear()\";\n  }\n  // TODO add continuous binning\n  console.error(\"no function specified for date\");\n};\n\n/** add formula transforms to data */\ntime.transform = function (transform, encoding, encType, field) {\n  transform.push({\n    type: \"formula\",\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\ntime.scale = function (scales, fn, encoding) {\n  var labelLength = encoding.config(\"timeScaleLabelLength\");\n  // TODO add option for shorter scale / custom range\n  switch(fn){\n    case \"day\":\n      scales.push({\n        name: \"time-day\",\n        type: \"ordinal\",\n        domain: util.range(0,7),\n        range: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"].map(\n          function(s){ return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case \"month\":\n      scales.push({\n        name: \"time-month\",\n        type: \"ordinal\",\n        domain: util.range(0,12),\n        range: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map(\n            function(s){ return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\n},{\"./globals\":7,\"./util\":14}],14:[function(require,module,exports){\nvar util = module.exports = {};\n\nutil.keys = function (obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n}\n\nutil.vals = function (obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n}\n\nutil.range = function (start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error(\"infinite range\");\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n}\n\nutil.find = function (list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n}\n\nutil.uniq = function (data, field) {\n  var map = {}, count = 0, i, k;\n  for (i=0; i<data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n}\n\nutil.minmax = function (data, field) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (i=0; i<data.length; ++i) {\n    var v = data[i][field];\n    if (v > stats.max) stats.max = v;\n    if (v < stats.min) stats.min = v;\n  }\n  return stats;\n}\n\nutil.duplicate = function (obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.any = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(f(arr[k], k, i++)) return true;\n  }\n  return false;\n}\n\nutil.all = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(!f(arr[k], k, i++)) return false;\n  }\n  return true;\n}\n\nutil.merge = function(dest, src){\n  return util.keys(src).reduce(function(c, k){\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.getbins = function (stats) {\n  return vg.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: MAX_BINS\n  });\n}\n\n\nutil.error = function(msg){\n  console.error(\"[VL Error]\", msg);\n}\n\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","\"use strict\";\n\nvar global = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  schema = require('./schema');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config) {\n    // TODO: caching\n    var encDefaults = schema.util.instantiate(schema.schema.properties.enc);\n    var cfgDefaults = schema.util.instantiate(schema.schema.properties.cfg);\n\n    // Hack\n    for (var k in consts.DEFAULTS) {\n      cfgDefaults[k] = consts.DEFAULTS[k];\n    }\n\n    // remove field defs that we don't use in encoding\n    for (var k in encDefaults) {\n      if (!enc[k]) {\n        delete encDefaults[k];\n      }\n    }\n\n    this._marktype = marktype;\n    this._enc = schema.util.merge(encDefaults, enc);\n    this._cfg = schema.util.merge(cfgDefaults, config);\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(x) {\n    return this._enc[x] !== undefined;\n  };\n\n  proto.enc = function(x){\n    return this._enc[x];\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(x, nodata, nofn) {\n    if (!this.has(x)) return null;\n\n    var f = (nodata ? \"\" : \"data.\");\n\n    if (this._enc[x].aggr === \"count\") {\n      return f + \"count\";\n    } else if (!nofn && this._enc[x].bin) {\n      return f + \"bin_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].aggr) {\n      return f + this._enc[x].aggr + \"_\" + this._enc[x].name;\n    } else if (!nofn && this._enc[x].fn){\n      return f + this._enc[x].fn + \"_\" + this._enc[x].name;\n    } else {\n      return f + this._enc[x].name;\n    }\n  };\n\n  proto.fieldName = function(x){\n    return this._enc[x].name;\n  }\n\n  proto.fieldTitle = function(x){\n    if (this._enc[x].aggr) {\n      return this._enc[x].aggr + \"(\" + this._enc[x].name + \")\";\n    } else {\n      return this._enc[x].name;\n    }\n  }\n\n  proto.scale = function(x){\n    return this._enc[x].scale || {};\n  }\n\n  proto.axis = function(x){\n    return this._enc[x].axis || {};\n  }\n\n  proto.aggr = function(x){\n    return this._enc[x].aggr;\n  }\n\n  proto.bin = function(x){\n    return this._enc[x].bin;\n  }\n\n  proto.legend = function(x){\n    return this._enc[x].legend;\n  }\n\n  proto.fn = function(x){\n    return this._enc[x].fn;\n  }\n\n  proto.any = function(f){\n    return util.any(this._enc, f);\n  }\n\n  proto.all = function(f){\n    return util.all(this._enc, f);\n  }\n\n  proto.length = function(){\n    return util.keys(this._enc).length;\n  }\n\n  proto.reduce = function(f, init){\n    var r = init, i=0;\n    for (k in this._enc){\n      r = f(r, this._enc[k], k, this._enc);\n    }\n    return r;\n  }\n\n  proto.forEach = function(f) {\n    var i=0, k;\n    for (k in this._enc) {\n      f(k, this._enc[k], i++);\n    }\n  };\n\n  proto.type = function(x) {\n    return this.has(x) ? this._enc[x].type : null;\n  };\n\n  proto.isType = function(x, t) {\n    var xt = this.type(x);\n    if (xt == null) return false;\n    return (xt & t) > 0;\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig){\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for(var e in enc){\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc\n    }\n\n    if(!excludeConfig){\n      spec.cfg = util.duplicate(this._cfg)\n    }\n\n    return spec;\n  };\n\n  proto.toShorthand = function(){\n    var enc = this._enc;\n    return this._marktype + \".\" + util.keys(enc).map(function(e){\n      var v = enc[e];\n        return e + \"-\" +\n          (v.aggr ? v.aggr+\"_\" : \"\") +\n          (v.fn ? v.fn+\"_\" : \"\") +\n          (v.bin ? \"bin_\" : \"\") +\n          (v.name || \"\") + \"-\" +\n          consts.dataTypeNames[v.type];\n      }\n    ).join(\".\");\n  }\n\n  Encoding.parseShorthand = function(shorthand, cfg){\n    var enc = shorthand.split(\".\"),\n      marktype = enc.shift();\n\n    enc = enc.reduce(function(m, e){\n      var split = e.split(\"-\"),\n        enctype = split[0],\n        o = {name: split[1], type: consts.dataTypes[split[2]]};\n\n      // check aggregate type\n      for(var i in schema.aggr.enum){\n        var a = schema.aggr.enum[i];\n        if(o.name.indexOf(a+\"_\") == 0){\n          o.name = o.name.substr(a.length+1);\n          if (a==\"count\" && o.name.length === 0) o.name = \"*\";\n          o.aggr = a;\n          break;\n        }\n      }\n      // check time fn\n      for(var i in schema.timefns){\n        var f = schema.timefns[i];\n        if(o.name && o.name.indexOf(f+\"_\") == 0){\n          o.name = o.name.substr(o.length+1);\n          o.fn = f;\n          break;\n        }\n      }\n\n      // check bin\n      if(o.name && o.name.indexOf(\"bin_\") == 0){\n        o.name = o.name.substr(4);\n        o.bin = true;\n      }\n\n      m[enctype] = o;\n      return m;\n    }, {});\n\n    return new Encoding(marktype, enc, cfg);\n  }\n\n  Encoding.fromSpec = function(spec, extraCfg) {\n    var enc = util.duplicate(spec.enc);\n\n    //convert type from string to bitcode (e.g, O=1)\n    for(var e in enc){\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, util.merge(spec.cfg, extraCfg || {}));\n  }\n\n  return Encoding;\n\n})();\n","var globals = require('./globals'),\n  util = require('./util');\n\nvar axis = module.exports = {};\n\naxis.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s===X || s===Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function (name, encoding, opt){\n  var type = name;\n  var isCol = name==COL, isRow = name==ROW;\n  if(isCol) type = \"x\";\n  if(isRow) type = \"y\";\n\n  var axis = {\n    type: type,\n    scale: name,\n  };\n\n  if (encoding.isType(name, Q)) {\n    //TODO(kanitw): better determine # of ticks\n    axis.ticks = 3;\n  }\n\n  if (encoding.axis(name).grid) {\n    axis.grid = true;\n    axis.layer = \"back\";\n  }\n\n  if (encoding.axis(name).title) {\n    //show title by default\n\n    axis = axis_title(axis, name, encoding, opt);\n  }\n\n  if(isRow || isCol){\n    axis.properties = {\n      ticks: { opacity: {value: 0} },\n      majorTicks: { opacity: {value: 0} },\n      axis: { opacity: {value: 0} }\n    };\n  }\n  if(isCol){\n    axis.offset = [opt.xAxisMargin || 0, encoding.config(\"yAxisMargin\")];\n    axis.orient = \"top\";\n  }\n\n  if (name==\"x\" && (encoding.isType(name, O|T) || encoding.bin(name))) {\n    axis.properties = {\n      labels: {\n        angle: {value: 270},\n        align: {value: \"right\"},\n        baseline: {value: \"middle\"}\n      }\n    };\n  }\n\n  // add custom label for time type\n  if (encoding.isType(name, T)) {\n    var fn = encoding.fn(name),\n      properties = axis.properties = axis.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    switch (fn) {\n      case \"day\":\n      case \"month\":\n        text.scale = \"time-\"+fn;\n        break;\n    }\n  }\n\n  return axis;\n};\n\nfunction axis_title(axis, name, encoding, opt){\n  axis.title = encoding.fieldTitle(name);\n  if(name==Y){\n    axis.titleOffset = 60;\n    // TODO: set appropriate titleOffset\n    // maybe based on some string length from stats\n  }\n  return axis;\n}\n","var globals = require('./globals'),\n  util = require('./util'),\n  axis = require('./axis'),\n  legends = require('./legends'),\n  marks = require('./marks'),\n  scale = require('./scale'),\n  time = require('./time');\n\nvar compile = module.exports = function(encoding, stats) {\n  var size = setSize(encoding, stats),\n    cellWidth = size.cellWidth,\n    cellHeight = size.cellHeight;\n\n  var hasAgg = encoding.any(function(v, k){\n    return v.aggr !== undefined;\n  });\n\n  var spec = template(encoding, size, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdef = markdef(mark, encoding, {\n      hasAggregate: hasAgg\n    });\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  group.marks.push(mdef);\n  // TODO: return value not used\n  binning(spec.data[0], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if(!preaggregatedData){\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec.data[0], encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfacet(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isType(X, Q | T) && encoding.isType(Y, O)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    mdef.from.transform = [{type: \"sort\", by: encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding);\n    group.legends = legends.defs(encoding);\n  }\n  return spec;\n};\n\nfunction getCardinality(encoding, encType, stats){\n  var field = encoding.fieldName(encType);\n  if (encoding.bin(encType)) {\n    var bins = util.getbins(stats[field]);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  return stats[field].cardinality;\n}\n\nfunction setSize(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y);\n\n  // HACK to set chart size\n  // NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  // One solution is to update Vega to support auto-sizing\n  // In the meantime, auto-padding (mostly) does the trick\n  //\n  var colCardinality = hasCol ? getCardinality(encoding, COL, stats) : 1,\n    rowCardinality = hasRow ? getCardinality(encoding, ROW, stats) : 1;\n\n  var cellWidth = hasX ?\n      +encoding.config(\"cellWidth\") || encoding.config(\"width\") * 1.0 / colCardinality :\n      encoding.marktype() === \"text\" ?\n        +encoding.config(\"textCellWidth\") :\n        +encoding.config(\"bandSize\"),\n    cellHeight = hasY ?\n      +encoding.config(\"cellHeight\") || encoding.config(\"height\") * 1.0 / rowCardinality :\n      +encoding.config(\"bandSize\"),\n    cellPadding = encoding.config(\"cellPadding\"),\n    bandPadding = encoding.config(\"bandPadding\"),\n    width = encoding.config(\"_minWidth\"),\n    height = encoding.config(\"_minHeight\");\n\n  if (hasX && (encoding.isType(X, O) || encoding.bin(X))) { //ordinal field will override parent\n    // bands within cell use rangePoints()\n    var xCardinality = getCardinality(encoding, X, stats);\n    cellWidth = (xCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  width = cellWidth * ((1 + cellPadding) * (colCardinality-1) + 1);\n\n  if (hasY && (encoding.isType(Y, O) || encoding.bin(Y))) {\n    // bands within cell use rangePoint()\n    var yCardinality = getCardinality(encoding, Y, stats);\n    cellHeight = (yCardinality + bandPadding) * +encoding.config(\"bandSize\");\n  }\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n  height = cellHeight * ((1 + cellPadding) * (rowCardinality-1) + 1);\n\n  return {\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    width: width,\n    height:height\n  };\n}\n\nfunction facet(group, encoding, cellHeight, cellWidth, spec, mdef, stack, stats) {\n    var enter = group.properties.enter;\n    var facetKeys = [], cellAxes = [];\n\n    var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n    var xAxisMargin = encoding.has(Y) ? encoding.config(\"xAxisMargin\") : undefined;\n\n    enter.fill = {value: encoding.config(\"cellBackgroundColor\")};\n\n    //move \"from\" to cell level and add facet transform\n    group.from = {data: group.marks[0].from.data};\n\n    if (group.marks[0].from.transform) {\n      delete group.marks[0].from.data; //need to keep transform for subfacetting case\n    } else {\n      delete group.marks[0].from;\n    }\n    if (hasRow) {\n      if (!encoding.isType(ROW, O)) {\n        util.error(\"Row encoding should be ordinal.\");\n      }\n      enter.y = {scale: ROW, field: \"keys.\" + facetKeys.length};\n      enter.height = {\"value\": cellHeight}; // HACK\n\n      facetKeys.push(encoding.field(ROW));\n\n      var from;\n      if (hasCol) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(COL)]});\n      }\n\n      var axesGrp = groupdef(\"x-axes\", {\n          axes: encoding.has(X) ?  axis.defs([\"x\"], encoding) : undefined,\n          x: hasCol ? {scale: COL, field: \"keys.0\", offset: xAxisMargin} : {value: xAxisMargin},\n          width: hasCol && {\"value\": cellWidth}, //HACK?\n          from: from\n        });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || []);\n      spec.axes.push.apply(spec.axes, axis.defs([\"row\"], encoding));\n    } else { // doesn't have row\n      if(encoding.has(X)){\n        //keep x axis in the cell\n        cellAxes.push.apply(cellAxes, axis.defs([\"x\"], encoding));\n      }\n    }\n\n    if (hasCol) {\n      if (!encoding.isType(COL, O)) {\n        util.error(\"Col encoding should be ordinal.\");\n      }\n      enter.x = {scale: COL, field: \"keys.\" + facetKeys.length};\n      enter.width = {\"value\": cellWidth}; // HACK\n\n      facetKeys.push(encoding.field(COL));\n\n      var from;\n      if (hasRow) {\n        from = util.duplicate(group.from);\n        from.transform = from.transform || [];\n        from.transform.unshift({type: \"facet\", keys: [encoding.field(ROW)]});\n      }\n\n      var axesGrp = groupdef(\"y-axes\", {\n        axes: encoding.has(Y) ? axis.defs([\"y\"], encoding) : undefined,\n        y: hasRow && {scale: ROW, field: \"keys.0\"},\n        x: hasRow && {value: xAxisMargin},\n        height: hasRow && {\"value\": cellHeight}, //HACK?\n        from: from\n      });\n\n      spec.marks.push(axesGrp);\n      (spec.axes = spec.axes || [])\n      spec.axes.push.apply(spec.axes, axis.defs([\"col\"], encoding, {\n        xAxisMargin: xAxisMargin\n      }));\n    } else { // doesn't have col\n      if(encoding.has(Y)){\n        cellAxes.push.apply(cellAxes, axis.defs([\"y\"], encoding));\n      }\n    }\n\n    if(hasRow){\n      if(enter.x) enter.x.offset= xAxisMargin;\n      else enter.x = {value: xAxisMargin};\n    }\n    if(hasCol){\n      //TODO fill here..\n    }\n\n    // assuming equal cellWidth here\n    // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n    spec.scales = (spec.scales ||[]).concat(scale.defs(\n      scale.names(enter).concat(scale.names(mdef.properties.update)),\n      encoding,\n      {cellWidth: cellWidth, cellHeight: cellHeight, stack: stack, facet:true, stats: stats}\n    )); // row/col scales + cell scales\n\n    if (cellAxes.length > 0) {\n      group.axes = cellAxes;\n    }\n\n    // add facet transform\n    var trans = (group.from.transform || (group.from.transform = []));\n    trans.unshift({type: \"facet\", keys: facetKeys});\n\n  return spec;\n  }\n\nfunction subfacet(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef(\"subfacet\", {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: \"facet\", keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: \"sort\", by: encoding.field(COLOR)});\n  }\n}\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n  encoding.forEach(function(vv, d) {\n    if (d.bin) bins[d.name] = d.name;\n  });\n  bins = util.keys(bins);\n\n  if (bins.length === 0 || opt.preaggregatedData) return false;\n\n  if (!spec.transform) spec.transform = [];\n  bins.forEach(function(d) {\n    spec.transform.push({\n      type: \"bin\",\n      field: \"data.\" + d,\n      output: \"data.bin_\" + d,\n      maxbins: MAX_BINS\n    });\n  });\n  return bins;\n}\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n  var dims = {}, meas = {}, detail = {}, facets={};\n  encoding.forEach(function(encType, field) {\n    if (field.aggr) {\n      if(field.aggr===\"count\"){\n        meas[\"count\"] = {op:\"count\", field:\"*\"};\n      }else{\n        meas[field.aggr+\"|\"+field.name] = {\n          op:field.aggr,\n          field:\"data.\"+field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType==ROW || encType == COL){\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!spec.transform) spec.transform = [];\n    spec.transform.push({\n      type: \"aggregate\",\n      groupby: dims,\n      fields: meas\n    });\n\n    if (encoding.marktype() === TEXT) {\n      meas.forEach( function (m) {\n        var fieldName = m.field.substr(5), //remove \"data.\"\n          field = \"data.\" + (m.op ? m.op + \"_\" : \"\") + fieldName;\n        spec.transform.push({\n          type: \"formula\",\n          field: field,\n          expr: \"d3.format('.2f')(d.\"+field+\")\"\n        });\n      });\n    }\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  }\n}\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n  if (!encoding.has(COLOR)) return false;\n\n  var dim = X, val = Y, idx = 1;\n  if (encoding.isType(X,Q|T) && !encoding.isType(Y,Q|T) && encoding.has(Y)) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: \"aggregate\",\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: \"sum\", field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if(facets && facets.length > 0){\n    stacked.transform.push({ //calculate max for each facet\n      type: \"aggregate\",\n      groupby: facets,\n      fields: [{op: \"max\", field: \"data.sum_\" + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: \"stack\",\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val+\"2\"}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val+\"2\"] = mdef.properties.enter[val+\"2\"] = {scale: val, field: val+\"2\"};\n\n  return val; //return stack encoding\n}\n\n\nfunction markdef(mark, encoding, opt) {\n  var p = mark.prop(encoding, opt)\n  return {\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  };\n}\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: \"group\",\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: \"width\"},\n        height: opt.height || {group: \"height\"}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\nfunction template(encoding, size, stats) { //hack use stats\n\n  var data = {name:TABLE, format: {type: encoding.config(\"dataFormatType\")}},\n    dataUrl = vl.data.getUrl(encoding, stats);\n  if(dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config(\"useVegaServer\");\n\n  encoding.forEach(function(encType, field){\n    if(field.type == T){\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = \"date\";\n    }else if(field.type == Q){\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === \"count\") {\n        var name = \"count\";\n      } else if(preaggregatedData && field.bin){\n        var name = \"bin_\" + field.name;\n      } else if(preaggregatedData && field.aggr){\n        var name = field.aggr + \"_\" + field.name;\n      } else{\n        var name = field.name;\n      }\n      data.format.parse[name] = \"number\";\n    }\n  });\n\n  return {\n    width: size.width,\n    height: size.height,\n    padding: \"auto\",\n    data: [data],\n    marks: [groupdef(\"cell\", {\n      width: size.cellWidth ? {value: size.cellWidth}: undefined,\n      height: size.cellHeight ? {value: size.cellHeight} : undefined\n    })]\n  };\n}\n","var globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT];\n\nconsts.dataTypes = {\"O\": O, \"Q\": Q, \"T\": T};\n\nconsts.dataTypeNames = [\"O\",\"Q\",\"T\"].reduce(function(r,x) {\n  r[consts.dataTypes[x]] = x; return r;\n},{});\n\nconsts.DEFAULTS = {\n  //small multiples\n  cellHeight: 200, // will be overwritten by bandWidth\n  cellWidth: 200, // will be overwritten by bandWidth\n  cellPadding: 0.1,\n  cellBackgroundColor: \"#fdfdfd\",\n  xAxisMargin: 80,\n  yAxisMargin: 0,\n  textCellWidth: 90,\n\n  // marks\n  bandSize: 21,\n  bandPadding: 1,\n  pointSize: 50,\n  pointShape: \"circle\",\n  strokeWidth: 2,\n  color: \"steelblue\",\n  textColor: \"black\",\n  textAlign: \"left\",\n  textBaseline: \"middle\",\n  textMargin: 4,\n  font: \"Helvetica Neue\",\n  fontSize: \"12\",\n  fontWeight: \"normal\",\n  fontStyle: \"normal\",\n  opacity: 1,\n  _thickOpacity: 0.5,\n  _thinOpacity: 0.2,\n\n  // scales\n  // TODO remove _xZero, ...\n  _xZero: true,\n  _xReverse: false,\n  _yZero: true,\n  _yReverse: false,\n  timeScaleNice: \"day\",\n  timeScaleLabelLength: 3\n};","// TODO rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar data = module.exports = {};\n\ndata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config(\"useVegaServer\")) {\n    // don't use vega server\n    return encoding.config(\"dataUrl\");\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = []\n  encoding.forEach(function(encType, field){\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    }\n    if (field.aggr) {\n      obj.aggr = field.aggr\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name]).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config(\"vegaServerTable\"),\n    fields: fields\n  }\n\n  return encoding.config(\"vegaServerUrl\") + \"/query/?q=\" + JSON.stringify(query)\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\ndata.getSchema = function(data){\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k){\n    // find non-null data\n    var i=0, datum = data[i][k];\n    while(datum === \"\" || datum === null || datum === undefined){\n      datum = data[++i][k];\n    }\n\n    //TODO(kanitw): better type inference here\n    var type = (typeof datum === \"number\") ? \"Q\":\n      isNaN(Date.parse(datum)) ? \"O\" : \"T\";\n\n    schema.push({name: k, type: type});\n  });\n\n  return schema;\n};\n\ndata.getStats = function(data){ // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var stat = util.minmax(data, k);\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n    stats[k] = stat;\n  });\n  return stats;\n};\n","// declare global constant\nvar g = global || window;\n\ng.TABLE = \"table\";\ng.STACKED = \"stacked\";\ng.INDEX = \"index\";\n\ng.X = \"x\";\ng.Y = \"y\";\ng.ROW = \"row\";\ng.COL = \"col\";\ng.SIZE = \"size\";\ng.SHAPE = \"shape\";\ng.COLOR = \"color\";\ng.ALPHA = \"alpha\";\ng.TEXT = \"text\";\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n//TODO refactor this to be config?\ng.MAX_BINS = 20;","var global = require('./globals');\n\nvar legends = module.exports = {};\n\nlegends.defs = function(encoding) {\n  var _legends = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    _legends.push(legends.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: \"right\"\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    _legends.push(legends.def(SIZE, encoding, {\n      size: SIZE,\n      orient: _legends.length === 1 ? \"left\" : \"right\"\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (_legends.length === 2) {\n      // TODO: fix this\n      console.error(\"Vegalite currently only supports two _legends\");\n      return _legends;\n    }\n    _legends.push(legends.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: _legends.length === 1 ? \"left\" : \"right\"\n    }));\n  }\n\n  return _legends;\n};\n\nlegends.def = function(name, encoding, props){\n  var _legend = props;\n\n  _legend.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T)) {\n    var fn = encoding.fn(name),\n      properties = _legend.properties = _legend.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    switch (fn) {\n      case \"day\":\n      case \"month\":\n        text.scale = \"time-\"+fn;\n        break;\n    }\n  }\n\n  return _legend;\n};","var globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar marks = module.exports = {};\n\nmarks.bar = {\n  type: \"rect\",\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.line = {\n  type: \"line\",\n  line: true,\n  prop: line_props,\n  requiredEncoding: [\"x\", \"y\"],\n  supportedEncoding: {row:1, col:1, x:1, y:1, color:1, alpha:1}\n};\n\nmarks.area = {\n  type: \"area\",\n  stack: true,\n  line: true,\n  requiredEncoding: [\"x\", \"y\"],\n  prop: area_props,\n  supportedEncoding: marks.line.supportedEncoding\n};\n\nmarks.circle = {\n  type: \"symbol\",\n  prop: filled_point_props(\"circle\"),\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1}\n};\n\nmarks.square = {\n  type: \"symbol\",\n  prop: filled_point_props(\"square\"),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: \"symbol\",\n  prop: point_props,\n  supportedEncoding: {row:1, col:1, x:1, y:1, size:1, color:1, alpha:1, shape:1}\n};\n\nmarks.text = {\n  type: \"text\",\n  prop: text_props,\n  requiredEncoding: [\"text\"],\n  supportedEncoding: {row:1, col:1, size:1, color:1, alpha:1, text:1}\n};\n\nfunction bar_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T) && !e.bin(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.has(Y) && (!e.isType(Y,Q|T) || e.bin(Y))) {\n      p.x2 = {scale: X, value: 0};\n    }\n  } else if (e.has(X)) {\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T) && !e.bin(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    p.yc = {group: \"height\"};\n  }\n\n  // width\n  if (!e.isType(X,Q|T)) {\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.width = {scale: X, band: true, offset: -1};\n      p.width = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(Y,O) && !e.bin(Y)) {\n    p.width = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // height\n  if (!e.isType(Y,Q|T)) {\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      // p.height = {scale: Y, band: true, offset: -1};\n      p.height = {value: +e.config(\"bandSize\"), offset: -1};\n    }\n  } else if (!e.isType(X,O) && !e.bin(X)) {\n    p.height = {value: +e.config(\"bandSize\"), offset: -1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, opt) {\n  var p = {};\n  opt = opt || {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.config(\"pointSize\")};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.config(\"pointShape\")};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }else{\n    p.opacity = {\n      value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n    };\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction line_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config(\"strokeWidth\")};\n\n  return p;\n}\n\nfunction area_props(e) {\n  var p = {};\n\n  // x\n  if (e.isType(X,Q|T)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (!e.isType(Y,Q|T) && e.has(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: \"horizontal\"};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isType(Y,Q|T)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: \"height\"};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"color\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, opt) {\n    var p = {};\n    opt = opt || {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.config(\"bandSize\")/2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.config(\"bandSize\")/2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.config(\"pointSize\")};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.config(\"color\")};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    }else {\n      p.opacity = {\n        value: e.config(\"opacity\") || e.config(opt.hasAggregate ? \"_thickOpacity\" : \"_thinOpacity\")\n      };\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.config(\"bandSize\")/2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.config(\"bandSize\")/2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(X)) {\n    p.fontSize = {value: e.config(\"fontSize\")};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.config(\"textColor\")};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    p.text = {field: e.field(TEXT)};\n  } else {\n    p.text = {value: \"Abc\"};\n  }\n\n  p.font = {value: e.config(\"font\")};\n  p.fontWeight = {value: e.config(\"fontWeight\")};\n  p.fontStyle = {value: e.config(\"fontStyle\")};\n  p.baseline = {value: e.config(\"textBaseline\")};\n\n  // align\n  if (e.has(X)) {\n    if (e.isType(X,O)) {\n      p.align = {value: \"left\"};\n      p.dx = {value: e.config(\"textMargin\")};\n    } else {\n      p.align = {value: \"center\"}\n    }\n  } else if (e.has(Y)) {\n    p.align = {value: \"left\"};\n    p.dx = {value: e.config(\"textMargin\")};\n  } else {\n    p.align = {value: e.config(\"textAlign\")};\n  }\n\n  return p;\n}","var globals = require(\"./globals\"),\n  util = require(\"./util\");\n\nvar scale = module.exports = {};\n\nscale.names = function (props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function (names, encoding, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, opt)\n    };\n    if (s.type === \"ordinal\" && !encoding.bin(name)) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function (name, encoding) {\n  var fn;\n  switch (encoding.type(name)) {\n    case O: return \"ordinal\";\n    case T:\n      switch(encoding.fn(name)){\n        case \"second\":\n        case \"minute\":\n        case \"hour\":\n        case \"day\":\n        case \"date\":\n        case \"month\":\n          return \"ordinal\";\n        case \"year\":\n          return \"linear\";\n      }\n      return \"time\";\n    case Q:\n      if (encoding.bin(name)) {\n        return \"ordinal\";\n      }\n      return encoding.scale(name).type || \"linear\";\n  }\n};\n\nfunction scale_domain(name, encoding, opt) {\n  if (encoding.type(name) === T){\n    switch(encoding.fn(name)){\n      case \"second\":\n      case \"minute\":  return util.range(0, 60);\n      case \"hour\":    return util.range(0, 24);\n      case \"day\":     return util.range(0, 7);\n      case \"date\":    return util.range(0, 32);\n      case \"month\":   return util.range(0, 12);\n    }\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)]);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name===Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: \"data.\" + (opt.facet ? \"max_\" :\"\") + \"sum_\" + encoding.field(name, true)\n    }:\n    {data: TABLE, field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type===\"ordinal\") {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellWidth ? [0, opt.cellWidth] : \"width\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_xZero\");\n        s.reverse = spec.reverse || encoding.config(\"_xReverse\");\n      }\n      s.round = true;\n      if (s.type===\"time\"){\n        s.nice = encoding.fn(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type===\"ordinal\") {\n        s.bandWidth = +encoding.config(\"bandSize\");\n      } else {\n        s.range = opt.cellHeight ? [opt.cellHeight, 0] : \"height\";\n        //TODO zero and reverse should become generic, and we just read default from either the schema or the schema generator\n        s.zero = spec.zero || encoding.config(\"_yZero\");\n        s.reverse = spec.reverse || encoding.config(\"_yReverse\");\n      }\n\n      s.round = true;\n\n      if (s.type===\"time\"){\n        s.nice = encoding.fn(s.name) || encoding.config(\"timeScaleNice\");\n      }else{\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = opt.cellHeight || encoding.config(\"cellHeight\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = opt.cellWidth || encoding.config(\"cellWidth\");\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is(\"bar\")) {\n        s.range = [3, +encoding.config(\"bandSize\")];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else {\n        s.range = [10, 1000];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = \"shapes\";\n      break;\n    case COLOR:\n      if (s.type === \"ordinal\") {\n        s.range = \"category10\";\n      } else {\n        s.range = [\"#ddf\", \"steelblue\"];\n        s.zero = false;\n      }\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error(\"Unknown encoding name: \"+s.name);\n  }\n\n  switch(s.name){\n    case ROW:\n    case COL:\n      s.padding = encoding.config(\"cellPadding\");\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === \"ordinal\") { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.config(\"bandPadding\");\n      }\n  }\n}","// Package of defining Vegalite Specification's json schema\n//\nvar schema = module.exports = {},\n  util = require('./util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: \"string\",\n  enum: [\"point\", \"bar\", \"line\", \"area\", \"circle\", \"square\", \"text\"]\n};\n\nschema.aggr = {\n  type: \"string\",\n  enum: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n  supportedEnums: {\n    Q: [\"avg\", \"sum\", \"min\", \"max\", \"count\"],\n    O: [\"count\"],\n    T: [\"avg\", \"min\", \"max\", \"count\"],\n    \"\": [\"count\"],\n  },\n  supportedTypes: {\"Q\": true, \"O\": true, \"T\": true, \"\": true}\n};\n\nschema.timefns = [\"month\", \"year\", \"day\", \"date\", \"hour\", \"minute\", \"second\"];\n\nschema.fn = {\n  type: \"string\",\n  enum: schema.timefns,\n  supportedTypes: {\"T\": true}\n}\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: \"string\",\n  enum: [\"linear\", \"log\",\"pow\", \"sqrt\", \"quantile\"],\n  default: \"linear\",\n  supportedTypes: {\"Q\": true}\n};\n\nschema.field = {\n  type: \"object\",\n  required: [\"name\", \"type\"],\n  properties: {\n    name: {\n      type: \"string\"\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nvar typicalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\", \"Q\", \"T\"]\n    },\n    bin: {\n      type: \"boolean\",\n      default: false,\n      supportedTypes: {\"Q\": true, \"O\": true}\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    scale: {\n      type: \"object\",\n      properties: {\n        type: schema.scale_type,\n        reverse: { type: \"boolean\", default: false },\n        zero: {\n          type: \"boolean\",\n          description: \"Include zero\",\n          default: false,\n          supportedTypes: {\"Q\": true}\n        },\n        nice: {\n          type: \"string\",\n          enum: [\"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"year\"],\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: \"object\",\n  properties: {\n    type: {\n      type: \"string\",\n      enum: [\"O\"]\n    },\n    bin: {\n      type: \"boolean\",\n      default: false,\n      supportedTypes: {\"O\": true}\n    },\n    aggr: {\n      type: \"string\",\n      enum: [\"count\"],\n      supportedTypes: {\"O\": true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: \"object\",\n  properties: {\n    axis: {\n      type: \"object\",\n      properties: {\n        grid: { type: \"boolean\", default: false },\n        title: { type: \"boolean\", default: true }\n      }\n    }\n  }\n}\n\nvar legendMixin = {\n  type: \"object\",\n  properties: {\n    legend: { type: \"boolean\", default: true }\n  }\n}\n\nvar textMixin = {\n  type: \"object\",\n  properties: {\n    text: {\n      type: \"object\",\n      properties: {\n        weight: {\n          type: \"string\",\n          enum: [\"normal\", \"bold\"],\n          default: \"normal\",\n          supportedTypes: {\"T\": true}\n        },\n        size: {\n          type: \"integer\",\n          default: 10,\n          minimum: 0,\n          supportedTypes: {\"T\": true}\n        },\n        font: {\n          type: \"string\",\n          default: \"Halvetica Neue\",\n          supportedTypes: {\"T\": true}\n        }\n      }\n    }\n  }\n}\n\nvar x = merge(clone(typicalField), axisMixin);\nvar y = clone(x);\n\nvar row = clone(onlyOrdinalField);\nvar col = clone(row);\n\nvar size = merge(clone(typicalField), legendMixin);\nvar color = merge(clone(typicalField), legendMixin);\nvar alpha = clone(typicalField);\nvar shape = merge(clone(onlyOrdinalField), legendMixin);\n\nvar text = merge(clone(typicalField), textMixin);\n\nvar cfg = {\n  type: \"object\",\n  properties: {\n    // template\n    width: {\n      type: \"integer\",\n      default: undefined\n    },\n    height: {\n      type: \"integer\",\n      default: undefined\n    },\n    viewport: {\n      type: \"array\",\n      items: {\n        type: [\"integer\"]\n      },\n      default: undefined\n    },\n    _minWidth: {\n      type: \"integer\",\n      default: 20\n    },\n    _minHeight: {\n      type: \"integer\",\n      default: 20\n    },\n\n    // data source\n    dataFormatType: {\n      type: \"string\",\n      enum: [\"json\", \"csv\"],\n      default: \"json\"\n    },\n    useVegaServer: {\n      type: \"boolean\",\n      default: false\n    },\n    dataUrl: {\n      type: \"string\",\n      default: undefined\n    },\n    vegaServerTable: {\n      type: \"string\",\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: \"string\",\n      default: \"http://localhost:3001\"\n    }\n  }\n}\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: \"http://json-schema.org/draft-04/schema#\",\n  type: \"object\",\n  required: [\"marktype\", \"enc\", \"cfg\"],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: \"object\",\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text\n      }\n    },\n    cfg: cfg\n  }\n};\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function(){\n  return schema.util.instantiate(schema.schema);\n}\n","var util = module.exports = {};\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0\n}\n\n// instantiate a schema\nutil.instantiate = function(schema, required) {\n  if (schema.type === 'object') {\n    var requried = schema.required ? schema.required : [];\n    var instance = {};\n    for (var name in schema.properties) {\n      var child = schema.properties[name];\n      instance[name] = util.instantiate(child, requried.indexOf(name) != -1);\n    };\n    return instance;\n  } else if ('default' in schema) {\n    return schema.default;\n  } else if (schema.enum && required) {\n    return schema.enum[0];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nutil.difference = function(defaults, instance) {\n  var changes = {};\n  for (var prop in instance) {\n    if (!defaults || defaults[prop] !== instance[prop]) {\n      if (typeof instance[prop] == \"object\") {\n        var c = util.difference(defaults[prop], instance[prop]);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else {\n        changes[prop] = instance[prop];\n      }\n    }\n  }\n  return changes;\n};\n\n// recursively merges instance into defaults\nutil.merge = function (defaults, instance) {\n  if (typeof instance!=='object' || instance===null) {\n    return defaults;\n  }\n\n  for (var p in instance) {\n    if (!instance.hasOwnProperty(p))\n      continue;\n    if (instance[p]===undefined )\n      continue;\n    if (typeof instance[p] !== 'object' || instance[p] === null) {\n      defaults[p] = instance[p];\n    } else if (typeof defaults[p] !== 'object' || defaults[p] === null) {\n      defaults[p] = util.merge(instance[p].constructor === Array ? [] : {}, instance[p]);\n    } else {\n      util.merge(defaults[p], instance[p]);\n    }\n  }\n  return defaults;\n}\n","var globals = require('./globals'),\n  util = require('./util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt){\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(encType, field){\n    if(field.type === T && field.fn){\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[0],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function (field) {\n  var date = \"new Date(d.data.\"+field.name+\")\";\n  switch(field.fn){\n    case \"second\":  return date + \".getUTCSeconds()\";\n    case \"minute\":  return date + \".getUTCMinutes()\";\n    case \"hour\":    return date + \".getUTCHours()\";\n    case \"day\":     return date + \".getUTCDay()\";\n    case \"date\":    return date + \".getUTCDate()\";\n    case \"month\":   return date + \".getUTCMonth()\";\n    case \"year\":    return date + \".getUTCFullYear()\";\n  }\n  // TODO add continuous binning\n  console.error(\"no function specified for date\");\n};\n\n/** add formula transforms to data */\ntime.transform = function (transform, encoding, encType, field) {\n  transform.push({\n    type: \"formula\",\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\ntime.scale = function (scales, fn, encoding) {\n  var labelLength = encoding.config(\"timeScaleLabelLength\");\n  // TODO add option for shorter scale / custom range\n  switch(fn){\n    case \"day\":\n      scales.push({\n        name: \"time-day\",\n        type: \"ordinal\",\n        domain: util.range(0,7),\n        range: [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"].map(\n          function(s){ return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case \"month\":\n      scales.push({\n        name: \"time-month\",\n        type: \"ordinal\",\n        domain: util.range(0,12),\n        range: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"].map(\n            function(s){ return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n","var util = module.exports = {};\n\nutil.keys = function (obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n}\n\nutil.vals = function (obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n}\n\nutil.range = function (start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error(\"infinite range\");\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n}\n\nutil.find = function (list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n}\n\nutil.uniq = function (data, field) {\n  var map = {}, count = 0, i, k;\n  for (i=0; i<data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n}\n\nutil.minmax = function (data, field) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (i=0; i<data.length; ++i) {\n    var v = data[i][field];\n    if (v > stats.max) stats.max = v;\n    if (v < stats.min) stats.min = v;\n  }\n  return stats;\n}\n\nutil.duplicate = function (obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.any = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(f(arr[k], k, i++)) return true;\n  }\n  return false;\n}\n\nutil.all = function(arr, f){\n  var i=0, k;\n  for (k in arr) {\n    if(!f(arr[k], k, i++)) return false;\n  }\n  return true;\n}\n\nutil.merge = function(dest, src){\n  return util.keys(src).reduce(function(c, k){\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.getbins = function (stats) {\n  return vg.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: MAX_BINS\n  });\n}\n\n\nutil.error = function(msg){\n  console.error(\"[VL Error]\", msg);\n}\n\n"],"sourceRoot":"/source/"}