{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/vl","vegalite.js","src/Encoding.js","src/compile/aggregates.js","src/compile/axis.js","src/compile/binning.js","src/compile/compile.js","src/compile/faceting.js","src/compile/filter.js","src/compile/group.js","src/compile/layout.js","src/compile/legend.js","src/compile/marks.js","src/compile/scale.js","src/compile/sort.js","src/compile/stacking.js","src/compile/style.js","src/compile/subfaceting.js","src/compile/template.js","src/compile/time.js","src/consts.js","src/data.js","src/enc.js","src/field.js","src/globals.js","src/schema/schema.js","src/schema/schemautil.js","src/util.js"],"names":["e","exports","module","define","amd","f","window","global","self","vl","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"util","consts","merge","Encoding","compile","data","field","enc","schema","toShorthand","shorthand","./Encoding","./compile/compile","./consts","./data","./enc","./field","./globals","./schema/schema","./util",2,"vlfield","vlenc","marktype","config","filter","theme","defaults","instantiate","spec","cfg","type","dataTypes","specExtended","this","_marktype","_enc","_cfg","_filter","proto","prototype","is","m","has","encType","undefined","name","et","filterNull","fields","forEach","fieldList","fieldName","Q","containsType","T","O","push","operands","operator","concat","nodata","nofn","aggr","bin","fn","fieldTitle","isCount","count","displayName","toUpperCase","scale","axis","band","bandSize","useSmallBand","Y","ROW","X","COL","size","maxbins","MAXBINS_DEFAULT","legend","value","sort","stats","isType","byCode","toggleSort","support","qField","x","y","reverse","any","all","keys","map","reduce","init","role","text","prop","TEXT","font","fieldDef","isOrdinalScale","encoding","isDimension","isMeasure","isAggregate","alwaysNoOcclusion","isStack","color","cardinality","isRaw","toSpec","excludeConfig","duplicate","dataTypeNames","subtract","c","assign","delim","fromShorthand","split","shift","trim","specFromShorthand","fromSpec","transpose","oldenc","row","col","direction","useTypeCode","mode","get","toggleFilterNullO","numNulls","./compile/time",3,"aggregates","opt","dims","meas","detail","facets","op","vals","preaggregatedData","transform","groupby","details","aggregated","../globals","../util",4,"axis_title","def","layout","maxlength","cellWidth","cellHeight","title","truncate","setter","angle","align","baseline","dy","height","titleOffset","axisTitleOffset","axis_labels","time","hasScale","textTemplatePath","format","maxLabelLength","getter","names","props","defs","isCol","isRow","rowOffset","cellPadding","grid","layer","offset","stroke","x2","group","mult","opacity","orient","ticks","./time",5,"binning","output",6,"template","marks","vlsort","vlstyle","style","faceting","stacking","subfaceting","mark","mdefs","mdef","addFilters","sorting","hasRow","hasCol","lineType","line","aggResult","hasDetails","stack","from","by","legends","scales","properties","update","axes","filterLessThanZero","../Encoding","./aggregates","./axis","./binning","./faceting","./filter","./group","./layout","./legend","./marks","./scale","./sort","./stacking","./style","./subfaceting","./template",7,"axesGrp","enter","facetKeys","cellAxes","fill","error","unshift","groupdef","width","apply","facet","trans",8,"BINARY",">",">=","=","!=","<","<=","filters","condition","op1","op2","j","console","warn","test",9,"_name",10,"vllayout","box","hasX","hasY","xCardinality","yCardinality","padding","colCardinality","rowCardinality","maxLength","Math","min","../field","../schema/schema",11,"COLOR","SIZE","SHAPE","shape","labels",12,"bar_props","p","xc","y2","yc","ALPHA","point_props","strokeWidth","line_props","area_props","tick_props","filled_point_props","text_props","fontSize","fontWeight","fontStyle","bg","TABLE","bar","requiredEncoding","supportedEncoding","alpha","area","tick","circle","square","point",13,"scale_domain","range","domain","bins","getbins","start","stop","step","STACKED","getDataset","scale_range","bandWidth","zero","round","nice","max","colorRange","outerPadding","points",14,"addSortTransforms","datasetMapping","counter","sortBy","d","byClause","dataName","transforms","source","RAW",15,"dim","val","idx","isXMeasure","isYMeasure","stacked","y1","y0",16,"estimateOpacity","numPoints","numMultiples",17,"g",18,"table","dataUrl","vldata","getUrl","url","parse","../data",19,"timeFields","timeFn","tf","fieldFn","func","stat","yearstat","formula","expr","labelLength","substr","isOrdinalFn","isColor",20,"encodingTypes","DETAIL",21,"obj","binSize","query","JSON","stringify","getSchema","order","k","datum","Date","stablesort","typeThenName","getStats","column","minmax","numbers","dates","uniq","len","toString","skew","stdev","mean","median","sample","Object","floor","random",22,"encTypes","countRetinal","arr","indexOf","join","convertType","isArray","enctype",23,"getIsType","byName","shorthands","timefns","typeOrder","G","toLowerCase","original","typeThenCardinality",24,"INDEX",25,"enum","supportedEnums","supportedTypes","minimum","default","getSupportedRole","supportedRole","defaultTimeFn","scale_type","clone","typicalField","description","onlyOrdinalField","dimension","axisMixin","supportedMarktypes","sortMixin","items","required","bandMixin","legendMixin","textMixin","margin","weight","family","sizeMixin","colorMixin","alphaMixin","maximum","shapeMixin","detailMixin","rowMixin","colMixin","facetMixin","requiredNameType","multiRoleField","measure","quantitativeField","onlyQuantitativeField","viewport","gridColor","singleHeight","singleWidth","largeBandSize","smallBandSize","largeBandMaxCardinality","cellGridColor","cellBackgroundColor","textCellWidth","timeScaleLabelLength","characterWidth","dataFormatType","useVegaServer","vegaServerTable","vegaServerUrl","$schema","./schemautil",26,"dest","src","hasOwnProperty","constructor","Array","schemautil","isEmpty","extend","instance","isObject","changes","ins","arguments",27,"util_bisectLeft","lo","hi","mid","cmp","vg_truncateOnWord","rev","cnt","tok","vg_truncate_word_re","w","slice","v","Infinity","find","list","pattern","isin","item","array","isNumber","isNaN","parseFloat","isFinite","values","nums","date","b","half","variance","avg","diffs","pow","keyFn","indices","sa","sb","sqrt","med","std","thisArg","NaN","precision","eps","maxb","base","div","mins","minstep","logb","log","level","ceil","span","nbins","steps","unit","noaugment","pos","word","ellipsis","l1","l2","msg"],"mappings":"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","file":"vegalite.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n","!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.vl=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n    util = require('./util'),\n    consts = require('./consts');\n\nvar vl = util.merge(consts, util);\n\nvl.Encoding = require('./Encoding');\nvl.compile = require('./compile/compile');\nvl.data = require('./data');\nvl.field = require('./field');\nvl.enc = require('./enc');\nvl.schema = require('./schema/schema');\nvl.toShorthand = vl.Encoding.shorthand;\n\n\nmodule.exports = vl;\n\n},{\"./Encoding\":2,\"./compile/compile\":6,\"./consts\":20,\"./data\":21,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],2:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      marktype: marktype,\n      enc: enc,\n      cfg: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._cfg = specExtended.cfg;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.cfg = util.duplicate(this._cfg);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, cfg, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, cfg, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, cfg, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, cfg).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.cfg, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.toggleSort = spec.cfg.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.cfg.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.filterNull = spec.cfg.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.cfg.filterNull.O = !spec.cfg.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n\n},{\"./compile/time\":19,\"./consts\":20,\"./enc\":22,\"./field\":23,\"./globals\":24,\"./schema/schema\":25,\"./util\":27}],3:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n\n},{\"../globals\":24,\"../util\":27}],4:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],5:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n\n},{\"../globals\":24,\"../util\":27}],6:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregates = compile.aggregates = require('./aggregates'),\n  binning = compile.binning = require('./binning'),\n  faceting = compile.faceting = require('./faceting'),\n  stacking = compile.stacking = require('./stacking'),\n  subfaceting = compile.subfaceting = require('./subfaceting');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, cfg, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, cfg, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  binning(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfaceting(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n\n},{\"../Encoding\":2,\"../globals\":24,\"../util\":27,\"./aggregates\":3,\"./axis\":4,\"./binning\":5,\"./faceting\":7,\"./filter\":8,\"./group\":9,\"./layout\":10,\"./legend\":11,\"./marks\":12,\"./scale\":13,\"./sort\":14,\"./stacking\":15,\"./style\":16,\"./subfaceting\":17,\"./template\":18,\"./time\":19}],7:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./axis\":4,\"./group\":9,\"./scale\":13}],8:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n\n},{\"../globals\":24}],9:[function(require,module,exports){\n'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n\n},{}],10:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n\n},{\"../field\":23,\"../globals\":24,\"../schema/schema\":25,\"../util\":27,\"./time\":19}],11:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n\n},{\"../globals\":24,\"./time\":19}],12:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n\n},{\"../globals\":24,\"../util\":27,\"./scale\":13}],13:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n\n},{\"../globals\":24,\"../util\":27,\"./time\":19}],14:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n\n},{\"../globals\":24}],15:[function(require,module,exports){\n\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n\n},{\"../globals\":24,\"../util\":27,\"./marks\":12}],16:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n\n},{\"../Encoding\":2,\"../field\":23,\"../globals\":24,\"../util\":27}],17:[function(require,module,exports){\n'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n\n},{\"../globals\":24,\"./group\":9}],18:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.config('dataFormatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n\n},{\"../data\":21,\"../globals\":24,\"./group\":9}],19:[function(require,module,exports){\n'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n\n},{\"../globals\":24,\"../util\":27}],20:[function(require,module,exports){\n'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n\n},{\"./globals\":24}],21:[function(require,module,exports){\n'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config('useVegaServer')) {\n    // don't use vega server\n    return encoding.config('dataUrl');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config('vegaServerTable'),\n    fields: fields\n  };\n\n  return encoding.config('vegaServerUrl') + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n\n},{\"./field\":23,\"./util\":27}],22:[function(require,module,exports){\n// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};\n},{\"./compile/time\":19,\"./consts\":20,\"./field\":23,\"./schema/schema\":25,\"./util\":27}],23:[function(require,module,exports){\n'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n\n},{\"./compile/time\":19,\"./consts\":20,\"./schema/schema\":25,\"./util\":27}],24:[function(require,module,exports){\n(function (global){\n'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n\n},{}],25:[function(require,module,exports){\n// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar cfg = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    },\n\n    // data source\n    dataFormatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    useVegaServer: {\n      type: 'boolean',\n      default: false\n    },\n    dataUrl: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerTable: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: 'string',\n      default: 'http://localhost:3001'\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'cfg'],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    cfg: cfg\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n\n},{\"../util\":27,\"./schemautil\":26}],26:[function(require,module,exports){\n'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}\n},{\"../util\":27}],27:[function(require,module,exports){\n'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n\n},{}]},{},[1])(1)\n});\n//# sourceMappingURL=data:application/json;base64,\n","'use strict';\n\nvar globals = require('./globals'),\n  consts = require('./consts'),\n  util = require('./util'),\n  vlfield = require('./field'),\n  vlenc = require('./enc'),\n  schema = require('./schema/schema'),\n  time = require('./compile/time');\n\nvar Encoding = module.exports = (function() {\n\n  function Encoding(marktype, enc, config, filter, theme) {\n    var defaults = schema.instantiate();\n\n    var spec = {\n      marktype: marktype,\n      enc: enc,\n      cfg: config,\n      filter: filter || []\n    };\n\n    // type to bitcode\n    for (var e in defaults.enc) {\n      defaults.enc[e].type = consts.dataTypes[defaults.enc[e].type];\n    }\n\n    var specExtended = schema.util.merge(defaults, theme || {}, spec) ;\n\n    this._marktype = specExtended.marktype;\n    this._enc = specExtended.enc;\n    this._cfg = specExtended.cfg;\n    this._filter = specExtended.filter;\n  }\n\n  var proto = Encoding.prototype;\n\n  proto.marktype = function() {\n    return this._marktype;\n  };\n\n  proto.is = function(m) {\n    return this._marktype === m;\n  };\n\n  proto.has = function(encType) {\n    // equivalent to calling vlenc.has(this._enc, encType)\n    return this._enc[encType].name !== undefined;\n  };\n\n  proto.enc = function(et) {\n    return this._enc[et];\n  };\n\n  proto.filter = function() {\n    var filterNull = [],\n      fields = this.fields(),\n      self = this;\n\n    util.forEach(fields, function(fieldList, fieldName) {\n      if (fieldName === '*') return; //count\n\n      if ((self.config('filterNull').Q && fieldList.containsType[Q]) ||\n          (self.config('filterNull').T && fieldList.containsType[T]) ||\n          (self.config('filterNull').O && fieldList.containsType[O])) {\n        filterNull.push({\n          operands: [fieldName],\n          operator: 'notNull'\n        });\n      }\n    });\n\n    return filterNull.concat(this._filter);\n  };\n\n  // get \"field\" property for vega\n  proto.field = function(et, nodata, nofn) {\n    if (!this.has(et)) return null;\n\n    var f = (nodata ? '' : 'data.');\n\n    if (this._enc[et].aggr === 'count') {\n      return f + 'count';\n    } else if (!nofn && this._enc[et].bin) {\n      return f + 'bin_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].aggr) {\n      return f + this._enc[et].aggr + '_' + this._enc[et].name;\n    } else if (!nofn && this._enc[et].fn) {\n      return f + this._enc[et].fn + '_' + this._enc[et].name;\n    } else {\n      return f + this._enc[et].name;\n    }\n  };\n\n  proto.fieldName = function(et) {\n    return this._enc[et].name;\n  };\n\n  /*\n   * return key-value pairs of field name and list of fields of that field name\n   */\n  proto.fields = function() {\n    return vlenc.fields(this._enc);\n  };\n\n  proto.fieldTitle = function(et) {\n    if (vlfield.isCount(this._enc[et])) {\n      return vlfield.count.displayName;\n    }\n    var fn = this._enc[et].aggr || this._enc[et].fn || (this._enc[et].bin && \"bin\");\n    if (fn) {\n      return fn.toUpperCase() + '(' + this._enc[et].name + ')';\n    } else {\n      return this._enc[et].name;\n    }\n  };\n\n  proto.scale = function(et) {\n    return this._enc[et].scale || {};\n  };\n\n  proto.axis = function(et) {\n    return this._enc[et].axis || {};\n  };\n\n  proto.band = function(et) {\n    return this._enc[et].band || {};\n  };\n\n  proto.bandSize = function(encType, useSmallBand) {\n    useSmallBand = useSmallBand ||\n      //isBandInSmallMultiples\n      (encType === Y && this.has(ROW) && this.has(Y)) ||\n      (encType === X && this.has(COL) && this.has(X));\n\n    // if band.size is explicitly specified, follow the specification, otherwise draw value from config.\n    return this.band(encType).size ||\n      this.config(useSmallBand ? 'smallBandSize' : 'largeBandSize');\n  };\n\n  proto.aggr = function(et) {\n    return this._enc[et].aggr;\n  };\n\n  // returns false if binning is disabled, otherwise an object with binning properties\n  proto.bin = function(et) {\n    var bin = this._enc[et].bin;\n    if (bin === {})\n      return false;\n    if (bin === true)\n      return {\n        maxbins: schema.MAXBINS_DEFAULT\n      };\n    return bin;\n  };\n\n  proto.legend = function(et) {\n    return this._enc[et].legend;\n  };\n\n  proto.value = function(et) {\n    return this._enc[et].value;\n  };\n\n  proto.fn = function(et) {\n    return this._enc[et].fn;\n  };\n\n  proto.sort = function(et, stats) {\n    var sort = this._enc[et].sort,\n      enc = this._enc,\n      isType = vlfield.isType.byCode;\n\n    // console.log('sort:', sort, 'support:', Encoding.toggleSort.support({enc:this._enc}, stats) , 'toggle:', this.config('toggleSort'))\n\n    if ((!sort || sort.length===0) &&\n        Encoding.toggleSort.support({enc:this._enc}, stats, true) && //HACK\n        this.config('toggleSort') === 'Q'\n      ) {\n      var qField = isType(enc.x, O) ? enc.y : enc.x;\n\n      if (isType(enc[et], O)) {\n        sort = [{\n          name: qField.name,\n          aggr: qField.aggr,\n          type: qField.type,\n          reverse: true\n        }];\n      }\n    }\n\n    return sort;\n  };\n\n  proto.any = function(f) {\n    return util.any(this._enc, f);\n  };\n\n  proto.all = function(f) {\n    return util.all(this._enc, f);\n  };\n\n  proto.length = function() {\n    return util.keys(this._enc).length;\n  };\n\n  proto.map = function(f) {\n    return vlenc.map(this._enc, f);\n  };\n\n  proto.reduce = function(f, init) {\n    return vlenc.reduce(this._enc, f, init);\n  };\n\n  proto.forEach = function(f) {\n    return vlenc.forEach(this._enc, f);\n  };\n\n  proto.type = function(et) {\n    return this.has(et) ? this._enc[et].type : null;\n  };\n\n  proto.role = function(et) {\n    return this.has(et) ? vlfield.role(this._enc[et]) : null;\n  };\n\n  proto.text = function(prop) {\n    var text = this._enc[TEXT].text;\n    return prop ? text[prop] : text;\n  };\n\n  proto.font = function(prop) {\n    var font = this._enc[TEXT].font;\n    return prop ? font[prop] : font;\n  };\n\n  proto.isType = function(et, type) {\n    var field = this.enc(et);\n    return field && Encoding.isType(field, type);\n  };\n\n  Encoding.isType = function (fieldDef, type) {\n    // FIXME vlfield.isType\n    return (fieldDef.type & type) > 0;\n  };\n\n  Encoding.isOrdinalScale = function(encoding, encType) {\n    return vlfield.isOrdinalScale(encoding.enc(encType), true);\n  };\n\n  Encoding.isDimension = function(encoding, encType) {\n    return vlfield.isDimension(encoding.enc(encType), true);\n  };\n\n  Encoding.isMeasure = function(encoding, encType) {\n    return vlfield.isMeasure(encoding.enc(encType), true);\n  };\n\n  proto.isOrdinalScale = function(encType) {\n    return this.has(encType) && Encoding.isOrdinalScale(this, encType);\n  };\n\n  proto.isDimension = function(encType) {\n    return this.has(encType) && Encoding.isDimension(this, encType);\n  };\n\n  proto.isMeasure = function(encType) {\n    return this.has(encType) && Encoding.isMeasure(this, encType);\n  };\n\n  proto.isAggregate = function() {\n    return vlenc.isAggregate(this._enc);\n  };\n\n  Encoding.isAggregate = function(spec) {\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.alwaysNoOcclusion = function(spec, stats) {\n    // FIXME raw OxQ with # of rows = # of O\n    return vlenc.isAggregate(spec.enc);\n  };\n\n  Encoding.isStack = function(spec) {\n    // FIXME update this once we have control for stack ...\n    return (spec.marktype === 'bar' || spec.marktype === 'area') &&\n      spec.enc.color;\n  };\n\n  proto.isStack = function() {\n    // FIXME update this once we have control for stack ...\n    return (this.is('bar') || this.is('area')) && this.has('color');\n  };\n\n  proto.cardinality = function(encType, stats) {\n    return vlfield.cardinality(this.enc(encType), stats, this.config('filterNull'), true);\n  };\n\n  proto.isRaw = function() {\n    return !this.isAggregate();\n  };\n\n  proto.config = function(name) {\n    return this._cfg[name];\n  };\n\n  proto.toSpec = function(excludeConfig) {\n    var enc = util.duplicate(this._enc),\n      spec;\n\n    // convert type's bitcode to type name\n    for (var e in enc) {\n      enc[e].type = consts.dataTypeNames[enc[e].type];\n    }\n\n    spec = {\n      marktype: this._marktype,\n      enc: enc,\n      filter: this._filter\n    };\n\n    if (!excludeConfig) {\n      spec.cfg = util.duplicate(this._cfg);\n    }\n\n    // remove defaults\n    var defaults = schema.instantiate();\n    return schema.util.subtract(spec, defaults);\n  };\n\n  proto.toShorthand = function() {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + this._marktype +\n      c.delim + vlenc.shorthand(this._enc);\n  };\n\n  Encoding.shorthand = function (spec) {\n    var c = consts.shorthand;\n    return 'mark' + c.assign + spec.marktype +\n      c.delim + vlenc.shorthand(spec.enc);\n  };\n\n  Encoding.fromShorthand = function(shorthand, cfg, theme) {\n    var c = consts.shorthand,\n        split = shorthand.split(c.delim),\n        marktype = split.shift().split(c.assign)[1].trim(),\n        enc = vlenc.fromShorthand(split, true);\n\n    return new Encoding(marktype, enc, cfg, null, theme);\n  };\n\n  Encoding.specFromShorthand = function(shorthand, cfg, excludeConfig) {\n    return Encoding.fromShorthand(shorthand, cfg).toSpec(excludeConfig);\n  };\n\n  Encoding.fromSpec = function(spec, theme) {\n    var enc = util.duplicate(spec.enc || {});\n\n    //convert type from string to bitcode (e.g, O=1)\n    for (var e in enc) {\n      enc[e].type = consts.dataTypes[enc[e].type];\n    }\n\n    return new Encoding(spec.marktype, enc, spec.cfg, spec.filter, theme);\n  };\n\n  Encoding.transpose = function(spec) {\n    var oldenc = spec.enc,\n      enc = util.duplicate(spec.enc);\n    enc.x = oldenc.y;\n    enc.y = oldenc.x;\n    enc.row = oldenc.col;\n    enc.col = oldenc.row;\n    spec.enc = enc;\n    return spec;\n  };\n\n  Encoding.toggleSort = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.toggleSort = spec.cfg.toggleSort === 'Q' ? 'O' :'Q';\n    return spec;\n  };\n\n\n  Encoding.toggleSort.direction = function(spec, useTypeCode) {\n    if (!Encoding.toggleSort.support(spec, useTypeCode)) { return; }\n    var enc = spec.enc;\n    return enc.x.type === 'O' ? 'x' :  'y';\n  };\n\n  Encoding.toggleSort.mode = function(spec) {\n    return spec.cfg.toggleSort;\n  };\n\n  Encoding.toggleSort.support = function(spec, stats, useTypeCode) {\n    var enc = spec.enc,\n      isType = vlfield.isType.get(useTypeCode);\n\n    if (vlenc.has(enc, ROW) || vlenc.has(enc, COL) ||\n      !vlenc.has(enc, X) || !vlenc.has(enc, Y) ||\n      !Encoding.alwaysNoOcclusion(spec, stats)) {\n      return false;\n    }\n\n    return ( isType(enc.x, O) && vlfield.isMeasure(enc.y, useTypeCode)) ? 'x' :\n      ( isType(enc.y, O) && vlfield.isMeasure(enc.x, useTypeCode)) ? 'y' : false;\n  };\n\n  Encoding.toggleFilterNullO = function(spec) {\n    spec.cfg = spec.cfg || {};\n    spec.cfg.filterNull = spec.cfg.filterNull || { //FIXME\n      T: true,\n      Q: true\n    };\n    spec.cfg.filterNull.O = !spec.cfg.filterNull.O;\n    return spec;\n  };\n\n  Encoding.toggleFilterNullO.support = function(spec, stats) {\n    var fields = vlenc.fields(spec.enc);\n    for (var fieldName in fields) {\n      var fieldList = fields[fieldName];\n      if (fieldList.containsType.O && fieldName in stats && stats[fieldName].numNulls > 0) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return Encoding;\n})();\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = aggregates;\n\nfunction aggregates(spec, encoding, opt) {\n  opt = opt || {};\n\n  var dims = {}, meas = {}, detail = {}, facets = {},\n    data = spec.data[1]; // currently data[0] is raw and data[1] is table\n\n  encoding.forEach(function(field, encType) {\n    if (field.aggr) {\n      if (field.aggr === 'count') {\n        meas.count = {op: 'count', field: '*'};\n      }else {\n        meas[field.aggr + '|'+ field.name] = {\n          op: field.aggr,\n          field: 'data.'+ field.name\n        };\n      }\n    } else {\n      dims[field.name] = encoding.field(encType);\n      if (encType == ROW || encType == COL) {\n        facets[field.name] = dims[field.name];\n      }else if (encType !== X && encType !== Y) {\n        detail[field.name] = dims[field.name];\n      }\n    }\n  });\n  dims = util.vals(dims);\n  meas = util.vals(meas);\n\n  if (meas.length > 0 && !opt.preaggregatedData) {\n    if (!data.transform) data.transform = [];\n    data.transform.push({\n      type: 'aggregate',\n      groupby: dims,\n      fields: meas\n    });\n  }\n  return {\n    details: util.vals(detail),\n    dims: dims,\n    facets: util.vals(facets),\n    aggregated: meas.length > 0\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  getter = util.getter,\n  time = require('./time');\n\nvar axis = module.exports = {};\n\naxis.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    var s = props[x].scale;\n    if (s === X || s === Y) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\naxis.defs = function(names, encoding, layout, stats, opt) {\n  return names.reduce(function(a, name) {\n    a.push(axis.def(name, encoding, layout, stats, opt));\n    return a;\n  }, []);\n};\n\naxis.def = function(name, encoding, layout, stats, opt) {\n  var type = name;\n  var isCol = name == COL, isRow = name == ROW;\n  var rowOffset = axisTitleOffset(encoding, layout, Y) + 20,\n    cellPadding = layout.cellPadding;\n\n\n  if (isCol) type = 'x';\n  if (isRow) type = 'y';\n\n  var def = {\n    type: type,\n    scale: name\n  };\n\n  if (encoding.axis(name).grid) {\n    def.grid = true;\n    def.layer = (isRow || isCol) ? 'front' :  'back';\n\n    if (isCol) {\n      // set grid property -- put the lines on the right the cell\n      setter(def, ['properties', 'grid'], {\n        x: {\n          offset: layout.cellWidth * (1+ cellPadding/2.0),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'col'\n        },\n        y: {\n          value: -layout.cellHeight * (cellPadding/2),\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else if (isRow) {\n      // set grid property -- put the lines on the top\n      setter(def, ['properties', 'grid'], {\n        y: {\n          offset: -layout.cellHeight * (cellPadding/2),\n          // default value(s) -- vega doesn't do recursive merge\n          scale: 'row'\n        },\n        x: {\n          value: rowOffset\n        },\n        x2: {\n          offset: rowOffset + (layout.cellWidth * 0.05),\n          // default value(s) -- vega doesn't do recursive merge\n          group: \"mark.group.width\",\n          mult: 1\n        },\n        stroke: { value: encoding.config('cellGridColor') }\n      });\n    } else {\n      setter(def, ['properties', 'grid', 'stroke'], {\n        value: encoding.config('gridColor')\n      });\n    }\n  }\n\n  if (encoding.axis(name).title) {\n    def = axis_title(def, name, encoding, layout, opt);\n  }\n\n  if (isRow || isCol) {\n    setter(def, ['properties', 'ticks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'majorTicks'], {\n      opacity: {value: 0}\n    });\n    setter(def, ['properties', 'axis'], {\n      opacity: {value: 0}\n    });\n  }\n\n  if (isCol) {\n    def.orient = 'top';\n  }\n\n  if (isRow) {\n    def.offset = rowOffset;\n  }\n\n  if (name == X) {\n    if (encoding.has(Y) && encoding.isOrdinalScale(Y) && encoding.cardinality(Y, stats) > 30) {\n      def.orient = 'top';\n    }\n\n    if (encoding.isDimension(X) || encoding.isType(X, T)) {\n      setter(def, ['properties','labels'], {\n        angle: {value: 270},\n        align: {value: 'right'},\n        baseline: {value: 'middle'}\n      });\n    } else { // Q\n      def.ticks = 5;\n    }\n  }\n\n  def = axis_labels(def, name, encoding, layout, opt);\n\n  return def;\n};\n\nfunction axis_title(def, name, encoding, layout, opt) {\n  var maxlength = null,\n    fieldTitle = encoding.fieldTitle(name);\n  if (name===X) {\n    maxlength = layout.cellWidth / encoding.config('characterWidth');\n  } else if (name === Y) {\n    maxlength = layout.cellHeight / encoding.config('characterWidth');\n  }\n\n  def.title = maxlength ? util.truncate(fieldTitle, maxlength) : fieldTitle;\n\n  if (name === ROW) {\n    setter(def, ['properties','title'], {\n      angle: {value: 0},\n      align: {value: 'right'},\n      baseline: {value: 'middle'},\n      dy: {value: (-layout.height/2) -20}\n    });\n  }\n\n  def.titleOffset = axisTitleOffset(encoding, layout, name);\n  return def;\n}\n\nfunction axis_labels(def, name, encoding, layout, opt) {\n  var fn;\n  // add custom label for time type\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) && (time.hasScale(fn))) {\n    setter(def, ['properties','labels','text','scale'], 'time-'+ fn);\n  }\n\n  var textTemplatePath = ['properties','labels','text','template'];\n  if (encoding.axis(name).format) {\n    def.format = encoding.axis(name).format;\n  } else if (encoding.isType(name, Q)) {\n    setter(def, textTemplatePath, \"{{data | number:'.3s'}}\");\n  } else if (encoding.isType(name, T) && !encoding.fn(name)) {\n    setter(def, textTemplatePath, \"{{data | time:'%Y-%m-%d'}}\");\n  } else if (encoding.isType(name, T) && encoding.fn(name) === 'year') {\n    setter(def, textTemplatePath, \"{{data | number:'d'}}\");\n  } else if (encoding.isType(name, O) && encoding.axis(name).maxLabelLength) {\n    setter(def, textTemplatePath, '{{data | truncate:' + encoding.axis(name).maxLabelLength + '}}');\n  }\n\n  return def;\n}\n\nfunction axisTitleOffset(encoding, layout, name) {\n  var value = encoding.axis(name).titleOffset;\n  if (value) {\n    return value;\n  }\n  switch (name) {\n    case ROW: return 0;\n    case COL: return 35;\n  }\n  return getter(layout, [name, 'axisTitleOffset']);\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = binning;\n\nfunction binning(spec, encoding, opt) {\n  opt = opt || {};\n  var bins = {};\n\n  if (opt.preaggregatedData) {\n    return;\n  }\n\n  if (!spec.transform) spec.transform = [];\n\n  encoding.forEach(function(field, encType) {\n    if (encoding.bin(encType)) {\n      spec.transform.push({\n        type: 'bin',\n        field: 'data.' + field.name,\n        output: 'data.bin_' + field.name,\n        maxbins: encoding.bin(encType).maxbins\n      });\n    }\n  });\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = compile;\n\nvar Encoding = require('../Encoding'),\n  template = compile.template = require('./template'),\n  axis = compile.axis = require('./axis'),\n  filter = compile.filter = require('./filter'),\n  legend = compile.legend = require('./legend'),\n  marks = compile.marks = require('./marks'),\n  scale = compile.scale = require('./scale'),\n  vlsort = compile.sort = require('./sort'),\n  vlstyle = compile.style = require('./style'),\n  time = compile.time = require('./time'),\n  aggregates = compile.aggregates = require('./aggregates'),\n  binning = compile.binning = require('./binning'),\n  faceting = compile.faceting = require('./faceting'),\n  stacking = compile.stacking = require('./stacking'),\n  subfaceting = compile.subfaceting = require('./subfaceting');\n\ncompile.layout = require('./layout');\ncompile.group = require('./group');\n\nfunction compile(spec, stats, theme) {\n  return compile.encoding(Encoding.fromSpec(spec, theme), stats);\n}\n\ncompile.shorthand = function (shorthand, stats, cfg, theme) {\n  return compile.encoding(Encoding.fromShorthand(shorthand, cfg, theme), stats);\n};\n\ncompile.encoding = function (encoding, stats) {\n  var layout = compile.layout(encoding, stats),\n    style = vlstyle(encoding, stats),\n    spec = template(encoding, layout, stats),\n    group = spec.marks[0],\n    mark = marks[encoding.marktype()],\n    mdefs = marks.def(mark, encoding, layout, style),\n    mdef = mdefs[0];  // TODO: remove this dirty hack by refactoring the whole flow\n\n  filter.addFilters(spec, encoding);\n  var sorting = vlsort(spec, encoding, stats);\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  for (var i = 0; i < mdefs.length; i++) {\n    group.marks.push(mdefs[i]);\n  }\n\n  binning(spec.data[1], encoding, {preaggregatedData: preaggregatedData});\n\n  var lineType = marks[encoding.marktype()].line;\n\n  if (!preaggregatedData) {\n    spec = time(spec, encoding);\n  }\n\n  // handle subfacets\n  var aggResult = aggregates(spec, encoding, {preaggregatedData: preaggregatedData}),\n    details = aggResult.details,\n    hasDetails = details && details.length > 0,\n    stack = hasDetails && stacking(spec, encoding, mdef, aggResult.facets);\n\n  if (hasDetails && (stack || lineType)) {\n    //subfacet to group stack / line together in one group\n    subfaceting(group, mdef, details, stack, encoding);\n  }\n\n  // auto-sort line/area values\n  //TODO(kanitw): have some config to turn off auto-sort for line (for line chart that encodes temporal information)\n  if (lineType) {\n    var f = (encoding.isMeasure(X) && encoding.isDimension(Y)) ? Y : X;\n    if (!mdef.from) mdef.from = {};\n    // TODO: why - ?\n    mdef.from.transform = [{type: 'sort', by: '-' + encoding.field(f)}];\n  }\n\n  // Small Multiples\n  if (hasRow || hasCol) {\n    spec = faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats);\n    spec.legends = legend.defs(encoding);\n  } else {\n    group.scales = scale.defs(scale.names(mdef.properties.update), encoding, layout, style, sorting,\n      {stack: stack, stats: stats});\n    group.axes = axis.defs(axis.names(mdef.properties.update), encoding, layout, stats);\n    group.legends = legend.defs(encoding);\n  }\n\n  filter.filterLessThanZero(spec, encoding);\n\n  return spec;\n};\n\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nvar axis = require('./axis'),\n  groupdef = require('./group').def,\n  scale = require('./scale');\n\nmodule.exports = faceting;\n\nfunction faceting(group, encoding, layout, style, sorting, spec, mdef, stack, stats) {\n  var enter = group.properties.enter;\n  var facetKeys = [], cellAxes = [], from, axesGrp;\n\n  var hasRow = encoding.has(ROW), hasCol = encoding.has(COL);\n\n  enter.fill = {value: encoding.config('cellBackgroundColor')};\n\n  //move \"from\" to cell level and add facet transform\n  group.from = {data: group.marks[0].from.data};\n\n  // Hack, this needs to be refactored\n  for (var i = 0; i < group.marks.length; i++) {\n    var mark = group.marks[i];\n    if (mark.from.transform) {\n      delete mark.from.data; //need to keep transform for subfacetting case\n    } else {\n      delete mark.from;\n    }\n  }\n\n  if (hasRow) {\n    if (!encoding.isDimension(ROW)) {\n      util.error('Row encoding should be ordinal.');\n    }\n    enter.y = {scale: ROW, field: 'keys.' + facetKeys.length};\n    enter.height = {'value': layout.cellHeight}; // HACK\n\n    facetKeys.push(encoding.field(ROW));\n\n    if (hasCol) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(COL)]});\n    }\n\n    axesGrp = groupdef('x-axes', {\n        axes: encoding.has(X) ? axis.defs(['x'], encoding, layout, stats) : undefined,\n        x: hasCol ? {scale: COL, field: 'keys.0'} : {value: 0},\n        width: hasCol && {'value': layout.cellWidth}, //HACK?\n        from: from\n      });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['row'], encoding, layout, stats));\n  } else { // doesn't have row\n    if (encoding.has(X)) {\n      //keep x axis in the cell\n      cellAxes.push.apply(cellAxes, axis.defs(['x'], encoding, layout, stats));\n    }\n  }\n\n  if (hasCol) {\n    if (!encoding.isDimension(COL)) {\n      util.error('Col encoding should be ordinal.');\n    }\n    enter.x = {scale: COL, field: 'keys.' + facetKeys.length};\n    enter.width = {'value': layout.cellWidth}; // HACK\n\n    facetKeys.push(encoding.field(COL));\n\n    if (hasRow) {\n      from = util.duplicate(group.from);\n      from.transform = from.transform || [];\n      from.transform.unshift({type: 'facet', keys: [encoding.field(ROW)]});\n    }\n\n    axesGrp = groupdef('y-axes', {\n      axes: encoding.has(Y) ? axis.defs(['y'], encoding, layout, stats) : undefined,\n      y: hasRow && {scale: ROW, field: 'keys.0'},\n      x: hasRow && {value: 0},\n      height: hasRow && {'value': layout.cellHeight}, //HACK?\n      from: from\n    });\n\n    spec.marks.unshift(axesGrp); // need to prepend so it appears under the plots\n    (spec.axes = spec.axes || []);\n    spec.axes.push.apply(spec.axes, axis.defs(['col'], encoding, layout, stats));\n  } else { // doesn't have col\n    if (encoding.has(Y)) {\n      cellAxes.push.apply(cellAxes, axis.defs(['y'], encoding, layout, stats));\n    }\n  }\n\n  // assuming equal cellWidth here\n  // TODO: support heterogenous cellWidth (maybe by using multiple scales?)\n  spec.scales = (spec.scales || []).concat(scale.defs(\n    scale.names(enter).concat(scale.names(mdef.properties.update)),\n    encoding,\n    layout,\n    style,\n    sorting,\n    {stack: stack, facet: true, stats: stats}\n  )); // row/col scales + cell scales\n\n  if (cellAxes.length > 0) {\n    group.axes = cellAxes;\n  }\n\n  // add facet transform\n  var trans = (group.from.transform || (group.from.transform = []));\n  trans.unshift({type: 'facet', keys: facetKeys});\n\n  return spec;\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar filter = module.exports = {};\n\nvar BINARY = {\n  '>':  true,\n  '>=': true,\n  '=':  true,\n  '!=': true,\n  '<':  true,\n  '<=': true\n};\n\nfilter.addFilters = function(spec, encoding) {\n  var filters = encoding.filter(),\n    data = spec.data[0];  // apply filters to raw data before aggregation\n\n  if (!data.transform)\n    data.transform = [];\n\n  // add custom filters\n  for (var i in filters) {\n    var filter = filters[i];\n\n    var condition = '';\n    var operator = filter.operator;\n    var operands = filter.operands;\n\n    if (BINARY[operator]) {\n      // expects a field and a value\n      if (operator === '=') {\n        operator = '==';\n      }\n\n      var op1 = operands[0];\n      var op2 = operands[1];\n      condition = 'd.data.' + op1 + operator + op2;\n    } else if (operator === 'notNull') {\n      // expects a number of fields\n      for (var j in operands) {\n        condition += 'd.data.' + operands[j] + '!==null';\n        if (j < operands.length - 1) {\n          condition += ' && ';\n        }\n      }\n    } else {\n      console.warn('Unsupported operator: ', operator);\n    }\n\n    data.transform.push({\n      type: 'filter',\n      test: condition\n    });\n  }\n};\n\n// remove less than 0 values if we use log function\nfilter.filterLessThanZero = function(spec, encoding) {\n  encoding.forEach(function(field, encType) {\n    if (encoding.scale(encType).type === 'log') {\n      spec.data[1].transform.push({\n        type: 'filter',\n        test: 'd.' + encoding.field(encType) + '>0'\n      });\n    }\n  });\n};\n\n","'use strict';\n\nmodule.exports = {\n  def: groupdef\n};\n\nfunction groupdef(name, opt) {\n  opt = opt || {};\n  return {\n    _name: name || undefined,\n    type: 'group',\n    from: opt.from,\n    properties: {\n      enter: {\n        x: opt.x || undefined,\n        y: opt.y || undefined,\n        width: opt.width || {group: 'width'},\n        height: opt.height || {group: 'height'}\n      }\n    },\n    scales: opt.scales || undefined,\n    axes: opt.axes || undefined,\n    marks: opt.marks || []\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  setter = util.setter,\n  schema = require('../schema/schema'),\n  time = require('./time'),\n  vlfield = require('../field');\n\nmodule.exports = vllayout;\n\nfunction vllayout(encoding, stats) {\n  var layout = box(encoding, stats);\n  layout = offset(encoding, stats, layout);\n  return layout;\n}\n\n/*\n  HACK to set chart size\n  NOTE: this fails for plots driven by derived values (e.g., aggregates)\n  One solution is to update Vega to support auto-sizing\n  In the meantime, auto-padding (mostly) does the trick\n */\nfunction box(encoding, stats) {\n  var hasRow = encoding.has(ROW),\n      hasCol = encoding.has(COL),\n      hasX = encoding.has(X),\n      hasY = encoding.has(Y),\n      marktype = encoding.marktype();\n\n  // FIXME/HACK we need to take filter into account\n  var xCardinality = hasX && encoding.isDimension(X) ? encoding.cardinality(X, stats) : 1,\n    yCardinality = hasY && encoding.isDimension(Y) ? encoding.cardinality(Y, stats) : 1;\n\n  var useSmallBand = xCardinality > encoding.config('largeBandMaxCardinality') ||\n    yCardinality > encoding.config('largeBandMaxCardinality');\n\n  var cellWidth, cellHeight, cellPadding = encoding.config('cellPadding');\n\n  // set cellWidth\n  if (hasX) {\n    if (encoding.isOrdinalScale(X)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellWidth = (xCardinality + encoding.band(X).padding) * encoding.bandSize(X, useSmallBand);\n    } else {\n      cellWidth = hasCol || hasRow ? encoding.enc(COL).width :  encoding.config(\"singleWidth\");\n    }\n  } else {\n    if (marktype === TEXT) {\n      cellWidth = encoding.config('textCellWidth');\n    } else {\n      cellWidth = encoding.bandSize(X);\n    }\n  }\n\n  // set cellHeight\n  if (hasY) {\n    if (encoding.isOrdinalScale(Y)) {\n      // for ordinal, hasCol or not doesn't matter -- we scale based on cardinality\n      cellHeight = (yCardinality + encoding.band(Y).padding) * encoding.bandSize(Y, useSmallBand);\n    } else {\n      cellHeight = hasCol || hasRow ? encoding.enc(ROW).height :  encoding.config(\"singleHeight\");\n    }\n  } else {\n    cellHeight = encoding.bandSize(Y);\n  }\n\n  // Cell bands use rangeBands(). There are n-1 padding.  Outerpadding = 0 for cells\n\n  var width = cellWidth, height = cellHeight;\n  if (hasCol) {\n    var colCardinality = encoding.cardinality(COL, stats);\n    width = cellWidth * ((1 + cellPadding) * (colCardinality - 1) + 1);\n  }\n  if (hasRow) {\n    var rowCardinality =  encoding.cardinality(ROW, stats);\n    height = cellHeight * ((1 + cellPadding) * (rowCardinality - 1) + 1);\n  }\n\n  return {\n    // width and height of the whole cell\n    cellWidth: cellWidth,\n    cellHeight: cellHeight,\n    cellPadding: cellPadding,\n    // width and height of the chart\n    width: width,\n    height: height,\n    // information about x and y, such as band size\n    x: {useSmallBand: useSmallBand},\n    y: {useSmallBand: useSmallBand}\n  };\n}\n\nfunction offset(encoding, stats, layout) {\n  [X, Y].forEach(function (x) {\n    var maxLength;\n    if (encoding.isDimension(x) || encoding.isType(x, T)) {\n      maxLength = stats[encoding.fieldName(x)].maxlength;\n    } else if (encoding.aggr(x) === 'count') {\n      //assign default value for count as it won't have stats\n      maxLength =  3;\n    } else if (encoding.isType(x, Q)) {\n      if (x===X) {\n        maxLength = 3;\n      } else { // Y\n        //assume that default formating is always shorter than 7\n        maxLength = Math.min(stats[encoding.fieldName(x)].maxlength, 7);\n      }\n    }\n    setter(layout,[x, 'axisTitleOffset'], encoding.config('characterWidth') *  maxLength + 20);\n  });\n  return layout;\n}\n","'use strict';\n\nvar global = require('../globals'),\n  time = require('./time');\n\nvar legend = module.exports = {};\n\nlegend.defs = function(encoding) {\n  var defs = [];\n\n  // TODO: support alpha\n\n  if (encoding.has(COLOR) && encoding.legend(COLOR)) {\n    defs.push(legend.def(COLOR, encoding, {\n      fill: COLOR,\n      orient: 'right'\n    }));\n  }\n\n  if (encoding.has(SIZE) && encoding.legend(SIZE)) {\n    defs.push(legend.def(SIZE, encoding, {\n      size: SIZE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  if (encoding.has(SHAPE) && encoding.legend(SHAPE)) {\n    if (defs.length === 2) {\n      // TODO: fix this\n      console.error('Vegalite currently only supports two legends');\n      return defs;\n    }\n    defs.push(legend.def(SHAPE, encoding, {\n      shape: SHAPE,\n      orient: defs.length === 1 ? 'left' : 'right'\n    }));\n  }\n\n  return defs;\n};\n\nlegend.def = function(name, encoding, props) {\n  var def = props, fn;\n\n  def.title = encoding.fieldTitle(name);\n\n  if (encoding.isType(name, T) && (fn = encoding.fn(name)) &&\n    time.hasScale(fn)) {\n    var properties = def.properties = def.properties || {},\n      labels = properties.labels = properties.labels || {},\n      text = labels.text = labels.text || {};\n\n    text.scale = 'time-'+ fn;\n  }\n\n  return def;\n};\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlscale = require('./scale');\n\nvar marks = module.exports = {};\n\nmarks.def = function(mark, encoding, layout, style) {\n  var defs = [];\n\n  // to add a background to text, we need to add it before the text\n  if (encoding.marktype() === TEXT && encoding.has(COLOR)) {\n    var bg = {\n      x: {value: 0},\n      y: {value: 0},\n      x2: {value: layout.cellWidth},\n      y2: {value: layout.cellHeight},\n      fill: {scale: COLOR, field: encoding.field(COLOR)}\n    };\n    defs.push({\n      type: 'rect',\n      from: {data: TABLE},\n      properties: {enter: bg, update: bg}\n    });\n  }\n\n  // add the mark def for the main thing\n  var p = mark.prop(encoding, layout, style);\n  defs.push({\n    type: mark.type,\n    from: {data: TABLE},\n    properties: {enter: p, update: p}\n  });\n\n  return defs;\n};\n\nmarks.bar = {\n  type: 'rect',\n  stack: true,\n  prop: bar_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1}\n};\n\nmarks.line = {\n  type: 'line',\n  line: true,\n  prop: line_props,\n  requiredEncoding: ['x', 'y'],\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail:1}\n};\n\nmarks.area = {\n  type: 'area',\n  stack: true,\n  line: true,\n  requiredEncoding: ['x', 'y'],\n  prop: area_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1}\n};\n\nmarks.tick = {\n  type: 'rect',\n  prop: tick_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.circle = {\n  type: 'symbol',\n  prop: filled_point_props('circle'),\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, detail: 1}\n};\n\nmarks.square = {\n  type: 'symbol',\n  prop: filled_point_props('square'),\n  supportedEncoding: marks.circle.supportedEncoding\n};\n\nmarks.point = {\n  type: 'symbol',\n  prop: point_props,\n  supportedEncoding: {row: 1, col: 1, x: 1, y: 1, size: 1, color: 1, alpha: 1, shape: 1, detail: 1}\n};\n\nmarks.text = {\n  type: 'text',\n  prop: text_props,\n  requiredEncoding: ['text'],\n  supportedEncoding: {row: 1, col: 1, size: 1, color: 1, alpha: 1, text: 1}\n};\n\nfunction bar_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: e.scale(X).type === 'log' ? 1 : 0};\n    }\n  } else if (e.has(X)) { // is ordinal\n    p.xc = {scale: X, field: e.field(X)};\n  } else {\n    // TODO add single bar offset\n    p.xc = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: e.scale(Y).type === 'log' ? 1 : 0};\n  } else if (e.has(Y)) { // is ordinal\n    p.yc = {scale: Y, field: e.field(Y)};\n  } else {\n    // TODO add single bar offset\n    p.yc = {group: 'height'};\n  }\n\n  // width\n  if (!e.has(X) || e.isOrdinalScale(X)) { // no X or X is ordinal\n    if (e.has(SIZE)) {\n      p.width = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.width = {\n        value: e.bandSize(X, layout.x.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // X is Quant or Time Scale\n    p.width = {value: 2};\n  }\n\n  // height\n  if (!e.has(Y) || e.isOrdinalScale(Y)) { // no Y or Y is ordinal\n    if (e.has(SIZE)) {\n      p.height = {scale: SIZE, field: e.field(SIZE)};\n    } else {\n      p.height = {\n        value: e.bandSize(Y, layout.y.useSmallBand),\n        offset: -1\n      };\n    }\n  } else { // Y is Quant or Time Scale\n    p.height = {value: 2};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction point_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.size = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.size = {value: e.value(SIZE)};\n  }\n\n  // shape\n  if (e.has(SHAPE)) {\n    p.shape = {scale: SHAPE, field: e.field(SHAPE)};\n  } else if (!e.has(SHAPE)) {\n    p.shape = {value: e.value(SHAPE)};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction line_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.stroke = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.stroke = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  p.strokeWidth = {value: e.config('strokeWidth')};\n\n  return p;\n}\n\nfunction area_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.isMeasure(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(Y)) {\n      p.x2 = {scale: X, value: 0};\n      p.orient = {value: 'horizontal'};\n    }\n  } else if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.isMeasure(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    p.y2 = {scale: Y, value: 0};\n  } else if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else {\n    p.y = {group: 'height'};\n  }\n\n  // stroke\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else if (!e.has(COLOR)) {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  }\n\n  return p;\n}\n\nfunction tick_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n    if (e.isDimension(X)) {\n      p.x.offset = -e.bandSize(X, layout.x.useSmallBand) / 3;\n    }\n  } else if (!e.has(X)) {\n    p.x = {value: 0};\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n    if (e.isDimension(Y)) {\n      p.y.offset = -e.bandSize(Y, layout.y.useSmallBand) / 3;\n    }\n  } else if (!e.has(Y)) {\n    p.y = {value: 0};\n  }\n\n  // width\n  if (!e.has(X) || e.isDimension(X)) {\n    p.width = {value: e.bandSize(X, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.width = {value: 1};\n  }\n\n  // height\n  if (!e.has(Y) || e.isDimension(Y)) {\n    p.height = {value: e.bandSize(Y, layout.y.useSmallBand) / 1.5};\n  } else {\n    p.height = {value: 1};\n  }\n\n  // fill\n  if (e.has(COLOR)) {\n    p.fill = {scale: COLOR, field: e.field(COLOR)};\n  } else {\n    p.fill = {value: e.value(COLOR)};\n  }\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else if (!e.has(COLOR)) {\n    p.opacity = {value: style.opacity};\n  }\n\n  return p;\n}\n\nfunction filled_point_props(shape) {\n  return function(e, layout, style) {\n    var p = {};\n\n    // x\n    if (e.has(X)) {\n      p.x = {scale: X, field: e.field(X)};\n    } else if (!e.has(X)) {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n\n    // y\n    if (e.has(Y)) {\n      p.y = {scale: Y, field: e.field(Y)};\n    } else if (!e.has(Y)) {\n      p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n    }\n\n    // size\n    if (e.has(SIZE)) {\n      p.size = {scale: SIZE, field: e.field(SIZE)};\n    } else if (!e.has(X)) {\n      p.size = {value: e.value(SIZE)};\n    }\n\n    // shape\n    p.shape = {value: shape};\n\n    // fill\n    if (e.has(COLOR)) {\n      p.fill = {scale: COLOR, field: e.field(COLOR)};\n    } else if (!e.has(COLOR)) {\n      p.fill = {value: e.value(COLOR)};\n    }\n\n    // alpha\n    if (e.has(ALPHA)) {\n      p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n    } else if (e.value(ALPHA) !== undefined) {\n      p.opacity = {value: e.value(ALPHA)};\n    } else if (!e.has(COLOR)) {\n      p.opacity = {value: style.opacity};\n    }\n\n    return p;\n  };\n}\n\nfunction text_props(e, layout, style) {\n  var p = {};\n\n  // x\n  if (e.has(X)) {\n    p.x = {scale: X, field: e.field(X)};\n  } else if (!e.has(X)) {\n    if (e.has(TEXT) && e.isType(TEXT, Q)) {\n      p.x = {value: layout.cellWidth-5};\n    } else {\n      p.x = {value: e.bandSize(X, layout.x.useSmallBand) / 2};\n    }\n  }\n\n  // y\n  if (e.has(Y)) {\n    p.y = {scale: Y, field: e.field(Y)};\n  } else if (!e.has(Y)) {\n    p.y = {value: e.bandSize(Y, layout.y.useSmallBand) / 2};\n  }\n\n  // size\n  if (e.has(SIZE)) {\n    p.fontSize = {scale: SIZE, field: e.field(SIZE)};\n  } else if (!e.has(SIZE)) {\n    p.fontSize = {value: e.font('size')};\n  }\n\n  // fill\n  // color should be set to background\n  p.fill = {value: 'black'};\n\n  // alpha\n  if (e.has(ALPHA)) {\n    p.opacity = {scale: ALPHA, field: e.field(ALPHA)};\n  } else if (e.value(ALPHA) !== undefined) {\n    p.opacity = {value: e.value(ALPHA)};\n  } else {\n    p.opacity = {value: style.opacity};\n  }\n\n  // text\n  if (e.has(TEXT)) {\n    if (e.isType(TEXT, Q)) {\n      p.text = {template: \"{{\" + e.field(TEXT) + \" | number:'.3s'}}\"};\n      p.align = {value: 'right'};\n    } else {\n      p.text = {field: e.field(TEXT)};\n    }\n  } else {\n    p.text = {value: 'Abc'};\n  }\n\n  p.font = {value: e.font('family')};\n  p.fontWeight = {value: e.font('weight')};\n  p.fontStyle = {value: e.font('style')};\n  p.baseline = {value: e.text('baseline')};\n\n  return p;\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  time = require('./time');\n\nvar scale = module.exports = {};\n\nscale.names = function(props) {\n  return util.keys(util.keys(props).reduce(function(a, x) {\n    if (props[x] && props[x].scale) a[props[x].scale] = 1;\n    return a;\n  }, {}));\n};\n\nscale.defs = function(names, encoding, layout, style, sorting, opt) {\n  opt = opt || {};\n\n  return names.reduce(function(a, name) {\n    var s = {\n      name: name,\n      type: scale.type(name, encoding),\n      domain: scale_domain(name, encoding, sorting, opt)\n    };\n    if (s.type === 'ordinal' && !encoding.bin(name) && encoding.sort(name).length === 0) {\n      s.sort = true;\n    }\n\n    scale_range(s, encoding, layout, style, opt);\n\n    return (a.push(s), a);\n  }, []);\n};\n\nscale.type = function(name, encoding) {\n\n  switch (encoding.type(name)) {\n    case O: return 'ordinal';\n    case T:\n      var fn = encoding.fn(name);\n      return (fn && time.scale.type(fn, name)) || 'time';\n    case Q:\n      if (encoding.bin(name)) {\n        return name === COLOR ? 'linear' : 'ordinal';\n      }\n      return encoding.scale(name).type;\n  }\n};\n\nfunction scale_domain(name, encoding, sorting, opt) {\n  if (encoding.isType(name, T)) {\n    var range = time.scale.domain(encoding.fn(name), name);\n    if(range) return range;\n  }\n\n  if (encoding.bin(name)) {\n    // TODO: add includeEmptyConfig here\n    if (opt.stats) {\n      var bins = util.getbins(opt.stats[encoding.fieldName(name)], encoding.bin(name).maxbins);\n      var domain = util.range(bins.start, bins.stop, bins.step);\n      return name === Y ? domain.reverse() : domain;\n    }\n  }\n\n  return name == opt.stack ?\n    {\n      data: STACKED,\n      field: 'data.' + (opt.facet ? 'max_' : '') + 'sum_' + encoding.field(name, true)\n    } :\n    {data: sorting.getDataset(name), field: encoding.field(name)};\n}\n\nfunction scale_range(s, encoding, layout, style, opt) {\n  var spec = encoding.scale(s.name);\n  switch (s.name) {\n    case X:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(X, layout.x.useSmallBand);\n      } else {\n        s.range = layout.cellWidth ? [0, layout.cellWidth] : 'width';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n      s.round = true;\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name);\n      }else {\n        s.nice = true;\n      }\n      break;\n    case Y:\n      if (s.type === 'ordinal') {\n        s.bandWidth = encoding.bandSize(Y, layout.y.useSmallBand);\n      } else {\n        s.range = layout.cellHeight ? [layout.cellHeight, 0] : 'height';\n\n        if (encoding.isType(s.name,T) && encoding.fn(s.name) === 'year') {\n          s.zero = false;\n        } else {\n          s.zero = spec.zero === undefined ? true : spec.zero;\n        }\n\n        s.reverse = spec.reverse;\n      }\n\n      s.round = true;\n\n      if (s.type === 'time') {\n        s.nice = encoding.fn(s.name) || encoding.config('timeScaleNice');\n      }else {\n        s.nice = true;\n      }\n      break;\n    case ROW: // support only ordinal\n      s.bandWidth = layout.cellHeight;\n      s.round = true;\n      s.nice = true;\n      break;\n    case COL: // support only ordinal\n      s.bandWidth = layout.cellWidth;\n      s.round = true;\n      s.nice = true;\n      break;\n    case SIZE:\n      if (encoding.is('bar')) {\n        // FIXME this is definitely incorrect\n        // but let's fix it later since bar size is a bad encoding anyway\n        s.range = [3, Math.max(encoding.bandSize(X), encoding.bandSize(Y))];\n      } else if (encoding.is(TEXT)) {\n        s.range = [8, 40];\n      } else { //point\n        var bandSize = Math.min(encoding.bandSize(X), encoding.bandSize(Y)) - 1;\n        s.range = [10, 0.8 * bandSize*bandSize];\n      }\n      s.round = true;\n      s.zero = false;\n      break;\n    case SHAPE:\n      s.range = 'shapes';\n      break;\n    case COLOR:\n      var range = encoding.scale(COLOR).range;\n      if (range === undefined) {\n        if (s.type === 'ordinal') {\n          // FIXME\n          range = style.colorRange;\n        } else {\n          range = ['#A9DB9F', '#0D5C21'];\n          s.zero = false;\n        }\n      }\n      s.range = range;\n      break;\n    case ALPHA:\n      s.range = [0.2, 1.0];\n      break;\n    default:\n      throw new Error('Unknown encoding name: '+ s.name);\n  }\n\n  switch (s.name) {\n    case ROW:\n    case COL:\n      s.padding = encoding.config('cellPadding');\n      s.outerPadding = 0;\n      break;\n    case X:\n    case Y:\n      if (s.type === 'ordinal') { //&& !s.bandWidth\n        s.points = true;\n        s.padding = encoding.band(s.name).padding;\n      }\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nmodule.exports = addSortTransforms;\n\n// adds new transforms that produce sorted fields\nfunction addSortTransforms(spec, encoding, stats, opt) {\n  var datasetMapping = {};\n  var counter = 0;\n\n  encoding.forEach(function(field, encType) {\n    var sortBy = encoding.sort(encType, stats);\n    if (sortBy.length > 0) {\n      var fields = sortBy.map(function(d) {\n        return {\n          op: d.aggr,\n          field: 'data.' + d.name\n        };\n      });\n\n      var byClause = sortBy.map(function(d) {\n        var reverse = (d.reverse ? '-' : '');\n        return reverse + 'data.' + (d.aggr==='count' ? 'count' : (d.aggr + '_' + d.name));\n      });\n\n      var dataName = 'sorted' + counter++;\n\n      var transforms = [\n        {\n          type: 'aggregate',\n          groupby: ['data.' + field.name],\n          fields: fields\n        },\n        {\n          type: 'sort',\n          by: byClause\n        }\n      ];\n\n      spec.data.push({\n        name: dataName,\n        source: RAW,\n        transform: transforms\n      });\n\n      datasetMapping[encType] = dataName;\n    }\n  });\n\n  return {\n    spec: spec,\n    getDataset: function(encType) {\n      var data = datasetMapping[encType];\n      if (!data) {\n        return TABLE;\n      }\n      return data;\n    }\n  };\n}\n","\"use strict\";\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  marks = require('./marks');\n\nmodule.exports = stacking;\n\nfunction stacking(spec, encoding, mdef, facets) {\n  if (!marks[encoding.marktype()].stack) return false;\n\n  // TODO: add || encoding.has(LOD) here once LOD is implemented\n  if (!encoding.has(COLOR)) return false;\n\n  var dim=null, val=null, idx =null,\n    isXMeasure = encoding.isMeasure(X),\n    isYMeasure = encoding.isMeasure(Y);\n\n  if (isXMeasure && !isYMeasure) {\n    dim = Y;\n    val = X;\n    idx = 0;\n  } else if (isYMeasure && !isXMeasure) {\n    dim = X;\n    val = Y;\n    idx = 1;\n  } else {\n    return null; // no stack encoding\n  }\n\n  // add transform to compute sums for scale\n  var stacked = {\n    name: STACKED,\n    source: TABLE,\n    transform: [{\n      type: 'aggregate',\n      groupby: [encoding.field(dim)].concat(facets), // dim and other facets\n      fields: [{op: 'sum', field: encoding.field(val)}] // TODO check if field with aggr is correct?\n    }]\n  };\n\n  if (facets && facets.length > 0) {\n    stacked.transform.push({ //calculate max for each facet\n      type: 'aggregate',\n      groupby: facets,\n      fields: [{op: 'max', field: 'data.sum_' + encoding.field(val, true)}]\n    });\n  }\n\n  spec.data.push(stacked);\n\n  // add stack transform to mark\n  mdef.from.transform = [{\n    type: 'stack',\n    point: encoding.field(dim),\n    height: encoding.field(val),\n    output: {y1: val, y0: val + '2'}\n  }];\n\n  // TODO: This is super hack-ish -- consolidate into modular mark properties?\n  mdef.properties.update[val] = mdef.properties.enter[val] = {scale: val, field: val};\n  mdef.properties.update[val + '2'] = mdef.properties.enter[val + '2'] = {scale: val, field: val + '2'};\n\n  return val; //return stack encoding\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util'),\n  vlfield = require('../field'),\n  Encoding = require('../Encoding');\n\nmodule.exports = function(encoding, stats) {\n  return {\n    opacity: estimateOpacity(encoding, stats),\n    colorRange: colorRange(encoding, stats)\n  };\n};\n\nfunction colorRange(encoding, stats){\n  if (encoding.has(COLOR) && encoding.isDimension(COLOR)) {\n    var cardinality = encoding.cardinality(COLOR, stats);\n    if (cardinality <= 10) {\n      return \"category10\";\n    } else {\n      return \"category20\";\n    }\n    // TODO can vega interpolate range for ordinal scale?\n  }\n  return null;\n}\n\nfunction estimateOpacity(encoding,stats) {\n  if (!stats) {\n    return 1;\n  }\n\n  var numPoints = 0;\n\n  if (encoding.isAggregate()) { // aggregate plot\n    numPoints = 1;\n\n    //  get number of points in each \"cell\"\n    //  by calculating product of cardinality\n    //  for each non faceting and non-ordinal X / Y fields\n    //  note that ordinal x,y are not include since we can\n    //  consider that ordinal x are subdividing the cell into subcells anyway\n    encoding.forEach(function(field, encType) {\n\n      if (encType !== ROW && encType !== COL &&\n          !((encType === X || encType === Y) &&\n          vlfield.isOrdinalScale(field, true))\n        ) {\n        numPoints *= encoding.cardinality(encType, stats);\n      }\n    });\n\n  } else { // raw plot\n    numPoints = stats.count;\n\n    // small multiples divide number of points\n    var numMultiples = 1;\n    if (encoding.has(ROW)) {\n      numMultiples *= encoding.cardinality(ROW, stats);\n    }\n    if (encoding.has(COL)) {\n      numMultiples *= encoding.cardinality(COL, stats);\n    }\n    numPoints /= numMultiples;\n  }\n\n  var opacity = 0;\n  if (numPoints < 20) {\n    opacity = 1;\n  } else if (numPoints < 200) {\n    opacity = 0.7;\n  } else if (numPoints < 1000 || encoding.is('tick')) {\n    opacity = 0.6;\n  } else {\n    opacity = 0.3;\n  }\n\n  return opacity;\n}\n\n","'use strict';\n\nvar global = require('../globals');\n\nvar groupdef = require('./group').def;\n\nmodule.exports = subfaceting;\n\nfunction subfaceting(group, mdef, details, stack, encoding) {\n  var m = group.marks,\n    g = groupdef('subfacet', {marks: m});\n\n  group.marks = [g];\n  g.from = mdef.from;\n  delete mdef.from;\n\n  //TODO test LOD -- we should support stack / line without color (LOD) field\n  var trans = (g.from.transform || (g.from.transform = []));\n  trans.unshift({type: 'facet', keys: details});\n\n  if (stack && encoding.has(COLOR)) {\n    trans.unshift({type: 'sort', by: encoding.field(COLOR)});\n  }\n}\n","'use strict';\n\nvar globals = require('../globals');\n\nvar groupdef = require('./group').def,\n  vldata = require('../data');\n\nmodule.exports = template;\n\nfunction template(encoding, layout, stats) { //hack use stats\n\n  var data = {name: RAW, format: {type: encoding.config('dataFormatType')}},\n    table = {name: TABLE, source: RAW},\n    dataUrl = vldata.getUrl(encoding, stats);\n  if (dataUrl) data.url = dataUrl;\n\n  var preaggregatedData = encoding.config('useVegaServer');\n\n  encoding.forEach(function(field, encType) {\n    var name;\n    if (field.type == T) {\n      data.format.parse = data.format.parse || {};\n      data.format.parse[field.name] = 'date';\n    } else if (field.type == Q) {\n      data.format.parse = data.format.parse || {};\n      if (field.aggr === 'count') {\n        name = 'count';\n      } else if (preaggregatedData && field.bin) {\n        name = 'bin_' + field.name;\n      } else if (preaggregatedData && field.aggr) {\n        name = field.aggr + '_' + field.name;\n      } else {\n        name = field.name;\n      }\n      data.format.parse[name] = 'number';\n    }\n  });\n\n  return {\n    width: layout.width,\n    height: layout.height,\n    padding: 'auto',\n    data: [data, table],\n    marks: [groupdef('cell', {\n      width: layout.cellWidth ? {value: layout.cellWidth} : undefined,\n      height: layout.cellHeight ? {value: layout.cellHeight} : undefined\n    })]\n  };\n}\n","'use strict';\n\nvar globals = require('../globals'),\n  util = require('../util');\n\nmodule.exports = time;\n\nfunction time(spec, encoding, opt) {\n  var timeFields = {}, timeFn = {};\n\n  // find unique formula transformation and bin function\n  encoding.forEach(function(field, encType) {\n    if (field.type === T && field.fn) {\n      timeFields[encoding.field(encType)] = {\n        field: field,\n        encType: encType\n      };\n      timeFn[field.fn] = true;\n    }\n  });\n\n  // add formula transform\n  var data = spec.data[1],\n    transform = data.transform = data.transform || [];\n\n  for (var f in timeFields) {\n    var tf = timeFields[f];\n    time.transform(transform, encoding, tf.encType, tf.field);\n  }\n\n  // add scales\n  var scales = spec.scales = spec.scales || [];\n  for (var fn in timeFn) {\n    time.scale(scales, fn, encoding);\n  }\n  return spec;\n}\n\ntime.cardinality = function(field, stats, filterNull, type) {\n  var fn = field.fn;\n  switch (fn) {\n    case 'seconds': return 60;\n    case 'minutes': return 60;\n    case 'hours': return 24;\n    case 'day': return 7;\n    case 'date': return 31;\n    case 'month': return 12;\n    case 'year':\n      var stat = stats[field.name],\n        yearstat = stats['year_'+field.name];\n\n      if (!yearstat) { return null; }\n\n      return yearstat.cardinality -\n        (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n  }\n\n  return null;\n};\n\nfunction fieldFn(func, field) {\n  return 'utc' + func + '(d.data.'+ field.name +')';\n}\n\n/**\n * @return {String} date binning formula of the given field\n */\ntime.formula = function(field) {\n  return fieldFn(field.fn, field);\n};\n\n/** add formula transforms to data */\ntime.transform = function(transform, encoding, encType, field) {\n  transform.push({\n    type: 'formula',\n    field: encoding.field(encType),\n    expr: time.formula(field)\n  });\n};\n\n/** append custom time scales for axis label */\ntime.scale = function(scales, fn, encoding) {\n  var labelLength = encoding.config('timeScaleLabelLength');\n  // TODO add option for shorter scale / custom range\n  switch (fn) {\n    case 'day':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 7),\n        range: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(\n          function(s) { return s.substr(0, labelLength);}\n        )\n      });\n      break;\n    case 'month':\n      scales.push({\n        name: 'time-'+fn,\n        type: 'ordinal',\n        domain: util.range(0, 12),\n        range: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'].map(\n            function(s) { return s.substr(0, labelLength);}\n          )\n      });\n      break;\n  }\n};\n\ntime.isOrdinalFn = function(fn) {\n  switch (fn) {\n    case 'seconds':\n    case 'minutes':\n    case 'hours':\n    case 'day':\n    case 'date':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\ntime.scale.type = function(fn, name) {\n  if (name === COLOR) {\n    return 'linear'; // this has order\n  }\n\n  return time.isOrdinalFn(fn) || name === COL || name === ROW ? 'ordinal' : 'linear';\n};\n\ntime.scale.domain = function(fn, name) {\n  var isColor = name === COLOR;\n  switch (fn) {\n    case 'seconds':\n    case 'minutes': return isColor ? [0,59] : util.range(0, 60);\n    case 'hours': return isColor ? [0,23] : util.range(0, 24);\n    case 'day': return isColor ? [0,6] : util.range(0, 7);\n    case 'date': return isColor ? [1,31] : util.range(1, 32);\n    case 'month': return isColor ? [0,11] : util.range(0, 12);\n  }\n  return null;\n};\n\n/** whether a particular time function has custom scale for labels implemented in time.scale */\ntime.hasScale = function(fn) {\n  switch (fn) {\n    case 'day':\n    case 'month':\n      return true;\n  }\n  return false;\n};\n\n\n","'use strict';\n\nvar globals = require('./globals');\n\nvar consts = module.exports = {};\n\nconsts.encodingTypes = [X, Y, ROW, COL, SIZE, SHAPE, COLOR, ALPHA, TEXT, DETAIL];\n\nconsts.dataTypes = {'O': O, 'Q': Q, 'T': T};\n\nconsts.dataTypeNames = ['O', 'Q', 'T'].reduce(function(r, x) {\n  r[consts.dataTypes[x]] = x;\n  return r;\n},{});\n\nconsts.shorthand = {\n  delim:  '|',\n  assign: '=',\n  type:   ',',\n  func:   '_'\n};\n","'use strict';\n\n// TODO: rename getDataUrl to vl.data.getUrl() ?\n\nvar util = require('./util');\n\nvar vldata = module.exports = {},\n  vlfield = require('./field');\n\nvldata.getUrl = function getDataUrl(encoding, stats) {\n  if (!encoding.config('useVegaServer')) {\n    // don't use vega server\n    return encoding.config('dataUrl');\n  }\n\n  if (encoding.length() === 0) {\n    // no fields\n    return;\n  }\n\n  var fields = [];\n  encoding.forEach(function(field, encType) {\n    var obj = {\n      name: encoding.field(encType, true),\n      field: field.name\n    };\n    if (field.aggr) {\n      obj.aggr = field.aggr;\n    }\n    if (field.bin) {\n      obj.binSize = util.getbins(stats[field.name], encoding.bin(encType).maxbins).step;\n    }\n    fields.push(obj);\n  });\n\n  var query = {\n    table: encoding.config('vegaServerTable'),\n    fields: fields\n  };\n\n  return encoding.config('vegaServerUrl') + '/query/?q=' + JSON.stringify(query);\n};\n\n/**\n * @param  {Object} data data in JSON/javascript object format\n * @return Array of {name: __name__, type: \"number|text|time|location\"}\n */\nvldata.getSchema = function(data, order) {\n  var schema = [],\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    // find non-null data\n    var i = 0, datum = data[i][k];\n    while (datum === '' || datum === null || datum === undefined) {\n      datum = data[++i][k];\n    }\n\n    datum = util.parse(datum);\n    var type = (typeof datum === 'number') ? 'Q':\n      (datum instanceof Date) ? 'T' : 'O';\n\n    schema.push({name: k, type: type});\n  });\n\n  schema = util.stablesort(schema, order || vlfield.order.typeThenName, vlfield.order.name);\n\n  return schema;\n};\n\nvldata.getStats = function(data) { // hack\n  var stats = {},\n    fields = util.keys(data[0]);\n\n  fields.forEach(function(k) {\n    var column = data.map(function(d) {return d[k];});\n\n    // Hack\n    var val = util.parse(data[0][k]);\n    var type = (typeof val === 'number') ? 'Q':\n      (val instanceof Date) ? 'T' : 'O';\n\n    var stat = {};\n    if (typeof val === 'number') {\n      stat = util.minmax(util.numbers(column));\n    } else if (val instanceof Date) {\n      stat = util.minmax(util.dates(column));\n    } else {\n      stat = util.minmax(column);\n    }\n\n    stat.cardinality = util.uniq(data, k);\n    stat.count = data.length;\n\n    stat.maxlength = data.reduce(function(max,row) {\n      if (row[k] === null) {\n        return max;\n      }\n      var len = row[k].toString().length;\n      return len > max ? len : max;\n    }, 0);\n\n    stat.numNulls = data.reduce(function(count, row) {\n      return row[k] === null ? count + 1 : count;\n    }, 0);\n\n    var numbers = util.numbers(column);\n\n    if (numbers.length > 0) {\n      stat.skew = util.skew(numbers);\n      stat.stdev = util.stdev(numbers);\n      stat.mean = util.mean(numbers);\n      stat.median = util.median(numbers);\n    }\n\n    var sample = {};\n    while(Object.keys(sample).length < Math.min(stat.cardinality, 10)) {\n      var value = data[Math.floor(Math.random() * data.length)][k];\n      sample[value] = true;\n    }\n    stat.sample = Object.keys(sample);\n\n    stats[k] = stat;\n  });\n  stats.count = data.length;\n  return stats;\n};\n","// utility for enc\n\n'use strict';\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  vlfield = require('./field'),\n  util = require('./util'),\n  schema = require('./schema/schema'),\n  encTypes = schema.encTypes;\n\nvar vlenc = module.exports = {};\n\nvlenc.countRetinal = function(enc) {\n  var count = 0;\n  if (enc.color) count++;\n  if (enc.alpha) count++;\n  if (enc.size) count++;\n  if (enc.shape) count++;\n  return count;\n};\n\nvlenc.has = function(enc, encType) {\n  var fieldDef = enc && enc[encType];\n  return fieldDef && fieldDef.name;\n};\n\nvlenc.isAggregate = function(enc) {\n  for (var k in enc) {\n    if (vlenc.has(enc, k) && enc[k].aggr) {\n      return true;\n    }\n  }\n  return false;\n};\n\nvlenc.forEach = function(enc, f) {\n  var i = 0;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      f(enc[k], k, i++);\n    }\n  });\n};\n\nvlenc.map = function(enc, f) {\n  var arr = [];\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      arr.push(f(enc[k], k, enc));\n    }\n  });\n  return arr;\n};\n\nvlenc.reduce = function(enc, f, init) {\n  var r = init, i = 0, k;\n  encTypes.forEach(function(k) {\n    if (vlenc.has(enc, k)) {\n      r = f(r, enc[k], k,  enc);\n    }\n  });\n  return r;\n};\n\n/*\n * return key-value pairs of field name and list of fields of that field name\n */\nvlenc.fields = function(enc) {\n  return vlenc.reduce(enc, function (m, field, encType) {\n    var fieldList = m[field.name] = m[field.name] || [],\n      containsType = fieldList.containsType = fieldList.containsType || {};\n\n    if (fieldList.indexOf(field) === -1) {\n      fieldList.push(field);\n      // augment the array with containsType.Q / O / T\n      containsType[field.type] = true;\n    }\n    return m;\n  }, {});\n};\n\nvlenc.shorthand = function(enc) {\n  return vlenc.map(enc, function(field, et) {\n    return et + c.assign + vlfield.shorthand(field);\n  }).join(c.delim);\n};\n\nvlenc.fromShorthand = function(shorthand, convertType) {\n  var enc = util.isArray(shorthand) ? shorthand : shorthand.split(c.delim);\n  return enc.reduce(function(m, e) {\n    var split = e.split(c.assign),\n        enctype = split[0].trim(),\n        field = split[1];\n\n    m[enctype] = vlfield.fromShorthand(field, convertType);\n    return m;\n  }, {});\n};","'use strict';\n\n// utility for field\n\nvar consts = require('./consts'),\n  c = consts.shorthand,\n  time = require('./compile/time'),\n  util = require('./util'),\n  schema = require('./schema/schema');\n\nvar vlfield = module.exports = {};\n\nvlfield.shorthand = function(f) {\n  var c = consts.shorthand;\n  return (f.aggr ? f.aggr + c.func : '') +\n    (f.fn ? f.fn + c.func : '') +\n    (f.bin ? 'bin' + c.func : '') +\n    (f.name || '') + c.type +\n    (consts.dataTypeNames[f.type] || f.type);\n};\n\nvlfield.shorthands = function(fields, delim) {\n  delim = delim || c.delim;\n  return fields.map(vlfield.shorthand).join(delim);\n};\n\nvlfield.fromShorthand = function(shorthand, convertType) {\n  var split = shorthand.split(c.type), i;\n  var o = {\n    name: split[0].trim(),\n    type: convertType ? consts.dataTypes[split[1].trim()] : split[1].trim()\n  };\n\n  // check aggregate type\n  for (i in schema.aggr.enum) {\n    var a = schema.aggr.enum[i];\n    if (o.name.indexOf(a + '_') === 0) {\n      o.name = o.name.substr(a.length + 1);\n      if (a == 'count' && o.name.length === 0) o.name = '*';\n      o.aggr = a;\n      break;\n    }\n  }\n\n  // check time fn\n  for (i in schema.timefns) {\n    var f = schema.timefns[i];\n    if (o.name && o.name.indexOf(f + '_') === 0) {\n      o.name = o.name.substr(o.length + 1);\n      o.fn = f;\n      break;\n    }\n  }\n\n  // check bin\n  if (o.name && o.name.indexOf('bin_') === 0) {\n    o.name = o.name.substr(4);\n    o.bin = true;\n  }\n\n  return o;\n};\n\nvar typeOrder = {\n  O: 0,\n  G: 1,\n  T: 2,\n  Q: 3\n};\n\nvlfield.order = {};\n\nvlfield.order.type = function(field) {\n  if (field.aggr==='count') return 4;\n  return typeOrder[field.type];\n};\n\nvlfield.order.typeThenName = function(field) {\n  return vlfield.order.type(field) + '_' + field.name.toLowerCase();\n};\n\nvlfield.order.original = function() {\n  return 0; // no swap will occur\n};\n\nvlfield.order.name = function(field) {\n  return field.name;\n};\n\nvlfield.order.typeThenCardinality = function(field, stats){\n  return stats[field.name].cardinality;\n};\n\n// FIXME refactor\nvlfield.isType = function (fieldDef, type) {\n  return (fieldDef.type & type) > 0;\n};\n\nvlfield.isType.byCode = vlfield.isType;\n\nvlfield.isType.byName = function (field, type) {\n  return field.type === consts.dataTypeNames[type];\n};\n\n\nfunction getIsType(useTypeCode) {\n  return useTypeCode ? vlfield.isType.byCode : vlfield.isType.byName;\n}\n\nvlfield.isType.get = getIsType; //FIXME\n\n/*\n * Most fields that use ordinal scale are dimensions.\n * However, YEAR(T), YEARMONTH(T) use time scale, not ordinal but are dimensions too.\n */\nvlfield.isOrdinalScale = function(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || field.bin ||\n    ( isType(field, T) && field.fn && time.isOrdinalFn(field.fn) );\n};\n\nfunction isDimension(field, useTypeCode /*optional*/) {\n  var isType = getIsType(useTypeCode);\n  return  isType(field, O) || !!field.bin ||\n    ( isType(field, T) && !!field.fn );\n}\n\n/**\n * For encoding, use encoding.isDimension() to avoid confusion.\n * Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.isDimension = function(field, useTypeCode /*optional*/) {\n  return field && isDimension(field, useTypeCode);\n};\n\nvlfield.isMeasure = function(field, useTypeCode) {\n  return field && !isDimension(field, useTypeCode);\n};\n\nvlfield.role = function(field) {\n  return isDimension(field) ? 'dimension' : 'measure';\n};\n\nvlfield.count = function() {\n  return {name:'*', aggr: 'count', type:'Q', displayName: vlfield.count.displayName};\n};\n\nvlfield.count.displayName = 'Number of Records';\n\nvlfield.isCount = function(field) {\n  return field.aggr === 'count';\n};\n\n/**\n * For encoding, use encoding.cardinality() to avoid confusion.  Or use Encoding.isType if your field is from Encoding (and thus have numeric data type).\n * otherwise, do not specific isType so we can use the default isTypeName here.\n */\nvlfield.cardinality = function(field, stats, filterNull, useTypeCode) {\n  // FIXME need to take filter into account\n  var isType = getIsType(useTypeCode),\n    type = useTypeCode ? consts.dataTypeNames[field.type] : field.type;\n\n  filterNull = filterNull || {};\n\n  if (field.bin) {\n    var bins = util.getbins(stats[field.name], field.bin.maxbins || schema.MAXBINS_DEFAULT);\n    return (bins.stop - bins.start) / bins.step;\n  }\n  if (isType(field, T)) {\n    var cardinality = time.cardinality(field, stats, filterNull, type);\n    if(cardinality !== null) return cardinality;\n    //otherwise use calculation below\n  }\n  if (field.aggr) {\n    return 1;\n  }\n\n  // remove null\n  var stat = stats[field.name];\n  return stat.cardinality -\n    (stat.numNulls > 0 && filterNull[type] ? 1 : 0);\n};\n","'use strict';\n\n// declare global constant\nvar g = global || window;\n\ng.TABLE = 'table';\ng.RAW = 'raw';\ng.STACKED = 'stacked';\ng.INDEX = 'index';\n\ng.X = 'x';\ng.Y = 'y';\ng.ROW = 'row';\ng.COL = 'col';\ng.SIZE = 'size';\ng.SHAPE = 'shape';\ng.COLOR = 'color';\ng.ALPHA = 'alpha';\ng.TEXT = 'text';\ng.DETAIL = 'detail';\n\ng.O = 1;\ng.Q = 2;\ng.T = 4;\n","// Package of defining Vegalite Specification's json schema\n\"use strict\";\n\nvar schema = module.exports = {},\n  util = require('../util');\n\nschema.util = require('./schemautil');\n\nschema.marktype = {\n  type: 'string',\n  enum: ['point', 'tick', 'bar', 'line', 'area', 'circle', 'square', 'text']\n};\n\nschema.aggr = {\n  type: 'string',\n  enum: ['avg', 'sum', 'min', 'max', 'count'],\n  supportedEnums: {\n    Q: ['avg', 'sum', 'min', 'max', 'count'],\n    O: [],\n    T: ['avg', 'min', 'max'],\n    '': ['count']\n  },\n  supportedTypes: {'Q': true, 'O': true, 'T': true, '': true}\n};\nschema.band = {\n  type: 'object',\n  properties: {\n    size: {\n      type: 'integer',\n      minimum: 0\n    },\n    padding: {\n      type: 'integer',\n      minimum: 0,\n      default: 1\n    }\n  }\n};\n\nschema.getSupportedRole = function(encType) {\n  return schema.schema.properties.enc.properties[encType].supportedRole;\n};\n\nschema.timefns = ['year', 'month', 'day', 'date', 'hours', 'minutes', 'seconds'];\n\nschema.defaultTimeFn = 'month';\n\nschema.fn = {\n  type: 'string',\n  enum: schema.timefns,\n  supportedTypes: {'T': true}\n};\n\n//TODO(kanitw): add other type of function here\n\nschema.scale_type = {\n  type: 'string',\n  enum: ['linear', 'log', 'pow', 'sqrt', 'quantile'],\n  default: 'linear',\n  supportedTypes: {'Q': true}\n};\n\nschema.field = {\n  type: 'object',\n  properties: {\n    name: {\n      type: 'string'\n    }\n  }\n};\n\nvar clone = util.duplicate;\nvar merge = schema.util.merge;\n\nschema.MAXBINS_DEFAULT = 15;\n\nvar bin = {\n  type: ['boolean', 'object'],\n  default: false,\n  properties: {\n    maxbins: {\n      type: 'integer',\n      default: schema.MAXBINS_DEFAULT,\n      minimum: 2\n    }\n  },\n  supportedTypes: {'Q': true} // TODO: add 'O' after finishing #81\n};\n\nvar typicalField = merge(clone(schema.field), {\n  type: 'object',\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O', 'Q', 'T']\n    },\n    aggr: schema.aggr,\n    fn: schema.fn,\n    bin: bin,\n    scale: {\n      type: 'object',\n      properties: {\n        type: schema.scale_type,\n        reverse: {\n          type: 'boolean',\n          default: false,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        zero: {\n          type: 'boolean',\n          description: 'Include zero',\n          default: true,\n          supportedTypes: {'Q': true, 'T': true}\n        },\n        nice: {\n          type: 'string',\n          enum: ['second', 'minute', 'hour', 'day', 'week', 'month', 'year'],\n          supportedTypes: {'T': true}\n        }\n      }\n    }\n  }\n});\n\nvar onlyOrdinalField = merge(clone(schema.field), {\n  type: 'object',\n  supportedRole: {\n    dimension: true\n  },\n  properties: {\n    type: {\n      type: 'string',\n      enum: ['O','Q', 'T'] // ordinal-only field supports Q when bin is applied and T when fn is applied.\n    },\n    fn: schema.fn,\n    bin: bin,\n    aggr: {\n      type: 'string',\n      enum: ['count'],\n      supportedTypes: {'O': true}\n    }\n  }\n});\n\nvar axisMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true},\n  properties: {\n    axis: {\n      type: 'object',\n      properties: {\n        grid: {\n          type: 'boolean',\n          default: true,\n          description: 'A flag indicate if gridlines should be created in addition to ticks.'\n        },\n        title: {\n          type: 'boolean',\n          default: true,\n          description: 'A title for the axis.'\n        },\n        titleOffset: {\n          type: 'integer',\n          default: undefined,  // auto\n          description: 'A title offset value for the axis.'\n        },\n        format: {\n          type: 'string',\n          default: undefined,  // auto\n          description: 'The formatting pattern for axis labels.'\n        },\n        maxLabelLength: {\n          type: 'integer',\n          default: 25,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar sortMixin = {\n  type: 'object',\n  properties: {\n    sort: {\n      type: 'array',\n      default: [],\n      items: {\n        type: 'object',\n        supportedTypes: {'O': true},\n        required: ['name', 'aggr'],\n        name: {\n          type: 'string'\n        },\n        aggr: {\n          type: 'string',\n          enum: ['avg', 'sum', 'min', 'max', 'count']\n        },\n        reverse: {\n          type: 'boolean',\n          default: false\n        }\n      }\n    }\n  }\n};\n\nvar bandMixin = {\n  type: 'object',\n  properties: {\n    band: schema.band\n  }\n};\n\nvar legendMixin = {\n  type: 'object',\n  properties: {\n    legend: {\n      type: 'boolean',\n      default: true\n    }\n  }\n};\n\nvar textMixin = {\n  type: 'object',\n  supportedMarktypes: {'text': true},\n  properties: {\n    text: {\n      type: 'object',\n      properties: {\n        align: {\n          type: 'string',\n          default: 'left'\n        },\n        baseline: {\n          type: 'string',\n          default: 'middle'\n        },\n        margin: {\n          type: 'integer',\n          default: 4,\n          minimum: 0\n        }\n      }\n    },\n    font: {\n      type: 'object',\n      properties: {\n        weight: {\n          type: 'string',\n          enum: ['normal', 'bold'],\n          default: 'normal'\n        },\n        size: {\n          type: 'integer',\n          default: 10,\n          minimum: 0\n        },\n        family: {\n          type: 'string',\n          default: 'Helvetica Neue'\n        },\n        style: {\n          type: 'string',\n          default: 'normal',\n          enum: ['normal', 'italic']\n        }\n      }\n    }\n  }\n};\n\nvar sizeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, bar: true, circle: true, square: true, text: true},\n  properties: {\n    value: {\n      type: 'integer',\n      default: 30,\n      minimum: 0\n    }\n  }\n};\n\nvar colorMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'string',\n      role: 'color',\n      default: 'steelblue'\n    },\n    scale: {\n      type: 'object',\n      properties: {\n        range: {\n          type: ['string', 'array']\n        }\n      }\n    }\n  }\n};\n\nvar alphaMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, 'text': true},\n  properties: {\n    value: {\n      type: 'number',\n      default: undefined,  // auto\n      minimum: 0,\n      maximum: 1\n    }\n  }\n};\n\nvar shapeMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, circle: true, square: true},\n  properties: {\n    value: {\n      type: 'string',\n      enum: ['circle', 'square', 'cross', 'diamond', 'triangle-up', 'triangle-down'],\n      default: 'circle'\n    }\n  }\n};\n\nvar detailMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, line: true, circle: true, square: true}\n};\n\nvar rowMixin = {\n  properties: {\n    height: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    grid: {\n      type: 'boolean',\n      default: true,\n      description: 'A flag indicate if gridlines should be created in addition to ticks.'\n    },\n  }\n};\n\nvar colMixin = {\n  properties: {\n    width: {\n      type: 'number',\n      minimum: 0,\n      default: 150\n    },\n    axis: {\n      properties: {\n        maxLabelLength: {\n          type: 'integer',\n          default: 12,\n          minimum: 0,\n          description: 'Truncate labels that are too long.'\n        }\n      }\n    }\n  }\n};\n\nvar facetMixin = {\n  type: 'object',\n  supportedMarktypes: {point: true, tick: true, bar: true, line: true, area: true, circle: true, square: true, text: true},\n  properties: {\n    padding: {\n      type: 'number',\n      minimum: 0,\n      maximum: 1,\n      default: 0.1\n    }\n  }\n};\n\nvar requiredNameType = {\n  required: ['name', 'type']\n};\n\nvar multiRoleField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: true\n  }\n});\n\nvar quantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true,\n    dimension: 'ordinal-only' // using alpha / size to encoding category lead to order interpretation\n  }\n});\n\nvar onlyQuantitativeField = merge(clone(typicalField), {\n  supportedRole: {\n    measure: true\n  }\n});\n\nvar x = merge(clone(multiRoleField), axisMixin, bandMixin, requiredNameType, sortMixin);\nvar y = clone(x);\n\nvar facet = merge(clone(onlyOrdinalField), requiredNameType, facetMixin, sortMixin);\nvar row = merge(clone(facet), axisMixin, rowMixin);\nvar col = merge(clone(facet), axisMixin, colMixin);\n\nvar size = merge(clone(quantitativeField), legendMixin, sizeMixin, sortMixin);\nvar color = merge(clone(multiRoleField), legendMixin, colorMixin, sortMixin);\nvar alpha = merge(clone(quantitativeField), alphaMixin, sortMixin);\nvar shape = merge(clone(onlyOrdinalField), legendMixin, shapeMixin, sortMixin);\nvar detail = merge(clone(onlyOrdinalField), detailMixin, sortMixin);\n\n// we only put aggregated measure in pivot table\nvar text = merge(clone(onlyQuantitativeField), textMixin, sortMixin);\n\n// TODO add label\n\nvar filter = {\n  type: 'array',\n  items: {\n    type: 'object',\n    properties: {\n      operands: {\n        type: 'array',\n        items: {\n          type: ['string', 'boolean', 'integer', 'number']\n        }\n      },\n      operator: {\n        type: 'string',\n        enum: ['>', '>=', '=', '!=', '<', '<=', 'notNull']\n      }\n    }\n  }\n};\n\nvar cfg = {\n  type: 'object',\n  properties: {\n    // template\n    width: {\n      type: 'integer',\n      default: undefined\n    },\n    height: {\n      type: 'integer',\n      default: undefined\n    },\n    viewport: {\n      type: 'array',\n      items: {\n        type: 'integer'\n      },\n      default: undefined\n    },\n    gridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#eeeeee'\n    },\n\n    // filter null\n    filterNull: {\n      type: 'object',\n      properties: {\n        O: {type:'boolean', default: false},\n        Q: {type:'boolean', default: true},\n        T: {type:'boolean', default: true}\n      }\n    },\n    toggleSort: {\n      type: 'string',\n      default: 'O'\n    },\n\n    // single plot\n    singleHeight: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    singleWidth: {\n      // will be overwritten by bandWidth * (cardinality + padding)\n      type: 'integer',\n      default: 200,\n      minimum: 0\n    },\n    // band size\n    largeBandSize: {\n      type: 'integer',\n      default: 21,\n      minimum: 0\n    },\n    smallBandSize: {\n      //small multiples or single plot with high cardinality\n      type: 'integer',\n      default: 12,\n      minimum: 0\n    },\n    largeBandMaxCardinality: {\n      type: 'integer',\n      default: 10\n    },\n    // small multiples\n    cellPadding: {\n      type: 'number',\n      default: 0.1\n    },\n    cellGridColor: {\n      type: 'string',\n      role: 'color',\n      default: '#aaaaaa'\n    },\n    cellBackgroundColor: {\n      type: 'string',\n      role: 'color',\n      default: 'transparent'\n    },\n    textCellWidth: {\n      type: 'integer',\n      default: 90,\n      minimum: 0\n    },\n\n    // marks\n    strokeWidth: {\n      type: 'integer',\n      default: 2,\n      minimum: 0\n    },\n\n    // scales\n    timeScaleLabelLength: {\n      type: 'integer',\n      default: 3,\n      minimum: 0\n    },\n    // other\n    characterWidth: {\n      type: 'integer',\n      default: 6\n    },\n\n    // data source\n    dataFormatType: {\n      type: 'string',\n      enum: ['json', 'csv'],\n      default: 'json'\n    },\n    useVegaServer: {\n      type: 'boolean',\n      default: false\n    },\n    dataUrl: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerTable: {\n      type: 'string',\n      default: undefined\n    },\n    vegaServerUrl: {\n      type: 'string',\n      default: 'http://localhost:3001'\n    }\n  }\n};\n\n/** @type Object Schema of a vegalite specification */\nschema.schema = {\n  $schema: 'http://json-schema.org/draft-04/schema#',\n  description: 'Schema for vegalite specification',\n  type: 'object',\n  required: ['marktype', 'enc', 'cfg'],\n  properties: {\n    marktype: schema.marktype,\n    enc: {\n      type: 'object',\n      properties: {\n        x: x,\n        y: y,\n        row: row,\n        col: col,\n        size: size,\n        color: color,\n        alpha: alpha,\n        shape: shape,\n        text: text,\n        detail: detail\n      }\n    },\n    filter: filter,\n    cfg: cfg\n  }\n};\n\nschema.encTypes = util.keys(schema.schema.properties.enc.properties);\n\n/** Instantiate a verbose vl spec from the schema */\nschema.instantiate = function() {\n  return schema.util.instantiate(schema.schema);\n};\n","'use strict';\n\nvar schemautil = module.exports = {},\n  util = require('../util');\n\nvar isEmpty = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\nschemautil.extend = function(instance, schema) {\n  return schemautil.merge(schemautil.instantiate(schema), instance);\n};\n\n// instantiate a schema\nschemautil.instantiate = function(schema) {\n  var val;\n  if (schema.type === 'object') {\n    var instance = {};\n    for (var name in schema.properties) {\n      val = schemautil.instantiate(schema.properties[name]);\n      if (val !== undefined) {\n        instance[name] = val;\n      }\n    }\n    return instance;\n  } else if ('default' in schema) {\n    val = schema.default;\n    return util.isObject(val) ? util.duplicate(val) : val;\n  } else if (schema.type === 'array') {\n    return [];\n  }\n  return undefined;\n};\n\n// remove all defaults from an instance\nschemautil.subtract = function(instance, defaults) {\n  var changes = {};\n  for (var prop in instance) {\n    var def = defaults[prop];\n    var ins = instance[prop];\n    // Note: does not properly subtract arrays\n    if (!defaults || def !== ins) {\n      if (typeof ins === 'object' && !util.isArray(ins) && def) {\n        var c = schemautil.subtract(ins, def);\n        if (!isEmpty(c))\n          changes[prop] = c;\n      } else if (!util.isArray(ins) || ins.length > 0) {\n        changes[prop] = ins;\n      }\n    }\n  }\n  return changes;\n};\n\nschemautil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\n// recursively merges src into dest\nfunction merge(dest, src) {\n  if (typeof src !== 'object' || src === null) {\n    return dest;\n  }\n\n  for (var p in src) {\n    if (!src.hasOwnProperty(p)) {\n      continue;\n    }\n    if (src[p] === undefined) {\n      continue;\n    }\n    if (typeof src[p] !== 'object' || src[p] === null) {\n      dest[p] = src[p];\n    } else if (typeof dest[p] !== 'object' || dest[p] === null) {\n      dest[p] = merge(src[p].constructor === Array ? [] : {}, src[p]);\n    } else {\n      merge(dest[p], src[p]);\n    }\n  }\n  return dest;\n}","'use strict';\n\nvar util = module.exports = {};\n\nutil.keys = function(obj) {\n  var k = [], x;\n  for (x in obj) k.push(x);\n  return k;\n};\n\nutil.vals = function(obj) {\n  var v = [], x;\n  for (x in obj) v.push(obj[x]);\n  return v;\n};\n\nutil.range = function(start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n    if (arguments.length < 2) {\n      stop = start;\n      start = 0;\n    }\n  }\n  if ((stop - start) / step == Infinity) throw new Error('infinite range');\n  var range = [], i = -1, j;\n  if (step < 0) while ((j = start + step * ++i) > stop) range.push(j);\n  else while ((j = start + step * ++i) < stop) range.push(j);\n  return range;\n};\n\nutil.find = function(list, pattern) {\n  var l = list.filter(function(x) {\n    return x[pattern.name] === pattern.value;\n  });\n  return l.length && l[0] || null;\n};\n\nutil.isin = function(item, array) {\n  return array.indexOf(item) !== -1;\n};\n\nutil.uniq = function(data, field) {\n  var map = {}, count = 0, i, k;\n  for (i = 0; i < data.length; ++i) {\n    k = data[i][field];\n    if (!map[k]) {\n      map[k] = 1;\n      count += 1;\n    }\n  }\n  return count;\n};\n\nvar isNumber = function(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n};\n\n// try parsing to number\nutil.numbers = function(values) {\n  var nums = [];\n  for (var i = 0; i < values.length; i++) {\n    if (isNumber(values[i])) {\n      nums.push(+values[i]);\n    }\n  }\n  return nums;\n};\n\n// try to parse as date\nutil.dates = function(values) {\n  var dates = [];\n  for (var i = 0; i < values.length; i++) {\n    var date = Date.parse(values[i]);\n    if (!isNaN(date)) {\n      dates.push(new Date(date));\n    }\n  }\n  return dates;\n};\n\nutil.median = function(values) {\n  values.sort(function(a, b) {return a - b;});\n  var half = Math.floor(values.length/2);\n  if (values.length % 2) {\n    return values[half];\n  } else {\n    return (values[half-1] + values[half]) / 2.0;\n  }\n};\n\nutil.mean = function(values) {\n  return values.reduce(function(v, r) {return v + r;}, 0) / values.length;\n};\n\nutil.variance = function(values) {\n  var avg = util.mean(values);\n  var diffs = [];\n  for (var i = 0; i < values.length; i++) {\n    diffs.push(Math.pow((values[i] - avg), 2));\n  }\n  return util.mean(diffs);\n};\n\nutil.stablesort = function(array, sortBy, keyFn) {\n  var indices = {};\n\n  array.forEach(function(v, i) {\n    indices[keyFn(v)] = i;\n  });\n\n  array.sort(function(a, b) {\n    var sa = sortBy(a),\n      sb = sortBy(b);\n\n    return sa<sb ? -1 : sa>sb ? 1 : (indices[keyFn(a)] - indices[keyFn(b)]);\n  });\n  return array;\n};\n\nutil.stdev = function(values) {\n  return Math.sqrt(util.variance(values));\n};\n\nutil.skew = function(values) {\n  var avg = util.mean(values),\n    med = util.median(values),\n    std = util.stdev(values);\n  return 1.0 * (avg - med) / std;\n};\n\n// parses a string to date or number\nutil.parse = function(value) {\n  if (isNumber(value)) {\n    return +value;\n  }\n\n  var date = Date.parse(value);\n  if (!isNaN(date)) {\n    return (new Date(date));\n  }\n  return value;\n};\n\nutil.minmax = function(data) {\n  var stats = {min: +Infinity, max: -Infinity};\n  for (var i = 0; i < data.length; ++i) {\n    var v = data[i];\n    if (v !== null) {\n      if (v > stats.max || stats.max === -Infinity) stats.max = v;\n      if (v < stats.min || stats.min === +Infinity) stats.min = v;\n    }\n  }\n  return stats;\n};\n\nutil.duplicate = function(obj) {\n  return JSON.parse(JSON.stringify(obj));\n};\n\nutil.isObject = function(obj) {\n  return obj === Object(obj);\n};\n\nutil.isArray = Array.isArray || function(obj) {\n  return toString.call(obj) == '[object Array]';\n};\n\nutil.array = function(x) {\n  return x ? (util.isArray(x) ? x : [x]) : [];\n};\n\nutil.forEach = function(obj, f, thisArg) {\n  if (obj.forEach) {\n    obj.forEach.call(thisArg, f);\n  } else {\n    for (var k in obj) {\n      f.call(thisArg, obj[k], k , obj);\n    }\n  }\n};\n\nutil.reduce = function(obj, f, init, thisArg) {\n  if (obj.reduce) {\n    return obj.reduce.call(thisArg, f, init);\n  } else {\n    for (var k in obj) {\n      init = f.call(thisArg, init, obj[k], k, obj);\n    }\n    return init;\n  }\n};\n\nutil.map = function(obj, f, thisArg) {\n  if (obj.map) {\n    return obj.map.call(thisArg, f);\n  } else {\n    var output = [];\n    for (var k in obj) {\n      output.push( f.call(thisArg, obj[k], k, obj));\n    }\n  }\n};\n\nutil.any = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (f(arr[k], k, i++)) return true;\n  }\n  return false;\n};\n\nutil.all = function(arr, f) {\n  var i = 0, k;\n  for (k in arr) {\n    if (!f(arr[k], k, i++)) return false;\n  }\n  return true;\n};\n\n\nutil.cmp = function(a, b) {\n  if (a < b) {\n    return -1;\n  } else if (a > b) {\n    return 1;\n  } else if (a >= b) {\n    return 0;\n  } else if (a === null && b === null) {\n    return 0;\n  } else if (a === null) {\n    return -1;\n  } else if (b === null) {\n    return 1;\n  }\n  return NaN;\n};\n\nvar merge = function(dest, src) {\n  return util.keys(src).reduce(function(c, k) {\n    c[k] = src[k];\n    return c;\n  }, dest);\n};\n\nutil.merge = function(/*dest*, src0, src1, ...*/){\n  var dest = arguments[0];\n  for (var i=1 ; i<arguments.length; i++) {\n    dest = merge(dest, arguments[i]);\n  }\n  return dest;\n};\n\nutil.getbins = function(stats, maxbins) {\n  return util.bins({\n    min: stats.min,\n    max: stats.max,\n    maxbins: maxbins\n  });\n};\n\n\nutil.bins = function(opt) {\n  opt = opt || {};\n\n  // determine range\n  var maxb = opt.maxbins || 1024,\n      base = opt.base || 10,\n      div = opt.div || [5, 2],\n      mins = opt.minstep || 0,\n      logb = Math.log(base),\n      level = Math.ceil(Math.log(maxb) / logb),\n      min = opt.min,\n      max = opt.max,\n      span = max - min,\n      step = Math.max(mins, Math.pow(base, Math.round(Math.log(span) / logb) - level)),\n      nbins = Math.ceil(span / step),\n      precision, v, i, eps;\n\n  if (opt.step) {\n    step = opt.step;\n  } else if (opt.steps) {\n    // if provided, limit choice to acceptable step sizes\n    step = opt.steps[Math.min(\n        opt.steps.length - 1,\n        util_bisectLeft(opt.steps, span / maxb, 0, opt.steps.length)\n    )];\n  } else {\n    // increase step size if too many bins\n    do {\n      step *= base;\n      nbins = Math.ceil(span / step);\n    } while (nbins > maxb);\n\n    // decrease step size if allowed\n    for (i = 0; i < div.length; ++i) {\n      v = step / div[i];\n      if (v >= mins && span / v <= maxb) {\n        step = v;\n        nbins = Math.ceil(span / step);\n      }\n    }\n  }\n\n  // update precision, min and max\n  v = Math.log(step);\n  precision = v >= 0 ? 0 : ~~(-v / logb) + 1;\n  eps = (min<0 ? -1 : 1) * Math.pow(base, -precision - 1);\n  min = Math.min(min, Math.floor(min / step + eps) * step);\n  max = Math.ceil(max / step) * step;\n\n  return {\n    start: min,\n    stop: max,\n    step: step,\n    unit: precision\n  };\n};\n\nfunction util_bisectLeft(a, x, lo, hi) {\n  while (lo < hi) {\n    var mid = lo + hi >>> 1;\n    if (util.cmp(a[mid], x) < 0) { lo = mid + 1; }\n    else { hi = mid; }\n  }\n  return lo;\n}\n\n/**\n * x[p[0]]...[p[n]] = val\n * @param noaugment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.setter = function(x, p, val, noaugment) {\n  for (var i=0; i<p.length-1; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  x[p[i]] = val;\n};\n\n\n/**\n * returns x[p[0]]...[p[n]]\n * @param augment determine whether new object should be added f\n * or non-existing properties along the path\n */\nutil.getter = function(x, p, noaugment) {\n  for (var i=0; i<p.length; ++i) {\n    if (!noaugment && !(p[i] in x)){\n      x = x[p[i]] = {};\n    } else {\n      x = x[p[i]];\n    }\n  }\n  return x;\n};\n\nutil.truncate = function(s, length, pos, word, ellipsis) {\n  var len = s.length;\n  if (len <= length) return s;\n  ellipsis = ellipsis || \"...\";\n  var l = Math.max(0, length - ellipsis.length);\n\n  switch (pos) {\n    case \"left\":\n      return ellipsis + (word ? vg_truncateOnWord(s,l,1) : s.slice(len-l));\n    case \"middle\":\n    case \"center\":\n      var l1 = Math.ceil(l/2), l2 = Math.floor(l/2);\n      return (word ? vg_truncateOnWord(s,l1) : s.slice(0,l1)) + ellipsis +\n        (word ? vg_truncateOnWord(s,l2,1) : s.slice(len-l2));\n    default:\n      return (word ? vg_truncateOnWord(s,l) : s.slice(0,l)) + ellipsis;\n  }\n};\n\nfunction vg_truncateOnWord(s, len, rev) {\n  var cnt = 0, tok = s.split(vg_truncate_word_re);\n  if (rev) {\n    s = (tok = tok.reverse())\n      .filter(function(w) { cnt += w.length; return cnt <= len; })\n      .reverse();\n  } else {\n    s = tok.filter(function(w) { cnt += w.length; return cnt <= len; });\n  }\n  return s.length ? s.join(\"\").trim() : tok[0].slice(0, len);\n}\n\nvar vg_truncate_word_re = /([\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u2028\\u2029\\u3000\\uFEFF])/;\n\n\nutil.error = function(msg) {\n  console.error('[VL Error]', msg);\n};\n\n"],"sourceRoot":"/source/"}